
#include <stdio.h>
#include <stdlib.h>

#include "system.h"
#include "game_data_constants.h"
#include "moster_data.h"
#include "vga/vga-helper.h"
#include "FixedTextDrawing.h"

#define YELLOW  0
#define BLUE    1
#define RED     2
#define HIDDEN  3

#define Health  0
#define Attack  1
#define Defense 2
#define Status  3
#define EXP     4
#define Yellow_Key      5
#define Blue_Key        6
#define Red_Key         7
#define Coin            8
#define Special_Items   9

// These addresses are defined in system.h generated by Eclipse, and they
// should have been matched to the addresses shown in Qsys.
// If for any reason they are not correctly defined, you can replace these
// with the addresses you read in Qsys.
volatile unsigned int  * Tile_mem_base           = (unsigned int *)     MAIN_SOC_ONCHIP_MEM_FOR_TILES_BASE;
volatile unsigned int  * Player_controller_base  = (unsigned int *) 	0x19800;
volatile alt_16        * Game_data_mem_base      = (alt_16 *)           0x10000;
volatile unsigned char * Keycode_mem_base        = (unsigned char *)    0x15010;

// Some important global variables
unsigned int cur_posXY, cur_posX, cur_posY, cur_floor;
unsigned char usb_key;

void Init_Game()
{
    // Init Status
    for (int i = 0; i < PLAYER_STATUS_TYPE; i++) {
        Game_data_mem_base[i] = Player_Status_Init[i];
    }

    // Init Floor Config
    for (int i = 0; i < TOT_FLOOR_NUMBER; i++) {
        for (int j = 0; j < FLOOR_SIZE; j++) {
            Game_data_mem_base[PLAYER_STATUS_TYPE + i * FLOOR_SIZE + j] = Floor_Configuration_Init[i][j];
        }
    }

    cur_floor = 0;
    Player_controller_base[4] = 0;                         // Have no special items
    Player_controller_base[7] = 0;                         // START = 0
    Player_controller_base[11] = 0;                        // DONE = 0
}

void Normal_Walk()
{
    // Now this function does nothing
    printf("HAHAHA, NORMAL WALK!!!!\n");
}

int Increase_Attribute(int Type, alt_16 value)
{
    if (Game_data_mem_base[Type] + value >= 0)
    {
        Game_data_mem_base[Type] += value;
        return 1;
    }
    else { return 0;}
}

void Change_Status(alt_16 value)
{
    Game_data_mem_base[3] = value;
}

void Pick_Items()
{
    switch (usb_key) {
        case 0x1a:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY - 1) * 11 + cur_posX] = (alt_16) ROAD;
            break;
        case 0x16:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY + 1) * 11 + cur_posX] = (alt_16) ROAD;
            break;
        case 0x04:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1]   = (alt_16) ROAD;
            break;
        case 0x07:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1]   = (alt_16) ROAD;
            break;
        default: break;
    }
}

void Meet_Door(int Type)
{
    switch (Type)
    {
        case YELLOW:
            if (0 == Increase_Attribute(Yellow_Key, -1)) { return;}
            break;
        case BLUE:
            if (0 == Increase_Attribute(Blue_Key, -1)) { return;}
            break;
        case RED:
            if (0 == Increase_Attribute(Red_Key, -1)) { return;}
            break;
        case HIDDEN:
            break;
        default: break;
    }
    // If there are keys left:
    Pick_Items();
}

void Meet_Coin_Store()
{

}

void Meet_EXP_Store()
{

}

void Go_Upstairs()
{
    if ((cur_floor + 1) < TOT_FLOOR_NUMBER) {
        cur_floor ++;
    }
}

void Go_DownStairs()
{
    if (cur_floor > 0) {
        cur_floor --;
    }
}

/*  Return 1 if the knight defeats the moster, 0 if the knight fails  */
int Do_Battle(int moster_type)
{
    Moster_Attributes* target_moster;

    // Choose the monster_type
    switch (moster_type)
    {
        case SLIME_GREEN1:
        case SLIME_GREEN2:
            target_moster = Moster_List[0];
            break;
        case BAT1:
        case BAT2:
            target_moster = Moster_List[2];
            break;
        default:
            break;
    }

    // Calculate the health change of the player
    int player_health  = (int) Game_data_mem_base[Health];
    int player_attack  = (int) Game_data_mem_base[Attack];
    int player_defense = (int) Game_data_mem_base[Defense];
    // int player_status  = (int) Game_data_mem_base[Status];

#define damange(x, y) ( (x > y) ? (x - y) : 0 )

    while (1)
    {
        // Player attack first normally
        target_moster->Monster_Health -= damange(player_attack, target_moster->Monster_Defense);
        if (target_moster->Monster_Health > 0)
        {
            player_health -= damange(target_moster->Monster_Attack, player_defense);
        }
        else
        {
            Game_data_mem_base[Health] = player_health;
            return 1;
        }
        
        if (player_health <= 0)
        {
            Game_data_mem_base[Health] = 0;
            return 0;
        }
    }

#undef damange
}

void Battle()
{
    int moster_type;

    switch (usb_key) {
        case 0x1a:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY - 1) * 11 + cur_posX];
            break;
        case 0x16:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY + 1) * 11 + cur_posX];
            break;
        case 0x04:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1];
            break;
        case 0x07:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1];
            break;
        default: break;
    }

    if (1 == Do_Battle(moster_type))
    {
        Pick_Items();
    }
}

// Execution of the Game
int main()
{
    Init_Game();

    // Get the current position of the player
    cur_floor = Player_controller_base[8];
    cur_posXY = Player_controller_base[9];
    cur_posX  = cur_posXY / 16;
    cur_posY  = cur_posXY % 16;

    // Main Loop
    while(1) {
        // Reset SRART and DONE signals
        Player_controller_base[7]  = 0;                        // START = 0
        Player_controller_base[11] = 0;                        // DONE = 0

        // Send the information the control system needs
        Player_controller_base[0] = (unsigned int) Game_data_mem_base[PLAYER_STATUS_TYPE +
                                    cur_floor * FLOOR_SIZE + (cur_posY - 1) * 11 + cur_posX];
        Player_controller_base[1] = (unsigned int) Game_data_mem_base[PLAYER_STATUS_TYPE +
                                    cur_floor * FLOOR_SIZE + (cur_posY + 1) * 11 + cur_posX];
        Player_controller_base[2] = (unsigned int) Game_data_mem_base[PLAYER_STATUS_TYPE +
                                    cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1];
        Player_controller_base[3] = (unsigned int) Game_data_mem_base[PLAYER_STATUS_TYPE +
                                    cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1];
        Player_controller_base[4] = (unsigned int) Game_data_mem_base[Special_Items];
        Player_controller_base[5] = 0;

        printf("UP: %d\n", Player_controller_base[0]);
        printf("DOWN: %d\n", Player_controller_base[1]);
        printf("LEFT: %d\n", Player_controller_base[2]);
        printf("RIGHT: %d\n", Player_controller_base[3]);
        printf("keycode: %x\n", Player_controller_base[5]);
        printf("start: %d\n", Player_controller_base[7]);
        printf("posX: %d\n", cur_posX);
        printf("posY: %d\n", cur_posY);
        printf("encounter: %d\n", Player_controller_base[10]);
        printf("Done: %d\n", Player_controller_base[11]);
        printf("Health: %d\n", Game_data_mem_base[Health]);

        while ( Player_controller_base[5] != 0x1a && Player_controller_base[5] != 0x04 &&
                Player_controller_base[5] != 0x16 && Player_controller_base[5] != 0x07 ) {
            Player_controller_base[5] = (unsigned int) Keycode_mem_base[0];
        }
        // Player_controller_base[5] = 0x00000007;

        Player_controller_base[10] = 0;     // Clear the encounter
        
        // It is ready, we start moving
        Player_controller_base[7] = 1;

        // Wait until the done signal is ready
        while (Player_controller_base[11] != 1) {}

        // Get the current position of the player
        cur_posXY = Player_controller_base[9];
        cur_posX = cur_posXY / 16;
        cur_posY = cur_posXY % 16;
        // cur_floor = Player_controller_base[8];
        usb_key = Keycode_mem_base[0];
        // usb_key = Player_controller_base[5];

        // When ready, we see the encounter signals and make updates
        switch (Player_controller_base[10])
        {
            /*
                encounter_signals back to the NIOS-II to determin what to do next
                8'd0 : Normal Walk (OR Collide with Normal Walls)
                8'd1 : Pick Red Gem
                8'd2 : Pick Blue Gem
                8'd3 : Pick Yellow Key
                8'd4 : Pick Blue Key
                8'd5 : Pick Red Key
                8'd6 : Pick Red Health
                8'd7 : Pick Blue Health
                8'd8 : Meet Yellow Door
                8'd9 : Meet Blue Door
                8'd10: Meet Blue Red
                8'd11: Meet Hidden Path
                8'd12: Meet Coin Store
                8'd13: Meet EXP Store
                8'd14: Go Upstairs
                8'd15: Go Downstairs
                8'd16: Battle !!!!

                what_items indicates the current items the player has
                Bit 0: Monster Book
                Bit 1: Floor Transmission
                BIt 2: TBD
            */
            case 0:
                Normal_Walk();
                break;
            case 1:
                Pick_Items();
                Increase_Attribute(Attack, 2);
                break;
            case 2:
                Pick_Items();
                Increase_Attribute(Defense, 2);
                break;
            case 3:
                Pick_Items();
                Increase_Attribute(Yellow_Key, 1);
                break;
            case 4:
                Pick_Items();
                Increase_Attribute(Blue_Key, 1);
                break;
            case 5:
                Pick_Items();
                Increase_Attribute(Red_Key, 1);
                break;
            case 6:
                Pick_Items();
                Increase_Attribute(Health, 100);
                break;
            case 7:
                Pick_Items();
                Increase_Attribute(Health, 200);
                break;
            case 8:
                Meet_Door(YELLOW);
                break;
            case 9:
                Meet_Door(BLUE);
                break;
            case 10:
                Meet_Door(RED);
                break;
            case 11:
                Meet_Door(HIDDEN);
                break;
            case 12:
                Meet_Coin_Store();
                break;
            case 13:
                Meet_EXP_Store();
                break;
            case 14:
                Go_Upstairs();
                break;
            case 15:
                Go_DownStairs();
                break;
            case 16:
                Battle();
                break;
            default: break;
        }

        printf("UP: %d\n", Player_controller_base[0]);
        printf("DOWN: %d\n", Player_controller_base[1]);
        printf("LEFT: %d\n", Player_controller_base[2]);
        printf("RIGHT: %d\n", Player_controller_base[3]);
        printf("keycode: %x\n", Player_controller_base[5]);
        printf("start: %d\n", Player_controller_base[7]);
        printf("posX: %d\n", cur_posX);
        printf("posY: %d\n", cur_posY);
        printf("encounter: %d\n", Player_controller_base[10]);
        printf("Done: %d\n", Player_controller_base[11]);
        printf("Health: %d\n", Game_data_mem_base[Health]);

        // Reset SRART and DONE signals
        Player_controller_base[7]  = 0;                        // START = 0
        Player_controller_base[11] = 0;                        // DONE = 0
    }

    return 0;
}
