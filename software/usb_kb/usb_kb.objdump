
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005474 memsz 0x00005474 flags r-x
    LOAD off    0x00006494 vaddr 0x00005494 paddr 0x000067ac align 2**12
         filesz 0x00001318 memsz 0x00001318 flags rw-
    LOAD off    0x00007ac4 vaddr 0x00007ac4 paddr 0x00007ac4 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004af8  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000076c  00004d28  00004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001318  00005494  000067ac  00006494  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00007ac4  00007ac4  00007ac4  2**2
                  ALLOC, SMALL_DATA
  6 .USB_onchip_mem 00000000  00007be8  00007be8  000077ac  2**0
                  CONTENTS
  7 .keycode_mem  00000000  00009098  00009098  000077ac  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000077ac  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006b8  00000000  00000000  000077d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008cf2  00000000  00000000  00007e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003218  00000000  00000000  00010b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003832  00000000  00000000  00013d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000f78  00000000  00000000  000175c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000200a  00000000  00000000  0001853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001523  00000000  00000000  0001a546  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0001ba6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002e0  00000000  00000000  0001bab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001dc82  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0001dc85  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001dc8f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001dc90  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001dc91  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001dc95  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001dc99  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000d  00000000  00000000  0001dc9d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000d  00000000  00000000  0001dcaa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000d  00000000  00000000  0001dcb7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0001dcc4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002b  00000000  00000000  0001dccd  2**0
                  CONTENTS, READONLY
 30 .jdi          00009f55  00000000  00000000  0001dcf8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000f4829  00000000  00000000  00027c4d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00004d28 l    d  .rodata	00000000 .rodata
00005494 l    d  .rwdata	00000000 .rwdata
00007ac4 l    d  .bss	00000000 .bss
00007be8 l    d  .USB_onchip_mem	00000000 .USB_onchip_mem
00009098 l    d  .keycode_mem	00000000 .keycode_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00007ac4 l     O .bss	00000002 ctl_reg.3590
00007ac6 l     O .bss	00000002 no_device.3591
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000023bc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005494 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00002c5c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00002de4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002f20 l     F .text	00000034 alt_dev_reg
00005574 l     O .rwdata	00001060 USB_jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000031fc l     F .text	0000020c altera_avalon_jtag_uart_irq
00003408 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00003cc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00003df8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00003e24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000041c4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00004324 l     F .text	0000003c alt_get_errno
00004360 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00007ae4 g     O .bss	00000004 alt_instruction_exception_handler
00002d48 g     F .text	0000006c alt_main
0000230c g     F .text	00000080 _puts_r
00007ae8 g     O .bss	00000100 alt_irq
000067ac g       *ABS*	00000000 __flash_rwdata_start
000022c0 g     F .text	0000004c printf
00002184 g     F .text	00000080 UsbGetRetryCnt
0000026c g     F .text	00000088 IO_init
00009098 g       *ABS*	00000000 __alt_mem_keycode_mem
000047d0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007ac8 g     O .bss	00000004 errno
00007ad0 g     O .bss	00000004 alt_argv
0000e77c g       *ABS*	00000000 _gp
00002db4 g     F .text	00000030 usleep
000065fc g     O .rwdata	00000180 alt_fd_list
000047f4 g     F .text	00000090 alt_find_dev
00004b3c g     F .text	00000028 memcpy
000042a8 g     F .text	0000007c alt_io_redirect
0000238c g     F .text	00000014 puts
00004a50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00003600 g     F .text	0000021c altera_avalon_jtag_uart_read
00002284 g     F .text	0000003c _printf_r
00002b78 g     F .text	00000064 .hidden __udivsi3
00001810 g     F .text	00000268 UsbGetConfigDesc2
00006798 g     O .rwdata	00000004 alt_max_fd
00006780 g     O .rwdata	00000004 _global_impure_ptr
00007be8 g       *ABS*	00000000 __bss_end
000040d4 g     F .text	000000f0 alt_iic_isr_register
000046c8 g     F .text	00000108 alt_tick
00001260 g     F .text	00000100 UsbSetAddress
00004088 g     F .text	0000004c alt_ic_irq_enabled
0000462c g     F .text	0000009c alt_alarm_stop
00007ad8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000065d4 g     O .rwdata	00000028 alt_dev_null
00003dd8 g     F .text	00000020 alt_dcache_flush_all
00000374 g     F .text	00000094 IO_read
000067ac g       *ABS*	00000000 __ram_rwdata_end
00006790 g     O .rwdata	00000008 alt_dev_list
00002e20 g     F .text	00000100 write
00005494 g       *ABS*	00000000 __ram_rodata_end
00002204 g     F .text	00000080 UsbPrintMem
00002bdc g     F .text	00000058 .hidden __umodsi3
00007be8 g       *ABS*	00000000 end
0000313c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000381c g     F .text	00000224 altera_avalon_jtag_uart_write
00002428 g     F .text	0000052c ___vfprintf_internal_r
00001b78 g     F .text	00000100 UsbClassRequest
00004b64 g     F .text	00000190 __call_exitprocs
00000230 g     F .text	0000003c _start
00007adc g     O .bss	00000004 _alt_tick_rate
00007ae0 g     O .bss	00000004 _alt_nticks
00002f8c g     F .text	0000004c alt_sys_init
000034a8 g     F .text	00000068 altera_avalon_jtag_uart_close
00002c34 g     F .text	00000028 .hidden __mulsi3
00005494 g       *ABS*	00000000 __ram_rwdata_start
00004d28 g       *ABS*	00000000 __ram_rodata_start
00001360 g     F .text	00000148 UsbGetDeviceDesc1
00002fd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000498c g     F .text	000000c4 alt_get_fd
00003b6c g     F .text	00000158 alt_busy_sleep
00004b0c g     F .text	00000030 memcmp
00003098 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007be8 g       *ABS*	00000000 __alt_stack_base
000030e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002100 g     F .text	00000084 UsbWaitTDListDone
00004884 g     F .text	00000108 alt_find_file
00003e60 g     F .text	000000a4 alt_dev_llist_insert
00002970 g     F .text	000000b8 __sfvwrite_small_dev
00007ac4 g       *ABS*	00000000 __bss_start
00000408 g     F .text	00000d00 main
00007ad4 g     O .bss	00000004 alt_envp
00003038 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001a78 g     F .text	00000100 UsbSetConfig
0000679c g     O .rwdata	00000004 alt_errno
00002a80 g     F .text	00000084 .hidden __divsi3
00001c78 g     F .text	00000148 UsbGetHidDesc
00004d28 g       *ABS*	00000000 __flash_rodata_start
00001160 g     F .text	0000004c UsbRead
00002f54 g     F .text	00000038 alt_irq_init
000045a8 g     F .text	00000084 alt_release_fd
00002a28 g     F .text	00000058 _write_r
00006784 g     O .rwdata	00000004 _impure_ptr
00007acc g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00006788 g     O .rwdata	00000008 alt_fs_list
00001dc0 g     F .text	00000340 UsbGetReportDesc
00000000 g       *ABS*	00000000 __alt_mem_USB_onchip_mem
00000020 g       *ABS*	00000000 __ram_exceptions_start
00003f24 g     F .text	00000050 alt_ic_isr_register
000067ac g       *ABS*	00000000 _edata
00007be8 g       *ABS*	00000000 _end
00001108 g     F .text	00000058 UsbWrite
00000230 g       *ABS*	00000000 __ram_exceptions_end
00003510 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00003ffc g     F .text	0000008c alt_ic_irq_disable
00004aec g     F .text	00000020 exit
00002b04 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000002f4 g     F .text	00000080 IO_write
00004cf4 g     F .text	00000034 _exit
00003a40 g     F .text	0000012c alt_alarm_start
0000677c g     O .rwdata	00000004 Keycode_mem_base
000023a0 g     F .text	0000001c strlen
0000444c g     F .text	0000015c open
00003f04 g     F .text	00000020 alt_icache_flush_all
000067a0 g     O .rwdata	00000004 alt_priority_mask
00003f74 g     F .text	00000088 alt_ic_irq_enable
00002954 g     F .text	0000001c __vfprintf_internal
00001680 g     F .text	00000190 UsbGetConfigDesc1
000067a4 g     O .rwdata	00000008 alt_alarm_list
000011ac g     F .text	000000b4 UsbSoftReset
00003d00 g     F .text	000000d8 close
000014a8 g     F .text	000001d8 UsbGetDeviceDesc2
00002cc4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800034 	movhi	r2,0
 140:	109eba04 	addi	r2,r2,31464
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	109eba04 	addi	r2,r2,31464
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <_gp+0xffff19b0>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <_gp+0xffff19a4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a4da17 	ldw	r2,-27800(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a4da17 	ldw	r2,-27800(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6b9df14 	ori	gp,gp,59260
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	109eb114 	ori	r2,r2,31428

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18defa14 	ori	r3,r3,31720

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_gp+0xffff1ad8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0002cc40 	call	2cc4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0002d480 	call	2d48 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <_gp+0xffff1aec>

0000026c <IO_init>:
#include "system.h"
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     26c:	deffff04 	addi	sp,sp,-4
     270:	df000015 	stw	fp,0(sp)
     274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     278:	00a40014 	movui	r2,36864
     27c:	00c00044 	movi	r3,1
     280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     284:	00a40414 	movui	r2,36880
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     290:	00a40c14 	movui	r2,36912
     294:	00c00044 	movi	r3,1
     298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     29c:	00a40814 	movui	r2,36896
     2a0:	00c00044 	movi	r3,1
     2a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a8:	00a41414 	movui	r2,36944
     2ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2b0:	00a41014 	movui	r2,36928
     2b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2b8:	00a40414 	movui	r2,36880
     2bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2c0:	00a40014 	movui	r2,36864
     2c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2c8:	00a40014 	movui	r2,36864
     2cc:	00c00044 	movi	r3,1
     2d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     2d4:	00a40414 	movui	r2,36880
     2d8:	00c00044 	movi	r3,1
     2dc:	10c00005 	stb	r3,0(r2)
}
     2e0:	0001883a 	nop
     2e4:	e037883a 	mov	sp,fp
     2e8:	df000017 	ldw	fp,0(sp)
     2ec:	dec00104 	addi	sp,sp,4
     2f0:	f800283a 	ret

000002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2f4:	defffd04 	addi	sp,sp,-12
     2f8:	df000215 	stw	fp,8(sp)
     2fc:	df000204 	addi	fp,sp,8
     300:	2007883a 	mov	r3,r4
     304:	2805883a 	mov	r2,r5
     308:	e0fffe05 	stb	r3,-8(fp)
     30c:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     310:	00a41414 	movui	r2,36944
     314:	e0fffe03 	ldbu	r3,-8(fp)
     318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     31c:	00a40414 	movui	r2,36880
     320:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     324:	00a40814 	movui	r2,36896
     328:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
     32c:	00a41014 	movui	r2,36928
     330:	e0ffff0b 	ldhu	r3,-4(fp)
     334:	10c00015 	stw	r3,0(r2)
	// Reset OTG chip
	*otg_hpi_w = 1;
     338:	00a40814 	movui	r2,36896
     33c:	00c00044 	movi	r3,1
     340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     344:	00a40414 	movui	r2,36880
     348:	00c00044 	movi	r3,1
     34c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     350:	00a41414 	movui	r2,36944
     354:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     358:	00a41014 	movui	r2,36928
     35c:	10000015 	stw	zero,0(r2)
}
     360:	0001883a 	nop
     364:	e037883a 	mov	sp,fp
     368:	df000017 	ldw	fp,0(sp)
     36c:	dec00104 	addi	sp,sp,4
     370:	f800283a 	ret

00000374 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     374:	defffc04 	addi	sp,sp,-16
     378:	dfc00315 	stw	ra,12(sp)
     37c:	df000215 	stw	fp,8(sp)
     380:	df000204 	addi	fp,sp,8
     384:	2005883a 	mov	r2,r4
     388:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     38c:	00a41414 	movui	r2,36944
     390:	e0ffff03 	ldbu	r3,-4(fp)
     394:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     398:	00a40414 	movui	r2,36880
     39c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3a0:	00a40c14 	movui	r2,36912
     3a4:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     3a8:	00a41014 	movui	r2,36928
     3ac:	10800017 	ldw	r2,0(r2)
     3b0:	e0bffe0d 	sth	r2,-8(fp)
	// Reset OTG chip
	*otg_hpi_r = 1;
     3b4:	00a40c14 	movui	r2,36912
     3b8:	00c00044 	movi	r3,1
     3bc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     3c0:	00a40414 	movui	r2,36880
     3c4:	00c00044 	movi	r3,1
     3c8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     3cc:	00a41414 	movui	r2,36944
     3d0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     3d4:	00a41014 	movui	r2,36928
     3d8:	10000015 	stw	zero,0(r2)
	printf("%x\n",temp);
     3dc:	e0bffe0b 	ldhu	r2,-8(fp)
     3e0:	100b883a 	mov	r5,r2
     3e4:	01000034 	movhi	r4,0
     3e8:	21134a04 	addi	r4,r4,19752
     3ec:	00022c00 	call	22c0 <printf>
	return temp;
     3f0:	e0bffe0b 	ldhu	r2,-8(fp)
}
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     408:	defff904 	addi	sp,sp,-28
     40c:	dfc00615 	stw	ra,24(sp)
     410:	df000515 	stw	fp,20(sp)
     414:	df000504 	addi	fp,sp,20
	Keycode_mem_base[0] = 0;
     418:	d0a00017 	ldw	r2,-32768(gp)
     41c:	10000005 	stb	zero,0(r2)
	IO_init();
     420:	000026c0 	call	26c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
     424:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
     428:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
     42c:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
     430:	01000034 	movhi	r4,0
     434:	21134b04 	addi	r4,r4,19756
     438:	000238c0 	call	238c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     43c:	00011ac0 	call	11ac <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     440:	000b883a 	mov	r5,zero
     444:	01005104 	movi	r4,324
     448:	00011080 	call	1108 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     44c:	017fffd4 	movui	r5,65535
     450:	01302414 	movui	r4,49296
     454:	00011080 	call	1108 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     458:	01409604 	movi	r5,600
     45c:	01006d04 	movi	r4,436
     460:	00011080 	call	1108 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     464:	00811004 	movi	r2,1088
     468:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     46c:	e0bffb0b 	ldhu	r2,-20(fp)
     470:	100b883a 	mov	r5,r2
     474:	01005084 	movi	r4,322
     478:	00011080 	call	1108 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     47c:	00808404 	movi	r2,528
     480:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     484:	e0bffe0b 	ldhu	r2,-8(fp)
     488:	100b883a 	mov	r5,r2
     48c:	01302314 	movui	r4,49292
     490:	00011080 	call	1108 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     494:	000b883a 	mov	r5,zero
     498:	01007104 	movi	r4,452
     49c:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     4a0:	000b883a 	mov	r5,zero
     4a4:	01007184 	movi	r4,454
     4a8:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     4ac:	000b883a 	mov	r5,zero
     4b0:	01007204 	movi	r4,456
     4b4:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     4b8:	000b883a 	mov	r5,zero
     4bc:	01007284 	movi	r4,458
     4c0:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     4c4:	000b883a 	mov	r5,zero
     4c8:	01007304 	movi	r4,460
     4cc:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     4d0:	000b883a 	mov	r5,zero
     4d4:	01007384 	movi	r4,462
     4d8:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     4dc:	000b883a 	mov	r5,zero
     4e0:	01007404 	movi	r4,464
     4e4:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     4e8:	000b883a 	mov	r5,zero
     4ec:	01007484 	movi	r4,466
     4f0:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     4f4:	000b883a 	mov	r5,zero
     4f8:	01007504 	movi	r4,468
     4fc:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     500:	000b883a 	mov	r5,zero
     504:	01007584 	movi	r4,470
     508:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     50c:	000b883a 	mov	r5,zero
     510:	01007604 	movi	r4,472
     514:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     518:	000b883a 	mov	r5,zero
     51c:	01007684 	movi	r4,474
     520:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     524:	000b883a 	mov	r5,zero
     528:	01007704 	movi	r4,476
     52c:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     530:	000b883a 	mov	r5,zero
     534:	01007784 	movi	r4,478
     538:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     53c:	01401c84 	movi	r5,114
     540:	01007084 	movi	r4,450
     544:	00011080 	call	1108 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     548:	01738054 	movui	r5,52737
     54c:	01000044 	movi	r4,1
     550:	00002f40 	call	2f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     554:	0001883a 	nop
     558:	010000c4 	movi	r4,3
     55c:	00003740 	call	374 <IO_read>
     560:	10bfffcc 	andi	r2,r2,65535
     564:	103ffc26 	beq	r2,zero,558 <_gp+0xffff1ddc>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     568:	00000806 	br	58c <main+0x184>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     56c:	01000044 	movi	r4,1
     570:	00003740 	call	374 <IO_read>
     574:	10bfffcc 	andi	r2,r2,65535
     578:	100b883a 	mov	r5,r2
     57c:	01000034 	movhi	r4,0
     580:	21135104 	addi	r4,r4,19780
     584:	00022c00 	call	22c0 <printf>
		goto USB_HOT_PLUG;
     588:	003fac06 	br	43c <_gp+0xffff1cc0>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     58c:	01000044 	movi	r4,1
     590:	00003740 	call	374 <IO_read>
     594:	10bfffcc 	andi	r2,r2,65535
     598:	1083fb58 	cmpnei	r2,r2,4077
     59c:	103ff31e 	bne	r2,zero,56c <_gp+0xffff1df0>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     5a0:	01000034 	movhi	r4,0
     5a4:	21135a04 	addi	r4,r4,19816
     5a8:	00022c00 	call	22c0 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     5ac:	01401d04 	movi	r5,116
     5b0:	01007084 	movi	r4,450
     5b4:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     5b8:	01400f04 	movi	r5,60
     5bc:	01007104 	movi	r4,452
     5c0:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     5c4:	000b883a 	mov	r5,zero
     5c8:	01007184 	movi	r4,454
     5cc:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     5d0:	000b883a 	mov	r5,zero
     5d4:	01007204 	movi	r4,456
     5d8:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     5dc:	000b883a 	mov	r5,zero
     5e0:	01007284 	movi	r4,458
     5e4:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     5e8:	000b883a 	mov	r5,zero
     5ec:	01007304 	movi	r4,460
     5f0:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     5f4:	000b883a 	mov	r5,zero
     5f8:	01007384 	movi	r4,462
     5fc:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     600:	000b883a 	mov	r5,zero
     604:	01007404 	movi	r4,464
     608:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     60c:	000b883a 	mov	r5,zero
     610:	01007484 	movi	r4,466
     614:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     618:	000b883a 	mov	r5,zero
     61c:	01007504 	movi	r4,468
     620:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     624:	000b883a 	mov	r5,zero
     628:	01007584 	movi	r4,470
     62c:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     630:	000b883a 	mov	r5,zero
     634:	01007604 	movi	r4,472
     638:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     63c:	000b883a 	mov	r5,zero
     640:	01007684 	movi	r4,474
     644:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     648:	000b883a 	mov	r5,zero
     64c:	01007704 	movi	r4,476
     650:	00011080 	call	1108 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     654:	000b883a 	mov	r5,zero
     658:	01007784 	movi	r4,478
     65c:	00011080 	call	1108 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     660:	01738054 	movui	r5,52737
     664:	01000044 	movi	r4,1
     668:	00002f40 	call	2f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     66c:	0001883a 	nop
     670:	01000044 	movi	r4,1
     674:	00003740 	call	374 <IO_read>
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	1083fb58 	cmpnei	r2,r2,4077
     680:	10000826 	beq	r2,zero,6a4 <main+0x29c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     684:	01000044 	movi	r4,1
     688:	00003740 	call	374 <IO_read>
     68c:	10bfffcc 	andi	r2,r2,65535
     690:	100b883a 	mov	r5,r2
     694:	01000034 	movhi	r4,0
     698:	21135104 	addi	r4,r4,19780
     69c:	00022c00 	call	22c0 <printf>
		goto USB_HOT_PLUG;
     6a0:	003f6606 	br	43c <_gp+0xffff1cc0>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     6a4:	00b02284 	movi	r2,-16246
     6a8:	d0a4d20d 	sth	r2,-27832(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     6ac:	008c0004 	movi	r2,12288
     6b0:	d0a4d28d 	sth	r2,-27830(gp)
	fs_device = A_DP_STAT;
     6b4:	00880004 	movi	r2,8192
     6b8:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
     6bc:	d0a4d20b 	ldhu	r2,-27832(gp)
     6c0:	10bfffcc 	andi	r2,r2,65535
     6c4:	1009883a 	mov	r4,r2
     6c8:	00011600 	call	1160 <UsbRead>
     6cc:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
     6d0:	d0a4d28b 	ldhu	r2,-27830(gp)
     6d4:	e0fffb0b 	ldhu	r3,-20(fp)
     6d8:	1884703a 	and	r2,r3,r2
     6dc:	10bfffcc 	andi	r2,r2,65535
     6e0:	1000151e 	bne	r2,zero,738 <main+0x330>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     6e4:	e03ffbc5 	stb	zero,-17(fp)
     6e8:	00000f06 	br	728 <main+0x320>
		{
			usleep(5*1000);
     6ec:	0104e204 	movi	r4,5000
     6f0:	0002db40 	call	2db4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     6f4:	d0a4d20b 	ldhu	r2,-27832(gp)
     6f8:	10bfffcc 	andi	r2,r2,65535
     6fc:	1009883a 	mov	r4,r2
     700:	00011600 	call	1160 <UsbRead>
     704:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
     708:	d0a4d28b 	ldhu	r2,-27830(gp)
     70c:	e0fffb0b 	ldhu	r3,-20(fp)
     710:	1884703a 	and	r2,r3,r2
     714:	10bfffcc 	andi	r2,r2,65535
     718:	1000141e 	bne	r2,zero,76c <main+0x364>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     71c:	e0bffbc3 	ldbu	r2,-17(fp)
     720:	10800044 	addi	r2,r2,1
     724:	e0bffbc5 	stb	r2,-17(fp)
     728:	e0bffbc3 	ldbu	r2,-17(fp)
     72c:	10800170 	cmpltui	r2,r2,5
     730:	103fee1e 	bne	r2,zero,6ec <_gp+0xffff1f70>
     734:	00000e06 	br	770 <main+0x368>
		// }
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     738:	e0fffb0b 	ldhu	r3,-20(fp)
     73c:	e0bffc0b 	ldhu	r2,-16(fp)
     740:	1884703a 	and	r2,r3,r2
     744:	10bfffcc 	andi	r2,r2,65535
     748:	10000426 	beq	r2,zero,75c <main+0x354>
		{
			printf("[INFO]: full speed device\n");
     74c:	01000034 	movhi	r4,0
     750:	21135e04 	addi	r4,r4,19832
     754:	000238c0 	call	238c <puts>
     758:	00000506 	br	770 <main+0x368>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     75c:	01000034 	movhi	r4,0
     760:	21136504 	addi	r4,r4,19860
     764:	000238c0 	call	238c <puts>
     768:	00000106 	br	770 <main+0x368>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     76c:	0001883a 	nop



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     770:	00012600 	call	1260 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     774:	00000306 	br	784 <main+0x37c>
	{
		UsbSetAddress();
     778:	00012600 	call	1260 <UsbSetAddress>
		usleep(10*1000);
     77c:	0109c404 	movi	r4,10000
     780:	0002db40 	call	2db4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     784:	010000c4 	movi	r4,3
     788:	00003740 	call	374 <IO_read>
     78c:	10bfffcc 	andi	r2,r2,65535
     790:	1080040c 	andi	r2,r2,16
     794:	103ff826 	beq	r2,zero,778 <_gp+0xffff1ffc>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     798:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     79c:	01414184 	movi	r5,1286
     7a0:	01000084 	movi	r4,2
     7a4:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     7a8:	0009883a 	mov	r4,zero
     7ac:	00003740 	call	374 <IO_read>
     7b0:	10bfffcc 	andi	r2,r2,65535
     7b4:	100b883a 	mov	r5,r2
     7b8:	01000034 	movhi	r4,0
     7bc:	21136c04 	addi	r4,r4,19888
     7c0:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     7c4:	01414204 	movi	r5,1288
     7c8:	01000084 	movi	r4,2
     7cc:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     7d0:	0009883a 	mov	r4,zero
     7d4:	00003740 	call	374 <IO_read>
     7d8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     7dc:	e0bffb0b 	ldhu	r2,-20(fp)
     7e0:	100b883a 	mov	r5,r2
     7e4:	01000034 	movhi	r4,0
     7e8:	21137704 	addi	r4,r4,19932
     7ec:	00022c00 	call	22c0 <printf>
//		usb_ctl_val = UsbGetRetryCnt();
//
//		goto USB_HOT_PLUG;
//	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     7f0:	01000034 	movhi	r4,0
     7f4:	21138304 	addi	r4,r4,19980
     7f8:	000238c0 	call	238c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     7fc:	00013600 	call	1360 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     800:	00000306 	br	810 <main+0x408>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     804:	00013600 	call	1360 <UsbGetDeviceDesc1>
		usleep(10*1000);
     808:	0109c404 	movi	r4,10000
     80c:	0002db40 	call	2db4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     810:	010000c4 	movi	r4,3
     814:	00003740 	call	374 <IO_read>
     818:	10bfffcc 	andi	r2,r2,65535
     81c:	1080040c 	andi	r2,r2,16
     820:	103ff826 	beq	r2,zero,804 <_gp+0xffff2088>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     824:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     828:	01414184 	movi	r5,1286
     82c:	01000084 	movi	r4,2
     830:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     834:	0009883a 	mov	r4,zero
     838:	00003740 	call	374 <IO_read>
     83c:	10bfffcc 	andi	r2,r2,65535
     840:	100b883a 	mov	r5,r2
     844:	01000034 	movhi	r4,0
     848:	21139204 	addi	r4,r4,20040
     84c:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     850:	01414204 	movi	r5,1288
     854:	01000084 	movi	r4,2
     858:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     85c:	0009883a 	mov	r4,zero
     860:	00003740 	call	374 <IO_read>
     864:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     868:	e0bffb0b 	ldhu	r2,-20(fp)
     86c:	100b883a 	mov	r5,r2
     870:	01000034 	movhi	r4,0
     874:	21139d04 	addi	r4,r4,20084
     878:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     87c:	00000206 	br	888 <main+0x480>
	{
		usb_ctl_val = UsbGetRetryCnt();
     880:	00021840 	call	2184 <UsbGetRetryCnt>
     884:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     888:	e0bffb0b 	ldhu	r2,-20(fp)
     88c:	108000d8 	cmpnei	r2,r2,3
     890:	103ffb1e 	bne	r2,zero,880 <_gp+0xffff2104>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     894:	01000034 	movhi	r4,0
     898:	2113a904 	addi	r4,r4,20132
     89c:	000238c0 	call	238c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     8a0:	00014a80 	call	14a8 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8a4:	00000306 	br	8b4 <main+0x4ac>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     8a8:	00014a80 	call	14a8 <UsbGetDeviceDesc2>
		usleep(10*1000);
     8ac:	0109c404 	movi	r4,10000
     8b0:	0002db40 	call	2db4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8b4:	010000c4 	movi	r4,3
     8b8:	00003740 	call	374 <IO_read>
     8bc:	10bfffcc 	andi	r2,r2,65535
     8c0:	1080040c 	andi	r2,r2,16
     8c4:	103ff826 	beq	r2,zero,8a8 <_gp+0xffff212c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     8c8:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     8cc:	01414184 	movi	r5,1286
     8d0:	01000084 	movi	r4,2
     8d4:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     8d8:	0009883a 	mov	r4,zero
     8dc:	00003740 	call	374 <IO_read>
     8e0:	10bfffcc 	andi	r2,r2,65535
     8e4:	100b883a 	mov	r5,r2
     8e8:	01000034 	movhi	r4,0
     8ec:	21139204 	addi	r4,r4,20040
     8f0:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     8f4:	01414204 	movi	r5,1288
     8f8:	01000084 	movi	r4,2
     8fc:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     900:	0009883a 	mov	r4,zero
     904:	00003740 	call	374 <IO_read>
     908:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     90c:	e0bffb0b 	ldhu	r2,-20(fp)
     910:	100b883a 	mov	r5,r2
     914:	01000034 	movhi	r4,0
     918:	21139d04 	addi	r4,r4,20084
     91c:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     920:	00000206 	br	92c <main+0x524>
	{
		usb_ctl_val = UsbGetRetryCnt();
     924:	00021840 	call	2184 <UsbGetRetryCnt>
     928:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     92c:	e0bffb0b 	ldhu	r2,-20(fp)
     930:	108000d8 	cmpnei	r2,r2,3
     934:	103ffb1e 	bne	r2,zero,924 <_gp+0xffff21a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     938:	01000034 	movhi	r4,0
     93c:	2113bd04 	addi	r4,r4,20212
     940:	000238c0 	call	238c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     944:	00016800 	call	1680 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     948:	00000306 	br	958 <main+0x550>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     94c:	00016800 	call	1680 <UsbGetConfigDesc1>
		usleep(10*1000);
     950:	0109c404 	movi	r4,10000
     954:	0002db40 	call	2db4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     958:	010000c4 	movi	r4,3
     95c:	00003740 	call	374 <IO_read>
     960:	10bfffcc 	andi	r2,r2,65535
     964:	1080040c 	andi	r2,r2,16
     968:	103ff826 	beq	r2,zero,94c <_gp+0xffff21d0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     96c:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     970:	01414184 	movi	r5,1286
     974:	01000084 	movi	r4,2
     978:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     97c:	0009883a 	mov	r4,zero
     980:	00003740 	call	374 <IO_read>
     984:	10bfffcc 	andi	r2,r2,65535
     988:	100b883a 	mov	r5,r2
     98c:	01000034 	movhi	r4,0
     990:	2113cf04 	addi	r4,r4,20284
     994:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     998:	01414204 	movi	r5,1288
     99c:	01000084 	movi	r4,2
     9a0:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9a4:	0009883a 	mov	r4,zero
     9a8:	00003740 	call	374 <IO_read>
     9ac:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     9b0:	e0bffb0b 	ldhu	r2,-20(fp)
     9b4:	100b883a 	mov	r5,r2
     9b8:	01000034 	movhi	r4,0
     9bc:	2113da04 	addi	r4,r4,20328
     9c0:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     9c4:	00000206 	br	9d0 <main+0x5c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     9c8:	00021840 	call	2184 <UsbGetRetryCnt>
     9cc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     9d0:	e0bffb0b 	ldhu	r2,-20(fp)
     9d4:	108000d8 	cmpnei	r2,r2,3
     9d8:	103ffb1e 	bne	r2,zero,9c8 <_gp+0xffff224c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     9dc:	01000034 	movhi	r4,0
     9e0:	2113e604 	addi	r4,r4,20376
     9e4:	000238c0 	call	238c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     9e8:	00018100 	call	1810 <UsbGetConfigDesc2>

	usleep(100*1000);
     9ec:	010000b4 	movhi	r4,2
     9f0:	2121a804 	addi	r4,r4,-31072
     9f4:	0002db40 	call	2db4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9f8:	00000306 	br	a08 <main+0x600>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     9fc:	00018100 	call	1810 <UsbGetConfigDesc2>
		usleep(10*1000);
     a00:	0109c404 	movi	r4,10000
     a04:	0002db40 	call	2db4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a08:	010000c4 	movi	r4,3
     a0c:	00003740 	call	374 <IO_read>
     a10:	10bfffcc 	andi	r2,r2,65535
     a14:	1080040c 	andi	r2,r2,16
     a18:	103ff826 	beq	r2,zero,9fc <_gp+0xffff2280>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a1c:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a20:	01414184 	movi	r5,1286
     a24:	01000084 	movi	r4,2
     a28:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a2c:	0009883a 	mov	r4,zero
     a30:	00003740 	call	374 <IO_read>
     a34:	10bfffcc 	andi	r2,r2,65535
     a38:	100b883a 	mov	r5,r2
     a3c:	01000034 	movhi	r4,0
     a40:	2113f904 	addi	r4,r4,20452
     a44:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     a48:	01414204 	movi	r5,1288
     a4c:	01000084 	movi	r4,2
     a50:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a54:	0009883a 	mov	r4,zero
     a58:	00003740 	call	374 <IO_read>
     a5c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     a60:	e0bffb0b 	ldhu	r2,-20(fp)
     a64:	100b883a 	mov	r5,r2
     a68:	01000034 	movhi	r4,0
     a6c:	21140404 	addi	r4,r4,20496
     a70:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     a74:	00000206 	br	a80 <main+0x678>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a78:	00021840 	call	2184 <UsbGetRetryCnt>
     a7c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     a80:	e0bffb0b 	ldhu	r2,-20(fp)
     a84:	108000d8 	cmpnei	r2,r2,3
     a88:	103ffb1e 	bne	r2,zero,a78 <_gp+0xffff22fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     a8c:	01000034 	movhi	r4,0
     a90:	21141004 	addi	r4,r4,20544
     a94:	000238c0 	call	238c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     a98:	01415b04 	movi	r5,1388
     a9c:	01000084 	movi	r4,2
     aa0:	00002f40 	call	2f4 <IO_write>
	code = IO_read(HPI_DATA);
     aa4:	0009883a 	mov	r4,zero
     aa8:	00003740 	call	374 <IO_read>
     aac:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
     ab0:	e0bffe8b 	ldhu	r2,-6(fp)
     ab4:	108000cc 	andi	r2,r2,3
     ab8:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
     abc:	e0bffe8b 	ldhu	r2,-6(fp)
     ac0:	100b883a 	mov	r5,r2
     ac4:	01000034 	movhi	r4,0
     ac8:	21142304 	addi	r4,r4,20620
     acc:	00022c00 	call	22c0 <printf>

	if (code == 0x01)
     ad0:	e0bffe8b 	ldhu	r2,-6(fp)
     ad4:	10800058 	cmpnei	r2,r2,1
     ad8:	1000041e 	bne	r2,zero,aec <main+0x6e4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     adc:	01000034 	movhi	r4,0
     ae0:	21142604 	addi	r4,r4,20632
     ae4:	000238c0 	call	238c <puts>
     ae8:	00000306 	br	af8 <main+0x6f0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     aec:	01000034 	movhi	r4,0
     af0:	21143504 	addi	r4,r4,20692
     af4:	000238c0 	call	238c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     af8:	01415d84 	movi	r5,1398
     afc:	01000084 	movi	r4,2
     b00:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
     b04:	0141cfc4 	movi	r5,1855
     b08:	0009883a 	mov	r4,zero
     b0c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
     b10:	01604154 	movui	r5,33029
     b14:	0009883a 	mov	r4,zero
     b18:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
     b1c:	014000c4 	movi	r5,3
     b20:	0009883a 	mov	r4,zero
     b24:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
     b28:	01400204 	movi	r5,8
     b2c:	0009883a 	mov	r4,zero
     b30:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     b34:	016b0294 	movui	r5,44042
     b38:	0009883a 	mov	r4,zero
     b3c:	00002f40 	call	2f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     b40:	01415d84 	movi	r5,1398
     b44:	01006c04 	movi	r4,432
     b48:	00011080 	call	1108 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     b4c:	01415f04 	movi	r5,1404
     b50:	01000084 	movi	r4,2
     b54:	00002f40 	call	2f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     b58:	0009883a 	mov	r4,zero
     b5c:	00003740 	call	374 <IO_read>
     b60:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     b64:	e0bfff03 	ldbu	r2,-4(fp)
     b68:	100b883a 	mov	r5,r2
     b6c:	01000034 	movhi	r4,0
     b70:	21143e04 	addi	r4,r4,20728
     b74:	00022c00 	call	22c0 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     b78:	0001a780 	call	1a78 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b7c:	00000306 	br	b8c <main+0x784>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     b80:	0001a780 	call	1a78 <UsbSetConfig>
		usleep(10*1000);
     b84:	0109c404 	movi	r4,10000
     b88:	0002db40 	call	2db4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b8c:	010000c4 	movi	r4,3
     b90:	00003740 	call	374 <IO_read>
     b94:	10bfffcc 	andi	r2,r2,65535
     b98:	1080040c 	andi	r2,r2,16
     b9c:	103ff826 	beq	r2,zero,b80 <_gp+0xffff2404>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ba0:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ba4:	01414184 	movi	r5,1286
     ba8:	01000084 	movi	r4,2
     bac:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bb0:	0009883a 	mov	r4,zero
     bb4:	00003740 	call	374 <IO_read>
     bb8:	10bfffcc 	andi	r2,r2,65535
     bbc:	100b883a 	mov	r5,r2
     bc0:	01000034 	movhi	r4,0
     bc4:	21144804 	addi	r4,r4,20768
     bc8:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     bcc:	01414204 	movi	r5,1288
     bd0:	01000084 	movi	r4,2
     bd4:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bd8:	0009883a 	mov	r4,zero
     bdc:	00003740 	call	374 <IO_read>
     be0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     be4:	e0bffb0b 	ldhu	r2,-20(fp)
     be8:	100b883a 	mov	r5,r2
     bec:	01000034 	movhi	r4,0
     bf0:	21145304 	addi	r4,r4,20812
     bf4:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     bf8:	00000206 	br	c04 <main+0x7fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     bfc:	00021840 	call	2184 <UsbGetRetryCnt>
     c00:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c04:	e0bffb0b 	ldhu	r2,-20(fp)
     c08:	108000d8 	cmpnei	r2,r2,3
     c0c:	103ffb1e 	bne	r2,zero,bfc <_gp+0xffff2480>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     c10:	01000034 	movhi	r4,0
     c14:	21145f04 	addi	r4,r4,20860
     c18:	000238c0 	call	238c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     c1c:	0001b780 	call	1b78 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c20:	00000306 	br	c30 <main+0x828>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     c24:	0001b780 	call	1b78 <UsbClassRequest>
		usleep(10*1000);
     c28:	0109c404 	movi	r4,10000
     c2c:	0002db40 	call	2db4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c30:	010000c4 	movi	r4,3
     c34:	00003740 	call	374 <IO_read>
     c38:	10bfffcc 	andi	r2,r2,65535
     c3c:	1080040c 	andi	r2,r2,16
     c40:	103ff826 	beq	r2,zero,c24 <_gp+0xffff24a8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c44:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c48:	01414184 	movi	r5,1286
     c4c:	01000084 	movi	r4,2
     c50:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c54:	0009883a 	mov	r4,zero
     c58:	00003740 	call	374 <IO_read>
     c5c:	10bfffcc 	andi	r2,r2,65535
     c60:	100b883a 	mov	r5,r2
     c64:	01000034 	movhi	r4,0
     c68:	21147104 	addi	r4,r4,20932
     c6c:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     c70:	01414204 	movi	r5,1288
     c74:	01000084 	movi	r4,2
     c78:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c7c:	0009883a 	mov	r4,zero
     c80:	00003740 	call	374 <IO_read>
     c84:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     c88:	e0bffb0b 	ldhu	r2,-20(fp)
     c8c:	100b883a 	mov	r5,r2
     c90:	01000034 	movhi	r4,0
     c94:	21147c04 	addi	r4,r4,20976
     c98:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     c9c:	00000206 	br	ca8 <main+0x8a0>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ca0:	00021840 	call	2184 <UsbGetRetryCnt>
     ca4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     ca8:	e0bffb0b 	ldhu	r2,-20(fp)
     cac:	108000d8 	cmpnei	r2,r2,3
     cb0:	103ffb1e 	bne	r2,zero,ca0 <_gp+0xffff2524>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     cb4:	01000034 	movhi	r4,0
     cb8:	21148804 	addi	r4,r4,21024
     cbc:	000238c0 	call	238c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     cc0:	0001c780 	call	1c78 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     cc4:	00000306 	br	cd4 <main+0x8cc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     cc8:	0001c780 	call	1c78 <UsbGetHidDesc>
		usleep(10*1000);
     ccc:	0109c404 	movi	r4,10000
     cd0:	0002db40 	call	2db4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     cd4:	010000c4 	movi	r4,3
     cd8:	00003740 	call	374 <IO_read>
     cdc:	10bfffcc 	andi	r2,r2,65535
     ce0:	1080040c 	andi	r2,r2,16
     ce4:	103ff826 	beq	r2,zero,cc8 <_gp+0xffff254c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ce8:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     cec:	01414184 	movi	r5,1286
     cf0:	01000084 	movi	r4,2
     cf4:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cf8:	0009883a 	mov	r4,zero
     cfc:	00003740 	call	374 <IO_read>
     d00:	10bfffcc 	andi	r2,r2,65535
     d04:	100b883a 	mov	r5,r2
     d08:	01000034 	movhi	r4,0
     d0c:	21147104 	addi	r4,r4,20932
     d10:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     d14:	01414204 	movi	r5,1288
     d18:	01000084 	movi	r4,2
     d1c:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d20:	0009883a 	mov	r4,zero
     d24:	00003740 	call	374 <IO_read>
     d28:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     d2c:	e0bffb0b 	ldhu	r2,-20(fp)
     d30:	100b883a 	mov	r5,r2
     d34:	01000034 	movhi	r4,0
     d38:	21147c04 	addi	r4,r4,20976
     d3c:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     d40:	00000206 	br	d4c <main+0x944>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d44:	00021840 	call	2184 <UsbGetRetryCnt>
     d48:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     d4c:	e0bffb0b 	ldhu	r2,-20(fp)
     d50:	108000d8 	cmpnei	r2,r2,3
     d54:	103ffb1e 	bne	r2,zero,d44 <_gp+0xffff25c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     d58:	01000034 	movhi	r4,0
     d5c:	21149a04 	addi	r4,r4,21096
     d60:	000238c0 	call	238c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     d64:	0001dc00 	call	1dc0 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d68:	00000306 	br	d78 <main+0x970>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     d6c:	0001dc00 	call	1dc0 <UsbGetReportDesc>
		usleep(10*1000);
     d70:	0109c404 	movi	r4,10000
     d74:	0002db40 	call	2db4 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d78:	010000c4 	movi	r4,3
     d7c:	00003740 	call	374 <IO_read>
     d80:	10bfffcc 	andi	r2,r2,65535
     d84:	1080040c 	andi	r2,r2,16
     d88:	103ff826 	beq	r2,zero,d6c <_gp+0xffff25f0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d8c:	00021000 	call	2100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d90:	01414184 	movi	r5,1286
     d94:	01000084 	movi	r4,2
     d98:	00002f40 	call	2f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d9c:	0009883a 	mov	r4,zero
     da0:	00003740 	call	374 <IO_read>
     da4:	10bfffcc 	andi	r2,r2,65535
     da8:	100b883a 	mov	r5,r2
     dac:	01000034 	movhi	r4,0
     db0:	2114ae04 	addi	r4,r4,21176
     db4:	00022c00 	call	22c0 <printf>

	IO_write(HPI_ADDR,0x0508);
     db8:	01414204 	movi	r5,1288
     dbc:	01000084 	movi	r4,2
     dc0:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     dc4:	0009883a 	mov	r4,zero
     dc8:	00003740 	call	374 <IO_read>
     dcc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
     dd0:	e0bffb0b 	ldhu	r2,-20(fp)
     dd4:	100b883a 	mov	r5,r2
     dd8:	01000034 	movhi	r4,0
     ddc:	2114ba04 	addi	r4,r4,21224
     de0:	00022c00 	call	22c0 <printf>
	while (usb_ctl_val != 0x03)
     de4:	00000206 	br	df0 <main+0x9e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     de8:	00021840 	call	2184 <UsbGetRetryCnt>
     dec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     df0:	e0bffb0b 	ldhu	r2,-20(fp)
     df4:	108000d8 	cmpnei	r2,r2,3
     df8:	103ffb1e 	bne	r2,zero,de8 <_gp+0xffff266c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
     dfc:	01000034 	movhi	r4,0
     e00:	2114c604 	addi	r4,r4,21272
     e04:	000238c0 	call	238c <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
     e08:	0109c404 	movi	r4,10000
     e0c:	0002db40 	call	2db4 <usleep>
	while(1)
	{
		toggle++;
     e10:	e0bffb83 	ldbu	r2,-18(fp)
     e14:	10800044 	addi	r2,r2,1
     e18:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
     e1c:	01414004 	movi	r5,1280
     e20:	01000084 	movi	r4,2
     e24:	00002f40 	call	2f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     e28:	01414704 	movi	r5,1308
     e2c:	0009883a 	mov	r4,zero
     e30:	00002f40 	call	2f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     e34:	e0bfff03 	ldbu	r2,-4(fp)
     e38:	108003cc 	andi	r2,r2,15
     e3c:	100b883a 	mov	r5,r2
     e40:	0009883a 	mov	r4,zero
     e44:	00002f40 	call	2f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     e48:	0140a444 	movi	r5,657
     e4c:	0009883a 	mov	r4,zero
     e50:	00002f40 	call	2f4 <IO_write>
		if(toggle%2)
     e54:	e0bffb83 	ldbu	r2,-18(fp)
     e58:	1080004c 	andi	r2,r2,1
     e5c:	10803fcc 	andi	r2,r2,255
     e60:	10000426 	beq	r2,zero,e74 <main+0xa6c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     e64:	01400044 	movi	r5,1
     e68:	0009883a 	mov	r4,zero
     e6c:	00002f40 	call	2f4 <IO_write>
     e70:	00000306 	br	e80 <main+0xa78>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     e74:	01401044 	movi	r5,65
     e78:	0009883a 	mov	r4,zero
     e7c:	00002f40 	call	2f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     e80:	014004c4 	movi	r5,19
     e84:	0009883a 	mov	r4,zero
     e88:	00002f40 	call	2f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
     e8c:	000b883a 	mov	r5,zero
     e90:	0009883a 	mov	r4,zero
     e94:	00002f40 	call	2f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     e98:	01414004 	movi	r5,1280
     e9c:	01006c04 	movi	r4,432
     ea0:	00011080 	call	1108 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	00002406 	br	f38 <main+0xb30>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
     ea8:	01414004 	movi	r5,1280
     eac:	01000084 	movi	r4,2
     eb0:	00002f40 	call	2f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
     eb4:	01414704 	movi	r5,1308
     eb8:	0009883a 	mov	r4,zero
     ebc:	00002f40 	call	2f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
     ec0:	e0bfff03 	ldbu	r2,-4(fp)
     ec4:	108003cc 	andi	r2,r2,15
     ec8:	100b883a 	mov	r5,r2
     ecc:	0009883a 	mov	r4,zero
     ed0:	00002f40 	call	2f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     ed4:	0140a444 	movi	r5,657
     ed8:	0009883a 	mov	r4,zero
     edc:	00002f40 	call	2f4 <IO_write>
			if(toggle%2)
     ee0:	e0bffb83 	ldbu	r2,-18(fp)
     ee4:	1080004c 	andi	r2,r2,1
     ee8:	10803fcc 	andi	r2,r2,255
     eec:	10000426 	beq	r2,zero,f00 <main+0xaf8>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
     ef0:	01400044 	movi	r5,1
     ef4:	0009883a 	mov	r4,zero
     ef8:	00002f40 	call	2f4 <IO_write>
     efc:	00000306 	br	f0c <main+0xb04>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
     f00:	01401044 	movi	r5,65
     f04:	0009883a 	mov	r4,zero
     f08:	00002f40 	call	2f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
     f0c:	014004c4 	movi	r5,19
     f10:	0009883a 	mov	r4,zero
     f14:	00002f40 	call	2f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
     f18:	000b883a 	mov	r5,zero
     f1c:	0009883a 	mov	r4,zero
     f20:	00002f40 	call	2f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     f24:	01414004 	movi	r5,1280
     f28:	01006c04 	movi	r4,432
     f2c:	00011080 	call	1108 <UsbWrite>
			usleep(10*1000);
     f30:	0109c404 	movi	r4,10000
     f34:	0002db40 	call	2db4 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f38:	010000c4 	movi	r4,3
     f3c:	00003740 	call	374 <IO_read>
     f40:	10bfffcc 	andi	r2,r2,65535
     f44:	1080040c 	andi	r2,r2,16
     f48:	103fd726 	beq	r2,zero,ea8 <_gp+0xffff272c>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
     f4c:	00021000 	call	2100 <UsbWaitTDListDone>
     f50:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
     f54:	01014784 	movi	r4,1310
     f58:	00011600 	call	1160 <UsbRead>
     f5c:	10bfffcc 	andi	r2,r2,65535
     f60:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
     f64:	e17ffd17 	ldw	r5,-12(fp)
     f68:	01000034 	movhi	r4,0
     f6c:	2114da04 	addi	r4,r4,21352
     f70:	00022c00 	call	22c0 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff;
     f74:	00a41814 	movui	r2,36960
     f78:	e0fffd17 	ldw	r3,-12(fp)
     f7c:	10c00005 	stb	r3,0(r2)
		if ((keycode & 0xff) == 0x20) {
     f80:	e0bffd17 	ldw	r2,-12(fp)
     f84:	10803fcc 	andi	r2,r2,255
     f88:	10800818 	cmpnei	r2,r2,32
     f8c:	1000031e 	bne	r2,zero,f9c <main+0xb94>
			Keycode_mem_base[0] = 0x00;
     f90:	d0a00017 	ldw	r2,-32768(gp)
     f94:	10000005 	stb	zero,0(r2)
     f98:	00000306 	br	fa8 <main+0xba0>
		}
		else {
			Keycode_mem_base[0] = keycode & 0xff;
     f9c:	d0a00017 	ldw	r2,-32768(gp)
     fa0:	e0fffd17 	ldw	r3,-12(fp)
     fa4:	10c00005 	stb	r3,0(r2)
		}
		printf("key is : %x\n", Keycode_mem_base[0]);
     fa8:	d0a00017 	ldw	r2,-32768(gp)
     fac:	10800003 	ldbu	r2,0(r2)
     fb0:	10803fcc 	andi	r2,r2,255
     fb4:	100b883a 	mov	r5,r2
     fb8:	01000034 	movhi	r4,0
     fbc:	2114e304 	addi	r4,r4,21388
     fc0:	00022c00 	call	22c0 <printf>

		usleep(200);//usleep(5000);
     fc4:	01003204 	movi	r4,200
     fc8:	0002db40 	call	2db4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     fcc:	d0a4d20b 	ldhu	r2,-27832(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	1009883a 	mov	r4,r2
     fd8:	00011600 	call	1160 <UsbRead>
     fdc:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
     fe0:	d0a4d28b 	ldhu	r2,-27830(gp)
     fe4:	e0fffb0b 	ldhu	r3,-20(fp)
     fe8:	1884703a 	and	r2,r3,r2
     fec:	10bfffcc 	andi	r2,r2,65535
     ff0:	10003f1e 	bne	r2,zero,10f0 <main+0xce8>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     ff4:	e03ffbc5 	stb	zero,-17(fp)
     ff8:	00000f06 	br	1038 <main+0xc30>
			{
				usleep(5*1000);
     ffc:	0104e204 	movi	r4,5000
    1000:	0002db40 	call	2db4 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
    1004:	d0a4d20b 	ldhu	r2,-27832(gp)
    1008:	10bfffcc 	andi	r2,r2,65535
    100c:	1009883a 	mov	r4,r2
    1010:	00011600 	call	1160 <UsbRead>
    1014:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
    1018:	d0a4d28b 	ldhu	r2,-27830(gp)
    101c:	e0fffb0b 	ldhu	r3,-20(fp)
    1020:	1884703a 	and	r2,r3,r2
    1024:	10bfffcc 	andi	r2,r2,65535
    1028:	1000071e 	bne	r2,zero,1048 <main+0xc40>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    102c:	e0bffbc3 	ldbu	r2,-17(fp)
    1030:	10800044 	addi	r2,r2,1
    1034:	e0bffbc5 	stb	r2,-17(fp)
    1038:	e0bffbc3 	ldbu	r2,-17(fp)
    103c:	108001f0 	cmpltui	r2,r2,7
    1040:	103fee1e 	bne	r2,zero,ffc <_gp+0xffff2880>
    1044:	00000106 	br	104c <main+0xc44>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
    1048:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
    104c:	d0a4d28b 	ldhu	r2,-27830(gp)
    1050:	e0fffb0b 	ldhu	r3,-20(fp)
    1054:	1884703a 	and	r2,r3,r2
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	1000241e 	bne	r2,zero,10f0 <main+0xce8>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
    1060:	01000034 	movhi	r4,0
    1064:	2114e704 	addi	r4,r4,21404
    1068:	000238c0 	call	238c <puts>
				printf("[INFO]: please insert again!!! \n");
    106c:	01000034 	movhi	r4,0
    1070:	2114f204 	addi	r4,r4,21448
    1074:	000238c0 	call	238c <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
    1078:	00001d06 	br	10f0 <main+0xce8>
		{

			usb_ctl_val = UsbRead(ctl_reg);
    107c:	d0a4d20b 	ldhu	r2,-27832(gp)
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1009883a 	mov	r4,r2
    1088:	00011600 	call	1160 <UsbRead>
    108c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    1090:	0104e204 	movi	r4,5000
    1094:	0002db40 	call	2db4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    1098:	d0a4d20b 	ldhu	r2,-27832(gp)
    109c:	10bfffcc 	andi	r2,r2,65535
    10a0:	1009883a 	mov	r4,r2
    10a4:	00011600 	call	1160 <UsbRead>
    10a8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    10ac:	0104e204 	movi	r4,5000
    10b0:	0002db40 	call	2db4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    10b4:	d0a4d20b 	ldhu	r2,-27832(gp)
    10b8:	10bfffcc 	andi	r2,r2,65535
    10bc:	1009883a 	mov	r4,r2
    10c0:	00011600 	call	1160 <UsbRead>
    10c4:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    10c8:	0104e204 	movi	r4,5000
    10cc:	0002db40 	call	2db4 <usleep>

			if(usb_ctl_val & no_device)
    10d0:	d0a4d28b 	ldhu	r2,-27830(gp)
    10d4:	e0fffb0b 	ldhu	r3,-20(fp)
    10d8:	1884703a 	and	r2,r3,r2
    10dc:	10bfffcc 	andi	r2,r2,65535
    10e0:	10000126 	beq	r2,zero,10e8 <main+0xce0>
				goto USB_HOT_PLUG;
    10e4:	003cd506 	br	43c <_gp+0xffff1cc0>

			usleep(200);
    10e8:	01003204 	movi	r4,200
    10ec:	0002db40 	call	2db4 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
    10f0:	d0a4d28b 	ldhu	r2,-27830(gp)
    10f4:	e0fffb0b 	ldhu	r3,-20(fp)
    10f8:	1884703a 	and	r2,r3,r2
    10fc:	10bfffcc 	andi	r2,r2,65535
    1100:	103fde26 	beq	r2,zero,107c <_gp+0xffff2900>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
    1104:	003f4206 	br	e10 <_gp+0xffff2694>

00001108 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1108:	defffc04 	addi	sp,sp,-16
    110c:	dfc00315 	stw	ra,12(sp)
    1110:	df000215 	stw	fp,8(sp)
    1114:	df000204 	addi	fp,sp,8
    1118:	2007883a 	mov	r3,r4
    111c:	2805883a 	mov	r2,r5
    1120:	e0fffe0d 	sth	r3,-8(fp)
    1124:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
    1128:	e0bffe0b 	ldhu	r2,-8(fp)
    112c:	100b883a 	mov	r5,r2
    1130:	01000084 	movi	r4,2
    1134:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA, Data);
    1138:	e0bfff0b 	ldhu	r2,-4(fp)
    113c:	100b883a 	mov	r5,r2
    1140:	0009883a 	mov	r4,zero
    1144:	00002f40 	call	2f4 <IO_write>
}
    1148:	0001883a 	nop
    114c:	e037883a 	mov	sp,fp
    1150:	dfc00117 	ldw	ra,4(sp)
    1154:	df000017 	ldw	fp,0(sp)
    1158:	dec00204 	addi	sp,sp,8
    115c:	f800283a 	ret

00001160 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1160:	defffd04 	addi	sp,sp,-12
    1164:	dfc00215 	stw	ra,8(sp)
    1168:	df000115 	stw	fp,4(sp)
    116c:	df000104 	addi	fp,sp,4
    1170:	2005883a 	mov	r2,r4
    1174:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
    1178:	e0bfff0b 	ldhu	r2,-4(fp)
    117c:	100b883a 	mov	r5,r2
    1180:	01000084 	movi	r4,2
    1184:	00002f40 	call	2f4 <IO_write>
	return IO_read (Address);
    1188:	e0bfff0b 	ldhu	r2,-4(fp)
    118c:	10803fcc 	andi	r2,r2,255
    1190:	1009883a 	mov	r4,r2
    1194:	00003740 	call	374 <IO_read>
}
    1198:	e037883a 	mov	sp,fp
    119c:	dfc00117 	ldw	ra,4(sp)
    11a0:	df000017 	ldw	fp,0(sp)
    11a4:	dec00204 	addi	sp,sp,8
    11a8:	f800283a 	ret

000011ac <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    11ac:	defffe04 	addi	sp,sp,-8
    11b0:	dfc00115 	stw	ra,4(sp)
    11b4:	df000015 	stw	fp,0(sp)
    11b8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    11bc:	017e9414 	movui	r5,64080
    11c0:	01000044 	movi	r4,1
    11c4:	00002f40 	call	2f4 <IO_write>
	usleep(100000);
    11c8:	010000b4 	movhi	r4,2
    11cc:	2121a804 	addi	r4,r4,-31072
    11d0:	0002db40 	call	2db4 <usleep>
	printf("[USB INIT]:reset finished!\n");
    11d4:	01000034 	movhi	r4,0
    11d8:	2114fa04 	addi	r4,r4,21480
    11dc:	000238c0 	call	238c <puts>

	usleep(500000);
    11e0:	01000234 	movhi	r4,8
    11e4:	21284804 	addi	r4,r4,-24288
    11e8:	0002db40 	call	2db4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    11ec:	01000034 	movhi	r4,0
    11f0:	21150104 	addi	r4,r4,21508
    11f4:	000238c0 	call	238c <puts>
	IO_read(HPI_MAILBOX);
    11f8:	01000044 	movi	r4,1
    11fc:	00003740 	call	374 <IO_read>
	IO_read(HPI_STATUS);
    1200:	010000c4 	movi	r4,3
    1204:	00003740 	call	374 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1208:	01005104 	movi	r4,324
    120c:	00011600 	call	1160 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1210:	000b883a 	mov	r5,zero
    1214:	01005104 	movi	r4,324
    1218:	00011080 	call	1108 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    121c:	01005204 	movi	r4,328
    1220:	00011600 	call	1160 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1224:	000b883a 	mov	r5,zero
    1228:	01005204 	movi	r4,328
    122c:	00011080 	call	1108 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1230:	017fffd4 	movui	r5,65535
    1234:	01302414 	movui	r4,49296
    1238:	00011080 	call	1108 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    123c:	017fffd4 	movui	r5,65535
    1240:	01302c14 	movui	r4,49328
    1244:	00011080 	call	1108 <UsbWrite>
}
    1248:	0001883a 	nop
    124c:	e037883a 	mov	sp,fp
    1250:	dfc00117 	ldw	ra,4(sp)
    1254:	df000017 	ldw	fp,0(sp)
    1258:	dec00204 	addi	sp,sp,8
    125c:	f800283a 	ret

00001260 <UsbSetAddress>:


void UsbSetAddress()
{
    1260:	defffe04 	addi	sp,sp,-8
    1264:	dfc00115 	stw	ra,4(sp)
    1268:	df000015 	stw	fp,0(sp)
    126c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1270:	01414004 	movi	r5,1280
    1274:	01000084 	movi	r4,2
    1278:	00002f40 	call	2f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    127c:	01414304 	movi	r5,1292
    1280:	0009883a 	mov	r4,zero
    1284:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1288:	01400204 	movi	r5,8
    128c:	0009883a 	mov	r4,zero
    1290:	00002f40 	call	2f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1294:	01403404 	movi	r5,208
    1298:	0009883a 	mov	r4,zero
    129c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    12a0:	01400044 	movi	r5,1
    12a4:	0009883a 	mov	r4,zero
    12a8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    12ac:	014004c4 	movi	r5,19
    12b0:	0009883a 	mov	r4,zero
    12b4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    12b8:	01414504 	movi	r5,1300
    12bc:	0009883a 	mov	r4,zero
    12c0:	00002f40 	call	2f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    12c4:	01414004 	movi	r5,1280
    12c8:	0009883a 	mov	r4,zero
    12cc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
    12d0:	01400084 	movi	r5,2
    12d4:	0009883a 	mov	r4,zero
    12d8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    12dc:	000b883a 	mov	r5,zero
    12e0:	0009883a 	mov	r4,zero
    12e4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    12e8:	000b883a 	mov	r5,zero
    12ec:	0009883a 	mov	r4,zero
    12f0:	00002f40 	call	2f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    12f4:	000b883a 	mov	r5,zero
    12f8:	0009883a 	mov	r4,zero
    12fc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1300:	000b883a 	mov	r5,zero
    1304:	0009883a 	mov	r4,zero
    1308:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    130c:	01402404 	movi	r5,144
    1310:	0009883a 	mov	r4,zero
    1314:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1318:	01401044 	movi	r5,65
    131c:	0009883a 	mov	r4,zero
    1320:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1324:	014004c4 	movi	r5,19
    1328:	0009883a 	mov	r4,zero
    132c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1330:	000b883a 	mov	r5,zero
    1334:	0009883a 	mov	r4,zero
    1338:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    133c:	01414004 	movi	r5,1280
    1340:	01006c04 	movi	r4,432
    1344:	00011080 	call	1108 <UsbWrite>
}
    1348:	0001883a 	nop
    134c:	e037883a 	mov	sp,fp
    1350:	dfc00117 	ldw	ra,4(sp)
    1354:	df000017 	ldw	fp,0(sp)
    1358:	dec00204 	addi	sp,sp,8
    135c:	f800283a 	ret

00001360 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1360:	defffe04 	addi	sp,sp,-8
    1364:	dfc00115 	stw	ra,4(sp)
    1368:	df000015 	stw	fp,0(sp)
    136c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1370:	01414004 	movi	r5,1280
    1374:	01000084 	movi	r4,2
    1378:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    137c:	01414304 	movi	r5,1292
    1380:	0009883a 	mov	r4,zero
    1384:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1388:	01400204 	movi	r5,8
    138c:	0009883a 	mov	r4,zero
    1390:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1394:	0140b404 	movi	r5,720
    1398:	0009883a 	mov	r4,zero
    139c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    13a0:	01400044 	movi	r5,1
    13a4:	0009883a 	mov	r4,zero
    13a8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    13ac:	014004c4 	movi	r5,19
    13b0:	0009883a 	mov	r4,zero
    13b4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    13b8:	01414504 	movi	r5,1300
    13bc:	0009883a 	mov	r4,zero
    13c0:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    13c4:	0141a004 	movi	r5,1664
    13c8:	0009883a 	mov	r4,zero
    13cc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    13d0:	01404004 	movi	r5,256
    13d4:	0009883a 	mov	r4,zero
    13d8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    13dc:	000b883a 	mov	r5,zero
    13e0:	0009883a 	mov	r4,zero
    13e4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
    13e8:	01400204 	movi	r5,8
    13ec:	0009883a 	mov	r4,zero
    13f0:	00002f40 	call	2f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    13f4:	01414b04 	movi	r5,1324
    13f8:	0009883a 	mov	r4,zero
    13fc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1400:	01400204 	movi	r5,8
    1404:	0009883a 	mov	r4,zero
    1408:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    140c:	0140a404 	movi	r5,656
    1410:	0009883a 	mov	r4,zero
    1414:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1418:	01401044 	movi	r5,65
    141c:	0009883a 	mov	r4,zero
    1420:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1424:	014004c4 	movi	r5,19
    1428:	0009883a 	mov	r4,zero
    142c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1430:	01414804 	movi	r5,1312
    1434:	0009883a 	mov	r4,zero
    1438:	00002f40 	call	2f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    143c:	000b883a 	mov	r5,zero
    1440:	0009883a 	mov	r4,zero
    1444:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1448:	000b883a 	mov	r5,zero
    144c:	0009883a 	mov	r4,zero
    1450:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1454:	01408404 	movi	r5,528
    1458:	0009883a 	mov	r4,zero
    145c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1460:	01401044 	movi	r5,65
    1464:	0009883a 	mov	r4,zero
    1468:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    146c:	014004c4 	movi	r5,19
    1470:	0009883a 	mov	r4,zero
    1474:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1478:	000b883a 	mov	r5,zero
    147c:	0009883a 	mov	r4,zero
    1480:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1484:	01414004 	movi	r5,1280
    1488:	01006c04 	movi	r4,432
    148c:	00011080 	call	1108 <UsbWrite>
}
    1490:	0001883a 	nop
    1494:	e037883a 	mov	sp,fp
    1498:	dfc00117 	ldw	ra,4(sp)
    149c:	df000017 	ldw	fp,0(sp)
    14a0:	dec00204 	addi	sp,sp,8
    14a4:	f800283a 	ret

000014a8 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    14a8:	defffe04 	addi	sp,sp,-8
    14ac:	dfc00115 	stw	ra,4(sp)
    14b0:	df000015 	stw	fp,0(sp)
    14b4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    14b8:	01414004 	movi	r5,1280
    14bc:	01000084 	movi	r4,2
    14c0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    14c4:	01414304 	movi	r5,1292
    14c8:	0009883a 	mov	r4,zero
    14cc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    14d0:	01400204 	movi	r5,8
    14d4:	0009883a 	mov	r4,zero
    14d8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    14dc:	0140b404 	movi	r5,720
    14e0:	0009883a 	mov	r4,zero
    14e4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    14e8:	01400044 	movi	r5,1
    14ec:	0009883a 	mov	r4,zero
    14f0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    14f4:	014004c4 	movi	r5,19
    14f8:	0009883a 	mov	r4,zero
    14fc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1500:	01414504 	movi	r5,1300
    1504:	0009883a 	mov	r4,zero
    1508:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    150c:	0141a004 	movi	r5,1664
    1510:	0009883a 	mov	r4,zero
    1514:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1518:	01404004 	movi	r5,256
    151c:	0009883a 	mov	r4,zero
    1520:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1524:	000b883a 	mov	r5,zero
    1528:	0009883a 	mov	r4,zero
    152c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1530:	01400484 	movi	r5,18
    1534:	0009883a 	mov	r4,zero
    1538:	00002f40 	call	2f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    153c:	01415104 	movi	r5,1348
    1540:	0009883a 	mov	r4,zero
    1544:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1548:	01400204 	movi	r5,8
    154c:	0009883a 	mov	r4,zero
    1550:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1554:	0140a404 	movi	r5,656
    1558:	0009883a 	mov	r4,zero
    155c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1560:	01401044 	movi	r5,65
    1564:	0009883a 	mov	r4,zero
    1568:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    156c:	014004c4 	movi	r5,19
    1570:	0009883a 	mov	r4,zero
    1574:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1578:	01414804 	movi	r5,1312
    157c:	0009883a 	mov	r4,zero
    1580:	00002f40 	call	2f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1584:	01415304 	movi	r5,1356
    1588:	0009883a 	mov	r4,zero
    158c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1590:	01400204 	movi	r5,8
    1594:	0009883a 	mov	r4,zero
    1598:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    159c:	0140a404 	movi	r5,656
    15a0:	0009883a 	mov	r4,zero
    15a4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    15a8:	01400044 	movi	r5,1
    15ac:	0009883a 	mov	r4,zero
    15b0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    15b4:	014004c4 	movi	r5,19
    15b8:	0009883a 	mov	r4,zero
    15bc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    15c0:	01414b04 	movi	r5,1324
    15c4:	0009883a 	mov	r4,zero
    15c8:	00002f40 	call	2f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    15cc:	01415504 	movi	r5,1364
    15d0:	0009883a 	mov	r4,zero
    15d4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    15d8:	01400084 	movi	r5,2
    15dc:	0009883a 	mov	r4,zero
    15e0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    15e4:	0140a404 	movi	r5,656
    15e8:	0009883a 	mov	r4,zero
    15ec:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    15f0:	01401044 	movi	r5,65
    15f4:	0009883a 	mov	r4,zero
    15f8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    15fc:	014004c4 	movi	r5,19
    1600:	0009883a 	mov	r4,zero
    1604:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1608:	01414e04 	movi	r5,1336
    160c:	0009883a 	mov	r4,zero
    1610:	00002f40 	call	2f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1614:	000b883a 	mov	r5,zero
    1618:	0009883a 	mov	r4,zero
    161c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1620:	000b883a 	mov	r5,zero
    1624:	0009883a 	mov	r4,zero
    1628:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    162c:	01408404 	movi	r5,528
    1630:	0009883a 	mov	r4,zero
    1634:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1638:	01401044 	movi	r5,65
    163c:	0009883a 	mov	r4,zero
    1640:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1644:	014004c4 	movi	r5,19
    1648:	0009883a 	mov	r4,zero
    164c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1650:	000b883a 	mov	r5,zero
    1654:	0009883a 	mov	r4,zero
    1658:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    165c:	01414004 	movi	r5,1280
    1660:	01006c04 	movi	r4,432
    1664:	00011080 	call	1108 <UsbWrite>
}
    1668:	0001883a 	nop
    166c:	e037883a 	mov	sp,fp
    1670:	dfc00117 	ldw	ra,4(sp)
    1674:	df000017 	ldw	fp,0(sp)
    1678:	dec00204 	addi	sp,sp,8
    167c:	f800283a 	ret

00001680 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1680:	defffe04 	addi	sp,sp,-8
    1684:	dfc00115 	stw	ra,4(sp)
    1688:	df000015 	stw	fp,0(sp)
    168c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1690:	01414004 	movi	r5,1280
    1694:	01000084 	movi	r4,2
    1698:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    169c:	01414304 	movi	r5,1292
    16a0:	0009883a 	mov	r4,zero
    16a4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    16a8:	01400204 	movi	r5,8
    16ac:	0009883a 	mov	r4,zero
    16b0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    16b4:	0140b404 	movi	r5,720
    16b8:	0009883a 	mov	r4,zero
    16bc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    16c0:	01400044 	movi	r5,1
    16c4:	0009883a 	mov	r4,zero
    16c8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    16cc:	014004c4 	movi	r5,19
    16d0:	0009883a 	mov	r4,zero
    16d4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    16d8:	01414504 	movi	r5,1300
    16dc:	0009883a 	mov	r4,zero
    16e0:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    16e4:	0141a004 	movi	r5,1664
    16e8:	0009883a 	mov	r4,zero
    16ec:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    16f0:	01408004 	movi	r5,512
    16f4:	0009883a 	mov	r4,zero
    16f8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    16fc:	000b883a 	mov	r5,zero
    1700:	0009883a 	mov	r4,zero
    1704:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1708:	01400244 	movi	r5,9
    170c:	0009883a 	mov	r4,zero
    1710:	00002f40 	call	2f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1714:	01415104 	movi	r5,1348
    1718:	0009883a 	mov	r4,zero
    171c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1720:	01400204 	movi	r5,8
    1724:	0009883a 	mov	r4,zero
    1728:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    172c:	0140a404 	movi	r5,656
    1730:	0009883a 	mov	r4,zero
    1734:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1738:	01401044 	movi	r5,65
    173c:	0009883a 	mov	r4,zero
    1740:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1744:	014004c4 	movi	r5,19
    1748:	0009883a 	mov	r4,zero
    174c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1750:	01414804 	movi	r5,1312
    1754:	0009883a 	mov	r4,zero
    1758:	00002f40 	call	2f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    175c:	01415304 	movi	r5,1356
    1760:	0009883a 	mov	r4,zero
    1764:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1768:	01400044 	movi	r5,1
    176c:	0009883a 	mov	r4,zero
    1770:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1774:	0140a404 	movi	r5,656
    1778:	0009883a 	mov	r4,zero
    177c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1780:	01400044 	movi	r5,1
    1784:	0009883a 	mov	r4,zero
    1788:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    178c:	014004c4 	movi	r5,19
    1790:	0009883a 	mov	r4,zero
    1794:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1798:	01414b04 	movi	r5,1324
    179c:	0009883a 	mov	r4,zero
    17a0:	00002f40 	call	2f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    17a4:	000b883a 	mov	r5,zero
    17a8:	0009883a 	mov	r4,zero
    17ac:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    17b0:	000b883a 	mov	r5,zero
    17b4:	0009883a 	mov	r4,zero
    17b8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    17bc:	01408404 	movi	r5,528
    17c0:	0009883a 	mov	r4,zero
    17c4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    17c8:	01401044 	movi	r5,65
    17cc:	0009883a 	mov	r4,zero
    17d0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    17d4:	014004c4 	movi	r5,19
    17d8:	0009883a 	mov	r4,zero
    17dc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    17e0:	000b883a 	mov	r5,zero
    17e4:	0009883a 	mov	r4,zero
    17e8:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    17ec:	01414004 	movi	r5,1280
    17f0:	01006c04 	movi	r4,432
    17f4:	00011080 	call	1108 <UsbWrite>
}
    17f8:	0001883a 	nop
    17fc:	e037883a 	mov	sp,fp
    1800:	dfc00117 	ldw	ra,4(sp)
    1804:	df000017 	ldw	fp,0(sp)
    1808:	dec00204 	addi	sp,sp,8
    180c:	f800283a 	ret

00001810 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1810:	defffe04 	addi	sp,sp,-8
    1814:	dfc00115 	stw	ra,4(sp)
    1818:	df000015 	stw	fp,0(sp)
    181c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1820:	01414004 	movi	r5,1280
    1824:	01000084 	movi	r4,2
    1828:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    182c:	01414304 	movi	r5,1292
    1830:	0009883a 	mov	r4,zero
    1834:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1838:	01400204 	movi	r5,8
    183c:	0009883a 	mov	r4,zero
    1840:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1844:	0140b404 	movi	r5,720
    1848:	0009883a 	mov	r4,zero
    184c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1850:	01400044 	movi	r5,1
    1854:	0009883a 	mov	r4,zero
    1858:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    185c:	014004c4 	movi	r5,19
    1860:	0009883a 	mov	r4,zero
    1864:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1868:	01414504 	movi	r5,1300
    186c:	0009883a 	mov	r4,zero
    1870:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1874:	0141a004 	movi	r5,1664
    1878:	0009883a 	mov	r4,zero
    187c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1880:	01408004 	movi	r5,512
    1884:	0009883a 	mov	r4,zero
    1888:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    188c:	000b883a 	mov	r5,zero
    1890:	0009883a 	mov	r4,zero
    1894:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1898:	01403fc4 	movi	r5,255
    189c:	0009883a 	mov	r4,zero
    18a0:	00002f40 	call	2f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    18a4:	01415704 	movi	r5,1372
    18a8:	0009883a 	mov	r4,zero
    18ac:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    18b0:	01400204 	movi	r5,8
    18b4:	0009883a 	mov	r4,zero
    18b8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    18bc:	0140a404 	movi	r5,656
    18c0:	0009883a 	mov	r4,zero
    18c4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    18c8:	01401044 	movi	r5,65
    18cc:	0009883a 	mov	r4,zero
    18d0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    18d4:	014004c4 	movi	r5,19
    18d8:	0009883a 	mov	r4,zero
    18dc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    18e0:	01414804 	movi	r5,1312
    18e4:	0009883a 	mov	r4,zero
    18e8:	00002f40 	call	2f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    18ec:	01415904 	movi	r5,1380
    18f0:	0009883a 	mov	r4,zero
    18f4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    18f8:	01400204 	movi	r5,8
    18fc:	0009883a 	mov	r4,zero
    1900:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1904:	0140a404 	movi	r5,656
    1908:	0009883a 	mov	r4,zero
    190c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1910:	01400044 	movi	r5,1
    1914:	0009883a 	mov	r4,zero
    1918:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    191c:	014004c4 	movi	r5,19
    1920:	0009883a 	mov	r4,zero
    1924:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1928:	01414b04 	movi	r5,1324
    192c:	0009883a 	mov	r4,zero
    1930:	00002f40 	call	2f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1934:	01415b04 	movi	r5,1388
    1938:	0009883a 	mov	r4,zero
    193c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1940:	01400204 	movi	r5,8
    1944:	0009883a 	mov	r4,zero
    1948:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    194c:	0140a404 	movi	r5,656
    1950:	0009883a 	mov	r4,zero
    1954:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1958:	01401044 	movi	r5,65
    195c:	0009883a 	mov	r4,zero
    1960:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1964:	014004c4 	movi	r5,19
    1968:	0009883a 	mov	r4,zero
    196c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1970:	01414e04 	movi	r5,1336
    1974:	0009883a 	mov	r4,zero
    1978:	00002f40 	call	2f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    197c:	01415d04 	movi	r5,1396
    1980:	0009883a 	mov	r4,zero
    1984:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1988:	01400204 	movi	r5,8
    198c:	0009883a 	mov	r4,zero
    1990:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1994:	0140a404 	movi	r5,656
    1998:	0009883a 	mov	r4,zero
    199c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    19a0:	01400044 	movi	r5,1
    19a4:	0009883a 	mov	r4,zero
    19a8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    19ac:	014004c4 	movi	r5,19
    19b0:	0009883a 	mov	r4,zero
    19b4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    19b8:	01415104 	movi	r5,1348
    19bc:	0009883a 	mov	r4,zero
    19c0:	00002f40 	call	2f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    19c4:	01415f04 	movi	r5,1404
    19c8:	0009883a 	mov	r4,zero
    19cc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    19d0:	01400084 	movi	r5,2
    19d4:	0009883a 	mov	r4,zero
    19d8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    19dc:	0140a404 	movi	r5,656
    19e0:	0009883a 	mov	r4,zero
    19e4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    19e8:	01401044 	movi	r5,65
    19ec:	0009883a 	mov	r4,zero
    19f0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    19f4:	014004c4 	movi	r5,19
    19f8:	0009883a 	mov	r4,zero
    19fc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1a00:	01415404 	movi	r5,1360
    1a04:	0009883a 	mov	r4,zero
    1a08:	00002f40 	call	2f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1a0c:	000b883a 	mov	r5,zero
    1a10:	0009883a 	mov	r4,zero
    1a14:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1a18:	000b883a 	mov	r5,zero
    1a1c:	0009883a 	mov	r4,zero
    1a20:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1a24:	01408404 	movi	r5,528
    1a28:	0009883a 	mov	r4,zero
    1a2c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1a30:	01401044 	movi	r5,65
    1a34:	0009883a 	mov	r4,zero
    1a38:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1a3c:	014004c4 	movi	r5,19
    1a40:	0009883a 	mov	r4,zero
    1a44:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1a48:	000b883a 	mov	r5,zero
    1a4c:	0009883a 	mov	r4,zero
    1a50:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a54:	01414004 	movi	r5,1280
    1a58:	01006c04 	movi	r4,432
    1a5c:	00011080 	call	1108 <UsbWrite>
}
    1a60:	0001883a 	nop
    1a64:	e037883a 	mov	sp,fp
    1a68:	dfc00117 	ldw	ra,4(sp)
    1a6c:	df000017 	ldw	fp,0(sp)
    1a70:	dec00204 	addi	sp,sp,8
    1a74:	f800283a 	ret

00001a78 <UsbSetConfig>:

void UsbSetConfig()
{
    1a78:	defffe04 	addi	sp,sp,-8
    1a7c:	dfc00115 	stw	ra,4(sp)
    1a80:	df000015 	stw	fp,0(sp)
    1a84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a88:	01414004 	movi	r5,1280
    1a8c:	01000084 	movi	r4,2
    1a90:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1a94:	01414304 	movi	r5,1292
    1a98:	0009883a 	mov	r4,zero
    1a9c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1aa0:	01400204 	movi	r5,8
    1aa4:	0009883a 	mov	r4,zero
    1aa8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1aac:	0140b404 	movi	r5,720
    1ab0:	0009883a 	mov	r4,zero
    1ab4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ab8:	01400044 	movi	r5,1
    1abc:	0009883a 	mov	r4,zero
    1ac0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1ac4:	014004c4 	movi	r5,19
    1ac8:	0009883a 	mov	r4,zero
    1acc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ad0:	01414504 	movi	r5,1300
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    1adc:	01424004 	movi	r5,2304
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    1ae8:	01400044 	movi	r5,1
    1aec:	0009883a 	mov	r4,zero
    1af0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1af4:	000b883a 	mov	r5,zero
    1af8:	0009883a 	mov	r4,zero
    1afc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b00:	000b883a 	mov	r5,zero
    1b04:	0009883a 	mov	r4,zero
    1b08:	00002f40 	call	2f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1b0c:	000b883a 	mov	r5,zero
    1b10:	0009883a 	mov	r4,zero
    1b14:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1b18:	000b883a 	mov	r5,zero
    1b1c:	0009883a 	mov	r4,zero
    1b20:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1b24:	0140a404 	movi	r5,656
    1b28:	0009883a 	mov	r4,zero
    1b2c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1b30:	01401044 	movi	r5,65
    1b34:	0009883a 	mov	r4,zero
    1b38:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b3c:	014004c4 	movi	r5,19
    1b40:	0009883a 	mov	r4,zero
    1b44:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b48:	000b883a 	mov	r5,zero
    1b4c:	0009883a 	mov	r4,zero
    1b50:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b54:	01414004 	movi	r5,1280
    1b58:	01006c04 	movi	r4,432
    1b5c:	00011080 	call	1108 <UsbWrite>

}
    1b60:	0001883a 	nop
    1b64:	e037883a 	mov	sp,fp
    1b68:	dfc00117 	ldw	ra,4(sp)
    1b6c:	df000017 	ldw	fp,0(sp)
    1b70:	dec00204 	addi	sp,sp,8
    1b74:	f800283a 	ret

00001b78 <UsbClassRequest>:

void UsbClassRequest()
{
    1b78:	defffe04 	addi	sp,sp,-8
    1b7c:	dfc00115 	stw	ra,4(sp)
    1b80:	df000015 	stw	fp,0(sp)
    1b84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1b88:	01414004 	movi	r5,1280
    1b8c:	01000084 	movi	r4,2
    1b90:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1b94:	01414304 	movi	r5,1292
    1b98:	0009883a 	mov	r4,zero
    1b9c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ba0:	01400204 	movi	r5,8
    1ba4:	0009883a 	mov	r4,zero
    1ba8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1bac:	0140b404 	movi	r5,720
    1bb0:	0009883a 	mov	r4,zero
    1bb4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1bb8:	01400044 	movi	r5,1
    1bbc:	0009883a 	mov	r4,zero
    1bc0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1bc4:	014004c4 	movi	r5,19
    1bc8:	0009883a 	mov	r4,zero
    1bcc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1bd0:	01414504 	movi	r5,1300
    1bd4:	0009883a 	mov	r4,zero
    1bd8:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    1bdc:	01428844 	movi	r5,2593
    1be0:	0009883a 	mov	r4,zero
    1be4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    1be8:	000b883a 	mov	r5,zero
    1bec:	0009883a 	mov	r4,zero
    1bf0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1bf4:	000b883a 	mov	r5,zero
    1bf8:	0009883a 	mov	r4,zero
    1bfc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c00:	000b883a 	mov	r5,zero
    1c04:	0009883a 	mov	r4,zero
    1c08:	00002f40 	call	2f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1c0c:	000b883a 	mov	r5,zero
    1c10:	0009883a 	mov	r4,zero
    1c14:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    1c18:	000b883a 	mov	r5,zero
    1c1c:	0009883a 	mov	r4,zero
    1c20:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1c24:	0140a404 	movi	r5,656
    1c28:	0009883a 	mov	r4,zero
    1c2c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1c30:	01401044 	movi	r5,65
    1c34:	0009883a 	mov	r4,zero
    1c38:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c3c:	014004c4 	movi	r5,19
    1c40:	0009883a 	mov	r4,zero
    1c44:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c48:	000b883a 	mov	r5,zero
    1c4c:	0009883a 	mov	r4,zero
    1c50:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1c54:	01414004 	movi	r5,1280
    1c58:	01006c04 	movi	r4,432
    1c5c:	00011080 	call	1108 <UsbWrite>
}
    1c60:	0001883a 	nop
    1c64:	e037883a 	mov	sp,fp
    1c68:	dfc00117 	ldw	ra,4(sp)
    1c6c:	df000017 	ldw	fp,0(sp)
    1c70:	dec00204 	addi	sp,sp,8
    1c74:	f800283a 	ret

00001c78 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    1c78:	defffe04 	addi	sp,sp,-8
    1c7c:	dfc00115 	stw	ra,4(sp)
    1c80:	df000015 	stw	fp,0(sp)
    1c84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c88:	01414004 	movi	r5,1280
    1c8c:	01000084 	movi	r4,2
    1c90:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1c94:	01414304 	movi	r5,1292
    1c98:	0009883a 	mov	r4,zero
    1c9c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ca0:	01400204 	movi	r5,8
    1ca4:	0009883a 	mov	r4,zero
    1ca8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1cac:	0140b404 	movi	r5,720
    1cb0:	0009883a 	mov	r4,zero
    1cb4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1cb8:	01400044 	movi	r5,1
    1cbc:	0009883a 	mov	r4,zero
    1cc0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1cc4:	014004c4 	movi	r5,19
    1cc8:	0009883a 	mov	r4,zero
    1ccc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1cd0:	01414504 	movi	r5,1300
    1cd4:	0009883a 	mov	r4,zero
    1cd8:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1cdc:	0141a044 	movi	r5,1665
    1ce0:	0009883a 	mov	r4,zero
    1ce4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    1ce8:	01484004 	movi	r5,8448
    1cec:	0009883a 	mov	r4,zero
    1cf0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1cf4:	000b883a 	mov	r5,zero
    1cf8:	0009883a 	mov	r4,zero
    1cfc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1d00:	01401ec4 	movi	r5,123
    1d04:	0009883a 	mov	r4,zero
    1d08:	00002f40 	call	2f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1d0c:	01415104 	movi	r5,1348
    1d10:	0009883a 	mov	r4,zero
    1d14:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1d18:	01400204 	movi	r5,8
    1d1c:	0009883a 	mov	r4,zero
    1d20:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1d24:	0140a404 	movi	r5,656
    1d28:	0009883a 	mov	r4,zero
    1d2c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1d30:	01401044 	movi	r5,65
    1d34:	0009883a 	mov	r4,zero
    1d38:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1d3c:	014004c4 	movi	r5,19
    1d40:	0009883a 	mov	r4,zero
    1d44:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1d48:	01414804 	movi	r5,1312
    1d4c:	0009883a 	mov	r4,zero
    1d50:	00002f40 	call	2f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1d54:	000b883a 	mov	r5,zero
    1d58:	0009883a 	mov	r4,zero
    1d5c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1d60:	000b883a 	mov	r5,zero
    1d64:	0009883a 	mov	r4,zero
    1d68:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1d6c:	01408404 	movi	r5,528
    1d70:	0009883a 	mov	r4,zero
    1d74:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1d78:	01401044 	movi	r5,65
    1d7c:	0009883a 	mov	r4,zero
    1d80:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1d84:	014004c4 	movi	r5,19
    1d88:	0009883a 	mov	r4,zero
    1d8c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1d90:	000b883a 	mov	r5,zero
    1d94:	0009883a 	mov	r4,zero
    1d98:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d9c:	01414004 	movi	r5,1280
    1da0:	01006c04 	movi	r4,432
    1da4:	00011080 	call	1108 <UsbWrite>

}
    1da8:	0001883a 	nop
    1dac:	e037883a 	mov	sp,fp
    1db0:	dfc00117 	ldw	ra,4(sp)
    1db4:	df000017 	ldw	fp,0(sp)
    1db8:	dec00204 	addi	sp,sp,8
    1dbc:	f800283a 	ret

00001dc0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    1dc0:	defffe04 	addi	sp,sp,-8
    1dc4:	dfc00115 	stw	ra,4(sp)
    1dc8:	df000015 	stw	fp,0(sp)
    1dcc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1dd0:	01414004 	movi	r5,1280
    1dd4:	01000084 	movi	r4,2
    1dd8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1ddc:	01414304 	movi	r5,1292
    1de0:	0009883a 	mov	r4,zero
    1de4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1de8:	01400204 	movi	r5,8
    1dec:	0009883a 	mov	r4,zero
    1df0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1df4:	0140b404 	movi	r5,720
    1df8:	0009883a 	mov	r4,zero
    1dfc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1e00:	01400044 	movi	r5,1
    1e04:	0009883a 	mov	r4,zero
    1e08:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e0c:	014004c4 	movi	r5,19
    1e10:	0009883a 	mov	r4,zero
    1e14:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1e18:	01414504 	movi	r5,1300
    1e1c:	0009883a 	mov	r4,zero
    1e20:	00002f40 	call	2f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1e24:	0141a044 	movi	r5,1665
    1e28:	0009883a 	mov	r4,zero
    1e2c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    1e30:	01488004 	movi	r5,8704
    1e34:	0009883a 	mov	r4,zero
    1e38:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1e3c:	000b883a 	mov	r5,zero
    1e40:	0009883a 	mov	r4,zero
    1e44:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1e48:	01401ec4 	movi	r5,123
    1e4c:	0009883a 	mov	r4,zero
    1e50:	00002f40 	call	2f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    1e54:	01416004 	movi	r5,1408
    1e58:	0009883a 	mov	r4,zero
    1e5c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1e60:	01400204 	movi	r5,8
    1e64:	0009883a 	mov	r4,zero
    1e68:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1e6c:	0140a404 	movi	r5,656
    1e70:	0009883a 	mov	r4,zero
    1e74:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1e78:	01401044 	movi	r5,65
    1e7c:	0009883a 	mov	r4,zero
    1e80:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e84:	014004c4 	movi	r5,19
    1e88:	0009883a 	mov	r4,zero
    1e8c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e90:	01414804 	movi	r5,1312
    1e94:	0009883a 	mov	r4,zero
    1e98:	00002f40 	call	2f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    1e9c:	01416204 	movi	r5,1416
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1ea8:	01400204 	movi	r5,8
    1eac:	0009883a 	mov	r4,zero
    1eb0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1eb4:	0140a404 	movi	r5,656
    1eb8:	0009883a 	mov	r4,zero
    1ebc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1ec0:	01400044 	movi	r5,1
    1ec4:	0009883a 	mov	r4,zero
    1ec8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1ecc:	014004c4 	movi	r5,19
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1ed8:	01414b04 	movi	r5,1324
    1edc:	0009883a 	mov	r4,zero
    1ee0:	00002f40 	call	2f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    1ee4:	01416404 	movi	r5,1424
    1ee8:	0009883a 	mov	r4,zero
    1eec:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1ef0:	01400204 	movi	r5,8
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1efc:	0140a404 	movi	r5,656
    1f00:	0009883a 	mov	r4,zero
    1f04:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1f08:	01401044 	movi	r5,65
    1f0c:	0009883a 	mov	r4,zero
    1f10:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1f14:	014004c4 	movi	r5,19
    1f18:	0009883a 	mov	r4,zero
    1f1c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1f20:	01414e04 	movi	r5,1336
    1f24:	0009883a 	mov	r4,zero
    1f28:	00002f40 	call	2f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    1f2c:	01416604 	movi	r5,1432
    1f30:	0009883a 	mov	r4,zero
    1f34:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1f38:	01400204 	movi	r5,8
    1f3c:	0009883a 	mov	r4,zero
    1f40:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1f44:	0140a404 	movi	r5,656
    1f48:	0009883a 	mov	r4,zero
    1f4c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1f50:	01400044 	movi	r5,1
    1f54:	0009883a 	mov	r4,zero
    1f58:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1f5c:	014004c4 	movi	r5,19
    1f60:	0009883a 	mov	r4,zero
    1f64:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1f68:	01415104 	movi	r5,1348
    1f6c:	0009883a 	mov	r4,zero
    1f70:	00002f40 	call	2f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    1f74:	01416804 	movi	r5,1440
    1f78:	0009883a 	mov	r4,zero
    1f7c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f80:	01400204 	movi	r5,8
    1f84:	0009883a 	mov	r4,zero
    1f88:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f8c:	0140a404 	movi	r5,656
    1f90:	0009883a 	mov	r4,zero
    1f94:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1f98:	01401044 	movi	r5,65
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1fa4:	014004c4 	movi	r5,19
    1fa8:	0009883a 	mov	r4,zero
    1fac:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1fb0:	01415404 	movi	r5,1360
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	00002f40 	call	2f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    1fbc:	01416a04 	movi	r5,1448
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1fc8:	01400204 	movi	r5,8
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1fd4:	0140a404 	movi	r5,656
    1fd8:	0009883a 	mov	r4,zero
    1fdc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1fe0:	01400044 	movi	r5,1
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1fec:	014004c4 	movi	r5,19
    1ff0:	0009883a 	mov	r4,zero
    1ff4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    1ff8:	01415704 	movi	r5,1372
    1ffc:	0009883a 	mov	r4,zero
    2000:	00002f40 	call	2f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2004:	01416c04 	movi	r5,1456
    2008:	0009883a 	mov	r4,zero
    200c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2010:	01400204 	movi	r5,8
    2014:	0009883a 	mov	r4,zero
    2018:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    201c:	0140a404 	movi	r5,656
    2020:	0009883a 	mov	r4,zero
    2024:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2028:	01401044 	movi	r5,65
    202c:	0009883a 	mov	r4,zero
    2030:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2034:	014004c4 	movi	r5,19
    2038:	0009883a 	mov	r4,zero
    203c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2040:	01415a04 	movi	r5,1384
    2044:	0009883a 	mov	r4,zero
    2048:	00002f40 	call	2f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    204c:	01416e04 	movi	r5,1464
    2050:	0009883a 	mov	r4,zero
    2054:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2058:	014000c4 	movi	r5,3
    205c:	0009883a 	mov	r4,zero
    2060:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2064:	0140a404 	movi	r5,656
    2068:	0009883a 	mov	r4,zero
    206c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2070:	01400044 	movi	r5,1
    2074:	0009883a 	mov	r4,zero
    2078:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    207c:	014004c4 	movi	r5,19
    2080:	0009883a 	mov	r4,zero
    2084:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2088:	01415d04 	movi	r5,1396
    208c:	0009883a 	mov	r4,zero
    2090:	00002f40 	call	2f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2094:	000b883a 	mov	r5,zero
    2098:	0009883a 	mov	r4,zero
    209c:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    20a0:	000b883a 	mov	r5,zero
    20a4:	0009883a 	mov	r4,zero
    20a8:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    20ac:	01408404 	movi	r5,528
    20b0:	0009883a 	mov	r4,zero
    20b4:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    20b8:	01401044 	movi	r5,65
    20bc:	0009883a 	mov	r4,zero
    20c0:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20c4:	014004c4 	movi	r5,19
    20c8:	0009883a 	mov	r4,zero
    20cc:	00002f40 	call	2f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    20d0:	000b883a 	mov	r5,zero
    20d4:	0009883a 	mov	r4,zero
    20d8:	00002f40 	call	2f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    20dc:	01414004 	movi	r5,1280
    20e0:	01006c04 	movi	r4,432
    20e4:	00011080 	call	1108 <UsbWrite>

}
    20e8:	0001883a 	nop
    20ec:	e037883a 	mov	sp,fp
    20f0:	dfc00117 	ldw	ra,4(sp)
    20f4:	df000017 	ldw	fp,0(sp)
    20f8:	dec00204 	addi	sp,sp,8
    20fc:	f800283a 	ret

00002100 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2100:	defffd04 	addi	sp,sp,-12
    2104:	dfc00215 	stw	ra,8(sp)
    2108:	df000115 	stw	fp,4(sp)
    210c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2110:	01005104 	movi	r4,324
    2114:	00011600 	call	1160 <UsbRead>
    2118:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    211c:	000b883a 	mov	r5,zero
    2120:	01005104 	movi	r4,324
    2124:	00011080 	call	1108 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2128:	00000d06 	br	2160 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    212c:	e0bfff0b 	ldhu	r2,-4(fp)
    2130:	10000526 	beq	r2,zero,2148 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2134:	e0bfff0b 	ldhu	r2,-4(fp)
    2138:	100b883a 	mov	r5,r2
    213c:	01000034 	movhi	r4,0
    2140:	21150a04 	addi	r4,r4,21544
    2144:	00022c00 	call	22c0 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2148:	01005104 	movi	r4,324
    214c:	00011600 	call	1160 <UsbRead>
    2150:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2154:	000b883a 	mov	r5,zero
    2158:	01005104 	movi	r4,324
    215c:	00011080 	call	1108 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2160:	e0bfff0b 	ldhu	r2,-4(fp)
    2164:	10840018 	cmpnei	r2,r2,4096
    2168:	103ff01e 	bne	r2,zero,212c <_gp+0xffff39b0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    216c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2170:	e037883a 	mov	sp,fp
    2174:	dfc00117 	ldw	ra,4(sp)
    2178:	df000017 	ldw	fp,0(sp)
    217c:	dec00204 	addi	sp,sp,8
    2180:	f800283a 	ret

00002184 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2184:	defffd04 	addi	sp,sp,-12
    2188:	dfc00215 	stw	ra,8(sp)
    218c:	df000115 	stw	fp,4(sp)
    2190:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2194:	010000c4 	movi	r4,3
    2198:	00003740 	call	374 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    219c:	01005104 	movi	r4,324
    21a0:	00011600 	call	1160 <UsbRead>
    21a4:	10bfffcc 	andi	r2,r2,65535
    21a8:	10840018 	cmpnei	r2,r2,4096
    21ac:	1000091e 	bne	r2,zero,21d4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    21b0:	000b883a 	mov	r5,zero
    21b4:	01005104 	movi	r4,324
    21b8:	00011080 	call	1108 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    21bc:	0001883a 	nop
    21c0:	010000c4 	movi	r4,3
    21c4:	00003740 	call	374 <IO_read>
    21c8:	10bfffcc 	andi	r2,r2,65535
    21cc:	1080040c 	andi	r2,r2,16
    21d0:	103ffb26 	beq	r2,zero,21c0 <_gp+0xffff3a44>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    21d4:	01414204 	movi	r5,1288
    21d8:	01000084 	movi	r4,2
    21dc:	00002f40 	call	2f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    21e0:	0009883a 	mov	r4,zero
    21e4:	00003740 	call	374 <IO_read>
    21e8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    21ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
    21f0:	e037883a 	mov	sp,fp
    21f4:	dfc00117 	ldw	ra,4(sp)
    21f8:	df000017 	ldw	fp,0(sp)
    21fc:	dec00204 	addi	sp,sp,8
    2200:	f800283a 	ret

00002204 <UsbPrintMem>:


void UsbPrintMem()
{
    2204:	defffc04 	addi	sp,sp,-16
    2208:	dfc00315 	stw	ra,12(sp)
    220c:	df000215 	stw	fp,8(sp)
    2210:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2214:	01414004 	movi	r5,1280
    2218:	01000084 	movi	r4,2
    221c:	00002f40 	call	2f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2220:	e03ffe15 	stw	zero,-8(fp)
    2224:	00000e06 	br	2260 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2228:	0009883a 	mov	r4,zero
    222c:	00003740 	call	374 <IO_read>
    2230:	10bfffcc 	andi	r2,r2,65535
    2234:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2238:	e0bffe17 	ldw	r2,-8(fp)
    223c:	10814004 	addi	r2,r2,1280
    2240:	e1bfff17 	ldw	r6,-4(fp)
    2244:	100b883a 	mov	r5,r2
    2248:	01000034 	movhi	r4,0
    224c:	21151204 	addi	r4,r4,21576
    2250:	00022c00 	call	22c0 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2254:	e0bffe17 	ldw	r2,-8(fp)
    2258:	10800084 	addi	r2,r2,2
    225c:	e0bffe15 	stw	r2,-8(fp)
    2260:	e0bffe17 	ldw	r2,-8(fp)
    2264:	10803250 	cmplti	r2,r2,201
    2268:	103fef1e 	bne	r2,zero,2228 <_gp+0xffff3aac>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    226c:	0001883a 	nop
    2270:	e037883a 	mov	sp,fp
    2274:	dfc00117 	ldw	ra,4(sp)
    2278:	df000017 	ldw	fp,0(sp)
    227c:	dec00204 	addi	sp,sp,8
    2280:	f800283a 	ret

00002284 <_printf_r>:
    2284:	defffd04 	addi	sp,sp,-12
    2288:	dfc00015 	stw	ra,0(sp)
    228c:	d9800115 	stw	r6,4(sp)
    2290:	d9c00215 	stw	r7,8(sp)
    2294:	20c00217 	ldw	r3,8(r4)
    2298:	01800034 	movhi	r6,0
    229c:	318a5c04 	addi	r6,r6,10608
    22a0:	19800115 	stw	r6,4(r3)
    22a4:	280d883a 	mov	r6,r5
    22a8:	21400217 	ldw	r5,8(r4)
    22ac:	d9c00104 	addi	r7,sp,4
    22b0:	00024280 	call	2428 <___vfprintf_internal_r>
    22b4:	dfc00017 	ldw	ra,0(sp)
    22b8:	dec00304 	addi	sp,sp,12
    22bc:	f800283a 	ret

000022c0 <printf>:
    22c0:	defffc04 	addi	sp,sp,-16
    22c4:	dfc00015 	stw	ra,0(sp)
    22c8:	d9400115 	stw	r5,4(sp)
    22cc:	d9800215 	stw	r6,8(sp)
    22d0:	d9c00315 	stw	r7,12(sp)
    22d4:	00800034 	movhi	r2,0
    22d8:	1099e104 	addi	r2,r2,26500
    22dc:	10800017 	ldw	r2,0(r2)
    22e0:	01400034 	movhi	r5,0
    22e4:	294a5c04 	addi	r5,r5,10608
    22e8:	10c00217 	ldw	r3,8(r2)
    22ec:	d9800104 	addi	r6,sp,4
    22f0:	19400115 	stw	r5,4(r3)
    22f4:	200b883a 	mov	r5,r4
    22f8:	11000217 	ldw	r4,8(r2)
    22fc:	00029540 	call	2954 <__vfprintf_internal>
    2300:	dfc00017 	ldw	ra,0(sp)
    2304:	dec00404 	addi	sp,sp,16
    2308:	f800283a 	ret

0000230c <_puts_r>:
    230c:	defffd04 	addi	sp,sp,-12
    2310:	dc000015 	stw	r16,0(sp)
    2314:	2021883a 	mov	r16,r4
    2318:	2809883a 	mov	r4,r5
    231c:	dfc00215 	stw	ra,8(sp)
    2320:	dc400115 	stw	r17,4(sp)
    2324:	2823883a 	mov	r17,r5
    2328:	00023a00 	call	23a0 <strlen>
    232c:	81400217 	ldw	r5,8(r16)
    2330:	01000034 	movhi	r4,0
    2334:	210a5c04 	addi	r4,r4,10608
    2338:	29000115 	stw	r4,4(r5)
    233c:	100f883a 	mov	r7,r2
    2340:	880d883a 	mov	r6,r17
    2344:	8009883a 	mov	r4,r16
    2348:	00029700 	call	2970 <__sfvwrite_small_dev>
    234c:	00ffffc4 	movi	r3,-1
    2350:	10c00926 	beq	r2,r3,2378 <_puts_r+0x6c>
    2354:	81400217 	ldw	r5,8(r16)
    2358:	01800034 	movhi	r6,0
    235c:	01c00044 	movi	r7,1
    2360:	28800117 	ldw	r2,4(r5)
    2364:	31951704 	addi	r6,r6,21596
    2368:	8009883a 	mov	r4,r16
    236c:	103ee83a 	callr	r2
    2370:	10bfffe0 	cmpeqi	r2,r2,-1
    2374:	0085c83a 	sub	r2,zero,r2
    2378:	dfc00217 	ldw	ra,8(sp)
    237c:	dc400117 	ldw	r17,4(sp)
    2380:	dc000017 	ldw	r16,0(sp)
    2384:	dec00304 	addi	sp,sp,12
    2388:	f800283a 	ret

0000238c <puts>:
    238c:	00800034 	movhi	r2,0
    2390:	1099e104 	addi	r2,r2,26500
    2394:	200b883a 	mov	r5,r4
    2398:	11000017 	ldw	r4,0(r2)
    239c:	000230c1 	jmpi	230c <_puts_r>

000023a0 <strlen>:
    23a0:	2005883a 	mov	r2,r4
    23a4:	10c00007 	ldb	r3,0(r2)
    23a8:	18000226 	beq	r3,zero,23b4 <strlen+0x14>
    23ac:	10800044 	addi	r2,r2,1
    23b0:	003ffc06 	br	23a4 <_gp+0xffff3c28>
    23b4:	1105c83a 	sub	r2,r2,r4
    23b8:	f800283a 	ret

000023bc <print_repeat>:
    23bc:	defffb04 	addi	sp,sp,-20
    23c0:	dc800315 	stw	r18,12(sp)
    23c4:	dc400215 	stw	r17,8(sp)
    23c8:	dc000115 	stw	r16,4(sp)
    23cc:	dfc00415 	stw	ra,16(sp)
    23d0:	2025883a 	mov	r18,r4
    23d4:	2823883a 	mov	r17,r5
    23d8:	d9800005 	stb	r6,0(sp)
    23dc:	3821883a 	mov	r16,r7
    23e0:	04000a0e 	bge	zero,r16,240c <print_repeat+0x50>
    23e4:	88800117 	ldw	r2,4(r17)
    23e8:	01c00044 	movi	r7,1
    23ec:	d80d883a 	mov	r6,sp
    23f0:	880b883a 	mov	r5,r17
    23f4:	9009883a 	mov	r4,r18
    23f8:	103ee83a 	callr	r2
    23fc:	843fffc4 	addi	r16,r16,-1
    2400:	103ff726 	beq	r2,zero,23e0 <_gp+0xffff3c64>
    2404:	00bfffc4 	movi	r2,-1
    2408:	00000106 	br	2410 <print_repeat+0x54>
    240c:	0005883a 	mov	r2,zero
    2410:	dfc00417 	ldw	ra,16(sp)
    2414:	dc800317 	ldw	r18,12(sp)
    2418:	dc400217 	ldw	r17,8(sp)
    241c:	dc000117 	ldw	r16,4(sp)
    2420:	dec00504 	addi	sp,sp,20
    2424:	f800283a 	ret

00002428 <___vfprintf_internal_r>:
    2428:	deffe504 	addi	sp,sp,-108
    242c:	d8c00804 	addi	r3,sp,32
    2430:	ddc01815 	stw	r23,96(sp)
    2434:	dd801715 	stw	r22,92(sp)
    2438:	dd401615 	stw	r21,88(sp)
    243c:	dd001515 	stw	r20,84(sp)
    2440:	dcc01415 	stw	r19,80(sp)
    2444:	dc801315 	stw	r18,76(sp)
    2448:	dc401215 	stw	r17,72(sp)
    244c:	dc001115 	stw	r16,68(sp)
    2450:	dfc01a15 	stw	ra,104(sp)
    2454:	df001915 	stw	fp,100(sp)
    2458:	2029883a 	mov	r20,r4
    245c:	2823883a 	mov	r17,r5
    2460:	382d883a 	mov	r22,r7
    2464:	d9800f15 	stw	r6,60(sp)
    2468:	0021883a 	mov	r16,zero
    246c:	d8000e15 	stw	zero,56(sp)
    2470:	d8000a15 	stw	zero,40(sp)
    2474:	002b883a 	mov	r21,zero
    2478:	0027883a 	mov	r19,zero
    247c:	0025883a 	mov	r18,zero
    2480:	d8000c15 	stw	zero,48(sp)
    2484:	d8000b15 	stw	zero,44(sp)
    2488:	002f883a 	mov	r23,zero
    248c:	d8c00915 	stw	r3,36(sp)
    2490:	d8c00f17 	ldw	r3,60(sp)
    2494:	19000003 	ldbu	r4,0(r3)
    2498:	20803fcc 	andi	r2,r4,255
    249c:	1080201c 	xori	r2,r2,128
    24a0:	10bfe004 	addi	r2,r2,-128
    24a4:	10011e26 	beq	r2,zero,2920 <___vfprintf_internal_r+0x4f8>
    24a8:	00c00044 	movi	r3,1
    24ac:	b8c01426 	beq	r23,r3,2500 <___vfprintf_internal_r+0xd8>
    24b0:	1dc00216 	blt	r3,r23,24bc <___vfprintf_internal_r+0x94>
    24b4:	b8000626 	beq	r23,zero,24d0 <___vfprintf_internal_r+0xa8>
    24b8:	00011506 	br	2910 <___vfprintf_internal_r+0x4e8>
    24bc:	01400084 	movi	r5,2
    24c0:	b9401d26 	beq	r23,r5,2538 <___vfprintf_internal_r+0x110>
    24c4:	014000c4 	movi	r5,3
    24c8:	b9402b26 	beq	r23,r5,2578 <___vfprintf_internal_r+0x150>
    24cc:	00011006 	br	2910 <___vfprintf_internal_r+0x4e8>
    24d0:	01400944 	movi	r5,37
    24d4:	1140fc26 	beq	r2,r5,28c8 <___vfprintf_internal_r+0x4a0>
    24d8:	88800117 	ldw	r2,4(r17)
    24dc:	d9000005 	stb	r4,0(sp)
    24e0:	01c00044 	movi	r7,1
    24e4:	d80d883a 	mov	r6,sp
    24e8:	880b883a 	mov	r5,r17
    24ec:	a009883a 	mov	r4,r20
    24f0:	103ee83a 	callr	r2
    24f4:	1000d81e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    24f8:	84000044 	addi	r16,r16,1
    24fc:	00010406 	br	2910 <___vfprintf_internal_r+0x4e8>
    2500:	01400c04 	movi	r5,48
    2504:	1140fa26 	beq	r2,r5,28f0 <___vfprintf_internal_r+0x4c8>
    2508:	01400944 	movi	r5,37
    250c:	11400a1e 	bne	r2,r5,2538 <___vfprintf_internal_r+0x110>
    2510:	d8800005 	stb	r2,0(sp)
    2514:	88800117 	ldw	r2,4(r17)
    2518:	b80f883a 	mov	r7,r23
    251c:	d80d883a 	mov	r6,sp
    2520:	880b883a 	mov	r5,r17
    2524:	a009883a 	mov	r4,r20
    2528:	103ee83a 	callr	r2
    252c:	1000ca1e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    2530:	84000044 	addi	r16,r16,1
    2534:	0000f506 	br	290c <___vfprintf_internal_r+0x4e4>
    2538:	25fff404 	addi	r23,r4,-48
    253c:	bdc03fcc 	andi	r23,r23,255
    2540:	00c00244 	movi	r3,9
    2544:	1dc00936 	bltu	r3,r23,256c <___vfprintf_internal_r+0x144>
    2548:	00bfffc4 	movi	r2,-1
    254c:	90800426 	beq	r18,r2,2560 <___vfprintf_internal_r+0x138>
    2550:	01400284 	movi	r5,10
    2554:	9009883a 	mov	r4,r18
    2558:	0002c340 	call	2c34 <__mulsi3>
    255c:	00000106 	br	2564 <___vfprintf_internal_r+0x13c>
    2560:	0005883a 	mov	r2,zero
    2564:	b8a5883a 	add	r18,r23,r2
    2568:	0000e206 	br	28f4 <___vfprintf_internal_r+0x4cc>
    256c:	01400b84 	movi	r5,46
    2570:	1140e426 	beq	r2,r5,2904 <___vfprintf_internal_r+0x4dc>
    2574:	05c00084 	movi	r23,2
    2578:	213ff404 	addi	r4,r4,-48
    257c:	27003fcc 	andi	fp,r4,255
    2580:	00c00244 	movi	r3,9
    2584:	1f000936 	bltu	r3,fp,25ac <___vfprintf_internal_r+0x184>
    2588:	00bfffc4 	movi	r2,-1
    258c:	98800426 	beq	r19,r2,25a0 <___vfprintf_internal_r+0x178>
    2590:	01400284 	movi	r5,10
    2594:	9809883a 	mov	r4,r19
    2598:	0002c340 	call	2c34 <__mulsi3>
    259c:	00000106 	br	25a4 <___vfprintf_internal_r+0x17c>
    25a0:	0005883a 	mov	r2,zero
    25a4:	e0a7883a 	add	r19,fp,r2
    25a8:	0000d906 	br	2910 <___vfprintf_internal_r+0x4e8>
    25ac:	00c01b04 	movi	r3,108
    25b0:	10c0d226 	beq	r2,r3,28fc <___vfprintf_internal_r+0x4d4>
    25b4:	013fffc4 	movi	r4,-1
    25b8:	99000226 	beq	r19,r4,25c4 <___vfprintf_internal_r+0x19c>
    25bc:	d8000b15 	stw	zero,44(sp)
    25c0:	00000106 	br	25c8 <___vfprintf_internal_r+0x1a0>
    25c4:	04c00044 	movi	r19,1
    25c8:	01001a44 	movi	r4,105
    25cc:	11001626 	beq	r2,r4,2628 <___vfprintf_internal_r+0x200>
    25d0:	20800916 	blt	r4,r2,25f8 <___vfprintf_internal_r+0x1d0>
    25d4:	010018c4 	movi	r4,99
    25d8:	11008826 	beq	r2,r4,27fc <___vfprintf_internal_r+0x3d4>
    25dc:	01001904 	movi	r4,100
    25e0:	11001126 	beq	r2,r4,2628 <___vfprintf_internal_r+0x200>
    25e4:	01001604 	movi	r4,88
    25e8:	1100c81e 	bne	r2,r4,290c <___vfprintf_internal_r+0x4e4>
    25ec:	00c00044 	movi	r3,1
    25f0:	d8c00e15 	stw	r3,56(sp)
    25f4:	00001506 	br	264c <___vfprintf_internal_r+0x224>
    25f8:	01001cc4 	movi	r4,115
    25fc:	11009826 	beq	r2,r4,2860 <___vfprintf_internal_r+0x438>
    2600:	20800416 	blt	r4,r2,2614 <___vfprintf_internal_r+0x1ec>
    2604:	01001bc4 	movi	r4,111
    2608:	1100c01e 	bne	r2,r4,290c <___vfprintf_internal_r+0x4e4>
    260c:	05400204 	movi	r21,8
    2610:	00000f06 	br	2650 <___vfprintf_internal_r+0x228>
    2614:	01001d44 	movi	r4,117
    2618:	11000d26 	beq	r2,r4,2650 <___vfprintf_internal_r+0x228>
    261c:	01001e04 	movi	r4,120
    2620:	11000a26 	beq	r2,r4,264c <___vfprintf_internal_r+0x224>
    2624:	0000b906 	br	290c <___vfprintf_internal_r+0x4e4>
    2628:	d8c00a17 	ldw	r3,40(sp)
    262c:	b7000104 	addi	fp,r22,4
    2630:	18000726 	beq	r3,zero,2650 <___vfprintf_internal_r+0x228>
    2634:	df000d15 	stw	fp,52(sp)
    2638:	b5c00017 	ldw	r23,0(r22)
    263c:	b800080e 	bge	r23,zero,2660 <___vfprintf_internal_r+0x238>
    2640:	05efc83a 	sub	r23,zero,r23
    2644:	02400044 	movi	r9,1
    2648:	00000606 	br	2664 <___vfprintf_internal_r+0x23c>
    264c:	05400404 	movi	r21,16
    2650:	b0c00104 	addi	r3,r22,4
    2654:	d8c00d15 	stw	r3,52(sp)
    2658:	b5c00017 	ldw	r23,0(r22)
    265c:	d8000a15 	stw	zero,40(sp)
    2660:	0013883a 	mov	r9,zero
    2664:	d839883a 	mov	fp,sp
    2668:	b8001726 	beq	r23,zero,26c8 <___vfprintf_internal_r+0x2a0>
    266c:	a80b883a 	mov	r5,r21
    2670:	b809883a 	mov	r4,r23
    2674:	da401015 	stw	r9,64(sp)
    2678:	0002b780 	call	2b78 <__udivsi3>
    267c:	a80b883a 	mov	r5,r21
    2680:	1009883a 	mov	r4,r2
    2684:	102d883a 	mov	r22,r2
    2688:	0002c340 	call	2c34 <__mulsi3>
    268c:	b885c83a 	sub	r2,r23,r2
    2690:	00c00244 	movi	r3,9
    2694:	da401017 	ldw	r9,64(sp)
    2698:	18800216 	blt	r3,r2,26a4 <___vfprintf_internal_r+0x27c>
    269c:	10800c04 	addi	r2,r2,48
    26a0:	00000506 	br	26b8 <___vfprintf_internal_r+0x290>
    26a4:	d8c00e17 	ldw	r3,56(sp)
    26a8:	18000226 	beq	r3,zero,26b4 <___vfprintf_internal_r+0x28c>
    26ac:	10800dc4 	addi	r2,r2,55
    26b0:	00000106 	br	26b8 <___vfprintf_internal_r+0x290>
    26b4:	108015c4 	addi	r2,r2,87
    26b8:	e0800005 	stb	r2,0(fp)
    26bc:	b02f883a 	mov	r23,r22
    26c0:	e7000044 	addi	fp,fp,1
    26c4:	003fe806 	br	2668 <_gp+0xffff3eec>
    26c8:	e6efc83a 	sub	r23,fp,sp
    26cc:	9dc5c83a 	sub	r2,r19,r23
    26d0:	0080090e 	bge	zero,r2,26f8 <___vfprintf_internal_r+0x2d0>
    26d4:	e085883a 	add	r2,fp,r2
    26d8:	01400c04 	movi	r5,48
    26dc:	d8c00917 	ldw	r3,36(sp)
    26e0:	e009883a 	mov	r4,fp
    26e4:	e0c0032e 	bgeu	fp,r3,26f4 <___vfprintf_internal_r+0x2cc>
    26e8:	e7000044 	addi	fp,fp,1
    26ec:	21400005 	stb	r5,0(r4)
    26f0:	e0bffa1e 	bne	fp,r2,26dc <_gp+0xffff3f60>
    26f4:	e6efc83a 	sub	r23,fp,sp
    26f8:	d8c00b17 	ldw	r3,44(sp)
    26fc:	4dd1883a 	add	r8,r9,r23
    2700:	922dc83a 	sub	r22,r18,r8
    2704:	18001626 	beq	r3,zero,2760 <___vfprintf_internal_r+0x338>
    2708:	48000a26 	beq	r9,zero,2734 <___vfprintf_internal_r+0x30c>
    270c:	00800b44 	movi	r2,45
    2710:	d8800805 	stb	r2,32(sp)
    2714:	88800117 	ldw	r2,4(r17)
    2718:	01c00044 	movi	r7,1
    271c:	d9800804 	addi	r6,sp,32
    2720:	880b883a 	mov	r5,r17
    2724:	a009883a 	mov	r4,r20
    2728:	103ee83a 	callr	r2
    272c:	10004a1e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    2730:	84000044 	addi	r16,r16,1
    2734:	0580070e 	bge	zero,r22,2754 <___vfprintf_internal_r+0x32c>
    2738:	b00f883a 	mov	r7,r22
    273c:	01800c04 	movi	r6,48
    2740:	880b883a 	mov	r5,r17
    2744:	a009883a 	mov	r4,r20
    2748:	00023bc0 	call	23bc <print_repeat>
    274c:	1000421e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    2750:	85a1883a 	add	r16,r16,r22
    2754:	e02d883a 	mov	r22,fp
    2758:	bf2fc83a 	sub	r23,r23,fp
    275c:	00002006 	br	27e0 <___vfprintf_internal_r+0x3b8>
    2760:	0580090e 	bge	zero,r22,2788 <___vfprintf_internal_r+0x360>
    2764:	b00f883a 	mov	r7,r22
    2768:	01800804 	movi	r6,32
    276c:	880b883a 	mov	r5,r17
    2770:	a009883a 	mov	r4,r20
    2774:	da401015 	stw	r9,64(sp)
    2778:	00023bc0 	call	23bc <print_repeat>
    277c:	da401017 	ldw	r9,64(sp)
    2780:	1000351e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    2784:	85a1883a 	add	r16,r16,r22
    2788:	483ff226 	beq	r9,zero,2754 <_gp+0xffff3fd8>
    278c:	00800b44 	movi	r2,45
    2790:	d8800805 	stb	r2,32(sp)
    2794:	88800117 	ldw	r2,4(r17)
    2798:	01c00044 	movi	r7,1
    279c:	d9800804 	addi	r6,sp,32
    27a0:	880b883a 	mov	r5,r17
    27a4:	a009883a 	mov	r4,r20
    27a8:	103ee83a 	callr	r2
    27ac:	10002a1e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    27b0:	84000044 	addi	r16,r16,1
    27b4:	003fe706 	br	2754 <_gp+0xffff3fd8>
    27b8:	b5bfffc4 	addi	r22,r22,-1
    27bc:	b0800003 	ldbu	r2,0(r22)
    27c0:	01c00044 	movi	r7,1
    27c4:	d9800804 	addi	r6,sp,32
    27c8:	d8800805 	stb	r2,32(sp)
    27cc:	88800117 	ldw	r2,4(r17)
    27d0:	880b883a 	mov	r5,r17
    27d4:	a009883a 	mov	r4,r20
    27d8:	103ee83a 	callr	r2
    27dc:	10001e1e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    27e0:	8585c83a 	sub	r2,r16,r22
    27e4:	b5c9883a 	add	r4,r22,r23
    27e8:	e085883a 	add	r2,fp,r2
    27ec:	013ff216 	blt	zero,r4,27b8 <_gp+0xffff403c>
    27f0:	1021883a 	mov	r16,r2
    27f4:	dd800d17 	ldw	r22,52(sp)
    27f8:	00004406 	br	290c <___vfprintf_internal_r+0x4e4>
    27fc:	00800044 	movi	r2,1
    2800:	1480080e 	bge	r2,r18,2824 <___vfprintf_internal_r+0x3fc>
    2804:	95ffffc4 	addi	r23,r18,-1
    2808:	b80f883a 	mov	r7,r23
    280c:	01800804 	movi	r6,32
    2810:	880b883a 	mov	r5,r17
    2814:	a009883a 	mov	r4,r20
    2818:	00023bc0 	call	23bc <print_repeat>
    281c:	10000e1e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    2820:	85e1883a 	add	r16,r16,r23
    2824:	b0800017 	ldw	r2,0(r22)
    2828:	01c00044 	movi	r7,1
    282c:	d80d883a 	mov	r6,sp
    2830:	d8800005 	stb	r2,0(sp)
    2834:	88800117 	ldw	r2,4(r17)
    2838:	880b883a 	mov	r5,r17
    283c:	a009883a 	mov	r4,r20
    2840:	b5c00104 	addi	r23,r22,4
    2844:	103ee83a 	callr	r2
    2848:	1000031e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x430>
    284c:	84000044 	addi	r16,r16,1
    2850:	b82d883a 	mov	r22,r23
    2854:	00002d06 	br	290c <___vfprintf_internal_r+0x4e4>
    2858:	00bfffc4 	movi	r2,-1
    285c:	00003106 	br	2924 <___vfprintf_internal_r+0x4fc>
    2860:	b5c00017 	ldw	r23,0(r22)
    2864:	b7000104 	addi	fp,r22,4
    2868:	b809883a 	mov	r4,r23
    286c:	00023a00 	call	23a0 <strlen>
    2870:	9091c83a 	sub	r8,r18,r2
    2874:	102d883a 	mov	r22,r2
    2878:	0200090e 	bge	zero,r8,28a0 <___vfprintf_internal_r+0x478>
    287c:	400f883a 	mov	r7,r8
    2880:	01800804 	movi	r6,32
    2884:	880b883a 	mov	r5,r17
    2888:	a009883a 	mov	r4,r20
    288c:	da001015 	stw	r8,64(sp)
    2890:	00023bc0 	call	23bc <print_repeat>
    2894:	da001017 	ldw	r8,64(sp)
    2898:	103fef1e 	bne	r2,zero,2858 <_gp+0xffff40dc>
    289c:	8221883a 	add	r16,r16,r8
    28a0:	88800117 	ldw	r2,4(r17)
    28a4:	b00f883a 	mov	r7,r22
    28a8:	b80d883a 	mov	r6,r23
    28ac:	880b883a 	mov	r5,r17
    28b0:	a009883a 	mov	r4,r20
    28b4:	103ee83a 	callr	r2
    28b8:	103fe71e 	bne	r2,zero,2858 <_gp+0xffff40dc>
    28bc:	85a1883a 	add	r16,r16,r22
    28c0:	e02d883a 	mov	r22,fp
    28c4:	00001106 	br	290c <___vfprintf_internal_r+0x4e4>
    28c8:	00c00044 	movi	r3,1
    28cc:	04ffffc4 	movi	r19,-1
    28d0:	d8000e15 	stw	zero,56(sp)
    28d4:	d8c00a15 	stw	r3,40(sp)
    28d8:	05400284 	movi	r21,10
    28dc:	9825883a 	mov	r18,r19
    28e0:	d8000c15 	stw	zero,48(sp)
    28e4:	d8000b15 	stw	zero,44(sp)
    28e8:	182f883a 	mov	r23,r3
    28ec:	00000806 	br	2910 <___vfprintf_internal_r+0x4e8>
    28f0:	ddc00b15 	stw	r23,44(sp)
    28f4:	05c00084 	movi	r23,2
    28f8:	00000506 	br	2910 <___vfprintf_internal_r+0x4e8>
    28fc:	00c00044 	movi	r3,1
    2900:	d8c00c15 	stw	r3,48(sp)
    2904:	05c000c4 	movi	r23,3
    2908:	00000106 	br	2910 <___vfprintf_internal_r+0x4e8>
    290c:	002f883a 	mov	r23,zero
    2910:	d8c00f17 	ldw	r3,60(sp)
    2914:	18c00044 	addi	r3,r3,1
    2918:	d8c00f15 	stw	r3,60(sp)
    291c:	003edc06 	br	2490 <_gp+0xffff3d14>
    2920:	8005883a 	mov	r2,r16
    2924:	dfc01a17 	ldw	ra,104(sp)
    2928:	df001917 	ldw	fp,100(sp)
    292c:	ddc01817 	ldw	r23,96(sp)
    2930:	dd801717 	ldw	r22,92(sp)
    2934:	dd401617 	ldw	r21,88(sp)
    2938:	dd001517 	ldw	r20,84(sp)
    293c:	dcc01417 	ldw	r19,80(sp)
    2940:	dc801317 	ldw	r18,76(sp)
    2944:	dc401217 	ldw	r17,72(sp)
    2948:	dc001117 	ldw	r16,68(sp)
    294c:	dec01b04 	addi	sp,sp,108
    2950:	f800283a 	ret

00002954 <__vfprintf_internal>:
    2954:	00800034 	movhi	r2,0
    2958:	1099e104 	addi	r2,r2,26500
    295c:	300f883a 	mov	r7,r6
    2960:	280d883a 	mov	r6,r5
    2964:	200b883a 	mov	r5,r4
    2968:	11000017 	ldw	r4,0(r2)
    296c:	00024281 	jmpi	2428 <___vfprintf_internal_r>

00002970 <__sfvwrite_small_dev>:
    2970:	2880000b 	ldhu	r2,0(r5)
    2974:	1080020c 	andi	r2,r2,8
    2978:	10002126 	beq	r2,zero,2a00 <__sfvwrite_small_dev+0x90>
    297c:	2880008f 	ldh	r2,2(r5)
    2980:	defffa04 	addi	sp,sp,-24
    2984:	dc000015 	stw	r16,0(sp)
    2988:	dfc00515 	stw	ra,20(sp)
    298c:	dd000415 	stw	r20,16(sp)
    2990:	dcc00315 	stw	r19,12(sp)
    2994:	dc800215 	stw	r18,8(sp)
    2998:	dc400115 	stw	r17,4(sp)
    299c:	2821883a 	mov	r16,r5
    29a0:	10001216 	blt	r2,zero,29ec <__sfvwrite_small_dev+0x7c>
    29a4:	2027883a 	mov	r19,r4
    29a8:	3025883a 	mov	r18,r6
    29ac:	3823883a 	mov	r17,r7
    29b0:	05010004 	movi	r20,1024
    29b4:	04400b0e 	bge	zero,r17,29e4 <__sfvwrite_small_dev+0x74>
    29b8:	880f883a 	mov	r7,r17
    29bc:	a440010e 	bge	r20,r17,29c4 <__sfvwrite_small_dev+0x54>
    29c0:	01c10004 	movi	r7,1024
    29c4:	8140008f 	ldh	r5,2(r16)
    29c8:	900d883a 	mov	r6,r18
    29cc:	9809883a 	mov	r4,r19
    29d0:	0002a280 	call	2a28 <_write_r>
    29d4:	0080050e 	bge	zero,r2,29ec <__sfvwrite_small_dev+0x7c>
    29d8:	88a3c83a 	sub	r17,r17,r2
    29dc:	90a5883a 	add	r18,r18,r2
    29e0:	003ff406 	br	29b4 <_gp+0xffff4238>
    29e4:	0005883a 	mov	r2,zero
    29e8:	00000706 	br	2a08 <__sfvwrite_small_dev+0x98>
    29ec:	8080000b 	ldhu	r2,0(r16)
    29f0:	10801014 	ori	r2,r2,64
    29f4:	8080000d 	sth	r2,0(r16)
    29f8:	00bfffc4 	movi	r2,-1
    29fc:	00000206 	br	2a08 <__sfvwrite_small_dev+0x98>
    2a00:	00bfffc4 	movi	r2,-1
    2a04:	f800283a 	ret
    2a08:	dfc00517 	ldw	ra,20(sp)
    2a0c:	dd000417 	ldw	r20,16(sp)
    2a10:	dcc00317 	ldw	r19,12(sp)
    2a14:	dc800217 	ldw	r18,8(sp)
    2a18:	dc400117 	ldw	r17,4(sp)
    2a1c:	dc000017 	ldw	r16,0(sp)
    2a20:	dec00604 	addi	sp,sp,24
    2a24:	f800283a 	ret

00002a28 <_write_r>:
    2a28:	defffd04 	addi	sp,sp,-12
    2a2c:	dc000015 	stw	r16,0(sp)
    2a30:	04000034 	movhi	r16,0
    2a34:	dc400115 	stw	r17,4(sp)
    2a38:	841eb204 	addi	r16,r16,31432
    2a3c:	2023883a 	mov	r17,r4
    2a40:	2809883a 	mov	r4,r5
    2a44:	300b883a 	mov	r5,r6
    2a48:	380d883a 	mov	r6,r7
    2a4c:	dfc00215 	stw	ra,8(sp)
    2a50:	80000015 	stw	zero,0(r16)
    2a54:	0002e200 	call	2e20 <write>
    2a58:	00ffffc4 	movi	r3,-1
    2a5c:	10c0031e 	bne	r2,r3,2a6c <_write_r+0x44>
    2a60:	80c00017 	ldw	r3,0(r16)
    2a64:	18000126 	beq	r3,zero,2a6c <_write_r+0x44>
    2a68:	88c00015 	stw	r3,0(r17)
    2a6c:	dfc00217 	ldw	ra,8(sp)
    2a70:	dc400117 	ldw	r17,4(sp)
    2a74:	dc000017 	ldw	r16,0(sp)
    2a78:	dec00304 	addi	sp,sp,12
    2a7c:	f800283a 	ret

00002a80 <__divsi3>:
    2a80:	20001b16 	blt	r4,zero,2af0 <__divsi3+0x70>
    2a84:	000f883a 	mov	r7,zero
    2a88:	28001616 	blt	r5,zero,2ae4 <__divsi3+0x64>
    2a8c:	200d883a 	mov	r6,r4
    2a90:	29001a2e 	bgeu	r5,r4,2afc <__divsi3+0x7c>
    2a94:	00800804 	movi	r2,32
    2a98:	00c00044 	movi	r3,1
    2a9c:	00000106 	br	2aa4 <__divsi3+0x24>
    2aa0:	10000d26 	beq	r2,zero,2ad8 <__divsi3+0x58>
    2aa4:	294b883a 	add	r5,r5,r5
    2aa8:	10bfffc4 	addi	r2,r2,-1
    2aac:	18c7883a 	add	r3,r3,r3
    2ab0:	293ffb36 	bltu	r5,r4,2aa0 <_gp+0xffff4324>
    2ab4:	0005883a 	mov	r2,zero
    2ab8:	18000726 	beq	r3,zero,2ad8 <__divsi3+0x58>
    2abc:	0005883a 	mov	r2,zero
    2ac0:	31400236 	bltu	r6,r5,2acc <__divsi3+0x4c>
    2ac4:	314dc83a 	sub	r6,r6,r5
    2ac8:	10c4b03a 	or	r2,r2,r3
    2acc:	1806d07a 	srli	r3,r3,1
    2ad0:	280ad07a 	srli	r5,r5,1
    2ad4:	183ffa1e 	bne	r3,zero,2ac0 <_gp+0xffff4344>
    2ad8:	38000126 	beq	r7,zero,2ae0 <__divsi3+0x60>
    2adc:	0085c83a 	sub	r2,zero,r2
    2ae0:	f800283a 	ret
    2ae4:	014bc83a 	sub	r5,zero,r5
    2ae8:	39c0005c 	xori	r7,r7,1
    2aec:	003fe706 	br	2a8c <_gp+0xffff4310>
    2af0:	0109c83a 	sub	r4,zero,r4
    2af4:	01c00044 	movi	r7,1
    2af8:	003fe306 	br	2a88 <_gp+0xffff430c>
    2afc:	00c00044 	movi	r3,1
    2b00:	003fee06 	br	2abc <_gp+0xffff4340>

00002b04 <__modsi3>:
    2b04:	20001716 	blt	r4,zero,2b64 <__modsi3+0x60>
    2b08:	000f883a 	mov	r7,zero
    2b0c:	2005883a 	mov	r2,r4
    2b10:	28001216 	blt	r5,zero,2b5c <__modsi3+0x58>
    2b14:	2900162e 	bgeu	r5,r4,2b70 <__modsi3+0x6c>
    2b18:	01800804 	movi	r6,32
    2b1c:	00c00044 	movi	r3,1
    2b20:	00000106 	br	2b28 <__modsi3+0x24>
    2b24:	30000a26 	beq	r6,zero,2b50 <__modsi3+0x4c>
    2b28:	294b883a 	add	r5,r5,r5
    2b2c:	31bfffc4 	addi	r6,r6,-1
    2b30:	18c7883a 	add	r3,r3,r3
    2b34:	293ffb36 	bltu	r5,r4,2b24 <_gp+0xffff43a8>
    2b38:	18000526 	beq	r3,zero,2b50 <__modsi3+0x4c>
    2b3c:	1806d07a 	srli	r3,r3,1
    2b40:	11400136 	bltu	r2,r5,2b48 <__modsi3+0x44>
    2b44:	1145c83a 	sub	r2,r2,r5
    2b48:	280ad07a 	srli	r5,r5,1
    2b4c:	183ffb1e 	bne	r3,zero,2b3c <_gp+0xffff43c0>
    2b50:	38000126 	beq	r7,zero,2b58 <__modsi3+0x54>
    2b54:	0085c83a 	sub	r2,zero,r2
    2b58:	f800283a 	ret
    2b5c:	014bc83a 	sub	r5,zero,r5
    2b60:	003fec06 	br	2b14 <_gp+0xffff4398>
    2b64:	0109c83a 	sub	r4,zero,r4
    2b68:	01c00044 	movi	r7,1
    2b6c:	003fe706 	br	2b0c <_gp+0xffff4390>
    2b70:	00c00044 	movi	r3,1
    2b74:	003ff106 	br	2b3c <_gp+0xffff43c0>

00002b78 <__udivsi3>:
    2b78:	200d883a 	mov	r6,r4
    2b7c:	2900152e 	bgeu	r5,r4,2bd4 <__udivsi3+0x5c>
    2b80:	28001416 	blt	r5,zero,2bd4 <__udivsi3+0x5c>
    2b84:	00800804 	movi	r2,32
    2b88:	00c00044 	movi	r3,1
    2b8c:	00000206 	br	2b98 <__udivsi3+0x20>
    2b90:	10000e26 	beq	r2,zero,2bcc <__udivsi3+0x54>
    2b94:	28000516 	blt	r5,zero,2bac <__udivsi3+0x34>
    2b98:	294b883a 	add	r5,r5,r5
    2b9c:	10bfffc4 	addi	r2,r2,-1
    2ba0:	18c7883a 	add	r3,r3,r3
    2ba4:	293ffa36 	bltu	r5,r4,2b90 <_gp+0xffff4414>
    2ba8:	18000826 	beq	r3,zero,2bcc <__udivsi3+0x54>
    2bac:	0005883a 	mov	r2,zero
    2bb0:	31400236 	bltu	r6,r5,2bbc <__udivsi3+0x44>
    2bb4:	314dc83a 	sub	r6,r6,r5
    2bb8:	10c4b03a 	or	r2,r2,r3
    2bbc:	1806d07a 	srli	r3,r3,1
    2bc0:	280ad07a 	srli	r5,r5,1
    2bc4:	183ffa1e 	bne	r3,zero,2bb0 <_gp+0xffff4434>
    2bc8:	f800283a 	ret
    2bcc:	0005883a 	mov	r2,zero
    2bd0:	f800283a 	ret
    2bd4:	00c00044 	movi	r3,1
    2bd8:	003ff406 	br	2bac <_gp+0xffff4430>

00002bdc <__umodsi3>:
    2bdc:	2005883a 	mov	r2,r4
    2be0:	2900122e 	bgeu	r5,r4,2c2c <__umodsi3+0x50>
    2be4:	28001116 	blt	r5,zero,2c2c <__umodsi3+0x50>
    2be8:	01800804 	movi	r6,32
    2bec:	00c00044 	movi	r3,1
    2bf0:	00000206 	br	2bfc <__umodsi3+0x20>
    2bf4:	30000c26 	beq	r6,zero,2c28 <__umodsi3+0x4c>
    2bf8:	28000516 	blt	r5,zero,2c10 <__umodsi3+0x34>
    2bfc:	294b883a 	add	r5,r5,r5
    2c00:	31bfffc4 	addi	r6,r6,-1
    2c04:	18c7883a 	add	r3,r3,r3
    2c08:	293ffa36 	bltu	r5,r4,2bf4 <_gp+0xffff4478>
    2c0c:	18000626 	beq	r3,zero,2c28 <__umodsi3+0x4c>
    2c10:	1806d07a 	srli	r3,r3,1
    2c14:	11400136 	bltu	r2,r5,2c1c <__umodsi3+0x40>
    2c18:	1145c83a 	sub	r2,r2,r5
    2c1c:	280ad07a 	srli	r5,r5,1
    2c20:	183ffb1e 	bne	r3,zero,2c10 <_gp+0xffff4494>
    2c24:	f800283a 	ret
    2c28:	f800283a 	ret
    2c2c:	00c00044 	movi	r3,1
    2c30:	003ff706 	br	2c10 <_gp+0xffff4494>

00002c34 <__mulsi3>:
    2c34:	0005883a 	mov	r2,zero
    2c38:	20000726 	beq	r4,zero,2c58 <__mulsi3+0x24>
    2c3c:	20c0004c 	andi	r3,r4,1
    2c40:	2008d07a 	srli	r4,r4,1
    2c44:	18000126 	beq	r3,zero,2c4c <__mulsi3+0x18>
    2c48:	1145883a 	add	r2,r2,r5
    2c4c:	294b883a 	add	r5,r5,r5
    2c50:	203ffa1e 	bne	r4,zero,2c3c <_gp+0xffff44c0>
    2c54:	f800283a 	ret
    2c58:	f800283a 	ret

00002c5c <alt_load_section>:
    2c5c:	defffc04 	addi	sp,sp,-16
    2c60:	df000315 	stw	fp,12(sp)
    2c64:	df000304 	addi	fp,sp,12
    2c68:	e13ffd15 	stw	r4,-12(fp)
    2c6c:	e17ffe15 	stw	r5,-8(fp)
    2c70:	e1bfff15 	stw	r6,-4(fp)
    2c74:	e0fffe17 	ldw	r3,-8(fp)
    2c78:	e0bffd17 	ldw	r2,-12(fp)
    2c7c:	18800c26 	beq	r3,r2,2cb0 <alt_load_section+0x54>
    2c80:	00000806 	br	2ca4 <alt_load_section+0x48>
    2c84:	e0bffe17 	ldw	r2,-8(fp)
    2c88:	10c00104 	addi	r3,r2,4
    2c8c:	e0fffe15 	stw	r3,-8(fp)
    2c90:	e0fffd17 	ldw	r3,-12(fp)
    2c94:	19000104 	addi	r4,r3,4
    2c98:	e13ffd15 	stw	r4,-12(fp)
    2c9c:	18c00017 	ldw	r3,0(r3)
    2ca0:	10c00015 	stw	r3,0(r2)
    2ca4:	e0fffe17 	ldw	r3,-8(fp)
    2ca8:	e0bfff17 	ldw	r2,-4(fp)
    2cac:	18bff51e 	bne	r3,r2,2c84 <_gp+0xffff4508>
    2cb0:	0001883a 	nop
    2cb4:	e037883a 	mov	sp,fp
    2cb8:	df000017 	ldw	fp,0(sp)
    2cbc:	dec00104 	addi	sp,sp,4
    2cc0:	f800283a 	ret

00002cc4 <alt_load>:
    2cc4:	defffe04 	addi	sp,sp,-8
    2cc8:	dfc00115 	stw	ra,4(sp)
    2ccc:	df000015 	stw	fp,0(sp)
    2cd0:	d839883a 	mov	fp,sp
    2cd4:	01800034 	movhi	r6,0
    2cd8:	3199eb04 	addi	r6,r6,26540
    2cdc:	01400034 	movhi	r5,0
    2ce0:	29552504 	addi	r5,r5,21652
    2ce4:	01000034 	movhi	r4,0
    2ce8:	2119eb04 	addi	r4,r4,26540
    2cec:	0002c5c0 	call	2c5c <alt_load_section>
    2cf0:	01800034 	movhi	r6,0
    2cf4:	31808c04 	addi	r6,r6,560
    2cf8:	01400034 	movhi	r5,0
    2cfc:	29400804 	addi	r5,r5,32
    2d00:	01000034 	movhi	r4,0
    2d04:	21000804 	addi	r4,r4,32
    2d08:	0002c5c0 	call	2c5c <alt_load_section>
    2d0c:	01800034 	movhi	r6,0
    2d10:	31952504 	addi	r6,r6,21652
    2d14:	01400034 	movhi	r5,0
    2d18:	29534a04 	addi	r5,r5,19752
    2d1c:	01000034 	movhi	r4,0
    2d20:	21134a04 	addi	r4,r4,19752
    2d24:	0002c5c0 	call	2c5c <alt_load_section>
    2d28:	0003dd80 	call	3dd8 <alt_dcache_flush_all>
    2d2c:	0003f040 	call	3f04 <alt_icache_flush_all>
    2d30:	0001883a 	nop
    2d34:	e037883a 	mov	sp,fp
    2d38:	dfc00117 	ldw	ra,4(sp)
    2d3c:	df000017 	ldw	fp,0(sp)
    2d40:	dec00204 	addi	sp,sp,8
    2d44:	f800283a 	ret

00002d48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2d48:	defffd04 	addi	sp,sp,-12
    2d4c:	dfc00215 	stw	ra,8(sp)
    2d50:	df000115 	stw	fp,4(sp)
    2d54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2d58:	0009883a 	mov	r4,zero
    2d5c:	0002f540 	call	2f54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    2d60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2d64:	0002f8c0 	call	2f8c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    2d68:	01800034 	movhi	r6,0
    2d6c:	31951804 	addi	r6,r6,21600
    2d70:	01400034 	movhi	r5,0
    2d74:	29551804 	addi	r5,r5,21600
    2d78:	01000034 	movhi	r4,0
    2d7c:	21151804 	addi	r4,r4,21600
    2d80:	00042a80 	call	42a8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    2d84:	d0a4d417 	ldw	r2,-27824(gp)
    2d88:	d0e4d517 	ldw	r3,-27820(gp)
    2d8c:	d124d617 	ldw	r4,-27816(gp)
    2d90:	200d883a 	mov	r6,r4
    2d94:	180b883a 	mov	r5,r3
    2d98:	1009883a 	mov	r4,r2
    2d9c:	00004080 	call	408 <main>
    2da0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    2da4:	01000044 	movi	r4,1
    2da8:	0003d000 	call	3d00 <close>
  exit (result);
    2dac:	e13fff17 	ldw	r4,-4(fp)
    2db0:	0004aec0 	call	4aec <exit>

00002db4 <usleep>:
    2db4:	defffd04 	addi	sp,sp,-12
    2db8:	dfc00215 	stw	ra,8(sp)
    2dbc:	df000115 	stw	fp,4(sp)
    2dc0:	df000104 	addi	fp,sp,4
    2dc4:	e13fff15 	stw	r4,-4(fp)
    2dc8:	e13fff17 	ldw	r4,-4(fp)
    2dcc:	0003b6c0 	call	3b6c <alt_busy_sleep>
    2dd0:	e037883a 	mov	sp,fp
    2dd4:	dfc00117 	ldw	ra,4(sp)
    2dd8:	df000017 	ldw	fp,0(sp)
    2ddc:	dec00204 	addi	sp,sp,8
    2de0:	f800283a 	ret

00002de4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2de4:	defffe04 	addi	sp,sp,-8
    2de8:	dfc00115 	stw	ra,4(sp)
    2dec:	df000015 	stw	fp,0(sp)
    2df0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2df4:	d0a00817 	ldw	r2,-32736(gp)
    2df8:	10000326 	beq	r2,zero,2e08 <alt_get_errno+0x24>
    2dfc:	d0a00817 	ldw	r2,-32736(gp)
    2e00:	103ee83a 	callr	r2
    2e04:	00000106 	br	2e0c <alt_get_errno+0x28>
    2e08:	d0a4d304 	addi	r2,gp,-27828
}
    2e0c:	e037883a 	mov	sp,fp
    2e10:	dfc00117 	ldw	ra,4(sp)
    2e14:	df000017 	ldw	fp,0(sp)
    2e18:	dec00204 	addi	sp,sp,8
    2e1c:	f800283a 	ret

00002e20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2e20:	defff904 	addi	sp,sp,-28
    2e24:	dfc00615 	stw	ra,24(sp)
    2e28:	df000515 	stw	fp,20(sp)
    2e2c:	df000504 	addi	fp,sp,20
    2e30:	e13ffd15 	stw	r4,-12(fp)
    2e34:	e17ffe15 	stw	r5,-8(fp)
    2e38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2e3c:	e0bffd17 	ldw	r2,-12(fp)
    2e40:	10000816 	blt	r2,zero,2e64 <write+0x44>
    2e44:	01400304 	movi	r5,12
    2e48:	e13ffd17 	ldw	r4,-12(fp)
    2e4c:	0002c340 	call	2c34 <__mulsi3>
    2e50:	1007883a 	mov	r3,r2
    2e54:	00800034 	movhi	r2,0
    2e58:	10997f04 	addi	r2,r2,26108
    2e5c:	1885883a 	add	r2,r3,r2
    2e60:	00000106 	br	2e68 <write+0x48>
    2e64:	0005883a 	mov	r2,zero
    2e68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2e6c:	e0bffb17 	ldw	r2,-20(fp)
    2e70:	10002126 	beq	r2,zero,2ef8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    2e74:	e0bffb17 	ldw	r2,-20(fp)
    2e78:	10800217 	ldw	r2,8(r2)
    2e7c:	108000cc 	andi	r2,r2,3
    2e80:	10001826 	beq	r2,zero,2ee4 <write+0xc4>
    2e84:	e0bffb17 	ldw	r2,-20(fp)
    2e88:	10800017 	ldw	r2,0(r2)
    2e8c:	10800617 	ldw	r2,24(r2)
    2e90:	10001426 	beq	r2,zero,2ee4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    2e94:	e0bffb17 	ldw	r2,-20(fp)
    2e98:	10800017 	ldw	r2,0(r2)
    2e9c:	10800617 	ldw	r2,24(r2)
    2ea0:	e0ffff17 	ldw	r3,-4(fp)
    2ea4:	180d883a 	mov	r6,r3
    2ea8:	e17ffe17 	ldw	r5,-8(fp)
    2eac:	e13ffb17 	ldw	r4,-20(fp)
    2eb0:	103ee83a 	callr	r2
    2eb4:	e0bffc15 	stw	r2,-16(fp)
    2eb8:	e0bffc17 	ldw	r2,-16(fp)
    2ebc:	1000070e 	bge	r2,zero,2edc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    2ec0:	0002de40 	call	2de4 <alt_get_errno>
    2ec4:	1007883a 	mov	r3,r2
    2ec8:	e0bffc17 	ldw	r2,-16(fp)
    2ecc:	0085c83a 	sub	r2,zero,r2
    2ed0:	18800015 	stw	r2,0(r3)
        return -1;
    2ed4:	00bfffc4 	movi	r2,-1
    2ed8:	00000c06 	br	2f0c <write+0xec>
      }
      return rval;
    2edc:	e0bffc17 	ldw	r2,-16(fp)
    2ee0:	00000a06 	br	2f0c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    2ee4:	0002de40 	call	2de4 <alt_get_errno>
    2ee8:	1007883a 	mov	r3,r2
    2eec:	00800344 	movi	r2,13
    2ef0:	18800015 	stw	r2,0(r3)
    2ef4:	00000406 	br	2f08 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    2ef8:	0002de40 	call	2de4 <alt_get_errno>
    2efc:	1007883a 	mov	r3,r2
    2f00:	00801444 	movi	r2,81
    2f04:	18800015 	stw	r2,0(r3)
  }
  return -1;
    2f08:	00bfffc4 	movi	r2,-1
}
    2f0c:	e037883a 	mov	sp,fp
    2f10:	dfc00117 	ldw	ra,4(sp)
    2f14:	df000017 	ldw	fp,0(sp)
    2f18:	dec00204 	addi	sp,sp,8
    2f1c:	f800283a 	ret

00002f20 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    2f20:	defffd04 	addi	sp,sp,-12
    2f24:	dfc00215 	stw	ra,8(sp)
    2f28:	df000115 	stw	fp,4(sp)
    2f2c:	df000104 	addi	fp,sp,4
    2f30:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    2f34:	d1600504 	addi	r5,gp,-32748
    2f38:	e13fff17 	ldw	r4,-4(fp)
    2f3c:	0003e600 	call	3e60 <alt_dev_llist_insert>
}
    2f40:	e037883a 	mov	sp,fp
    2f44:	dfc00117 	ldw	ra,4(sp)
    2f48:	df000017 	ldw	fp,0(sp)
    2f4c:	dec00204 	addi	sp,sp,8
    2f50:	f800283a 	ret

00002f54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2f54:	defffd04 	addi	sp,sp,-12
    2f58:	dfc00215 	stw	ra,8(sp)
    2f5c:	df000115 	stw	fp,4(sp)
    2f60:	df000104 	addi	fp,sp,4
    2f64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( USB_KB_SOC, USB_kb_soc);
    2f68:	00047d00 	call	47d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2f6c:	00800044 	movi	r2,1
    2f70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2f74:	0001883a 	nop
    2f78:	e037883a 	mov	sp,fp
    2f7c:	dfc00117 	ldw	ra,4(sp)
    2f80:	df000017 	ldw	fp,0(sp)
    2f84:	dec00204 	addi	sp,sp,8
    2f88:	f800283a 	ret

00002f8c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2f8c:	defffe04 	addi	sp,sp,-8
    2f90:	dfc00115 	stw	ra,4(sp)
    2f94:	df000015 	stw	fp,0(sp)
    2f98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( USB_JTAG_UART, USB_jtag_uart);
    2f9c:	01800144 	movi	r6,5
    2fa0:	000b883a 	mov	r5,zero
    2fa4:	01000034 	movhi	r4,0
    2fa8:	21156704 	addi	r4,r4,21916
    2fac:	000313c0 	call	313c <altera_avalon_jtag_uart_init>
    2fb0:	01000034 	movhi	r4,0
    2fb4:	21155d04 	addi	r4,r4,21876
    2fb8:	0002f200 	call	2f20 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( USB_SYS_ID, USB_sys_id);
    2fbc:	0001883a 	nop
}
    2fc0:	0001883a 	nop
    2fc4:	e037883a 	mov	sp,fp
    2fc8:	dfc00117 	ldw	ra,4(sp)
    2fcc:	df000017 	ldw	fp,0(sp)
    2fd0:	dec00204 	addi	sp,sp,8
    2fd4:	f800283a 	ret

00002fd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    2fd8:	defffa04 	addi	sp,sp,-24
    2fdc:	dfc00515 	stw	ra,20(sp)
    2fe0:	df000415 	stw	fp,16(sp)
    2fe4:	df000404 	addi	fp,sp,16
    2fe8:	e13ffd15 	stw	r4,-12(fp)
    2fec:	e17ffe15 	stw	r5,-8(fp)
    2ff0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2ff4:	e0bffd17 	ldw	r2,-12(fp)
    2ff8:	10800017 	ldw	r2,0(r2)
    2ffc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3000:	e0bffc17 	ldw	r2,-16(fp)
    3004:	10c00a04 	addi	r3,r2,40
    3008:	e0bffd17 	ldw	r2,-12(fp)
    300c:	10800217 	ldw	r2,8(r2)
    3010:	100f883a 	mov	r7,r2
    3014:	e1bfff17 	ldw	r6,-4(fp)
    3018:	e17ffe17 	ldw	r5,-8(fp)
    301c:	1809883a 	mov	r4,r3
    3020:	00036000 	call	3600 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3024:	e037883a 	mov	sp,fp
    3028:	dfc00117 	ldw	ra,4(sp)
    302c:	df000017 	ldw	fp,0(sp)
    3030:	dec00204 	addi	sp,sp,8
    3034:	f800283a 	ret

00003038 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3038:	defffa04 	addi	sp,sp,-24
    303c:	dfc00515 	stw	ra,20(sp)
    3040:	df000415 	stw	fp,16(sp)
    3044:	df000404 	addi	fp,sp,16
    3048:	e13ffd15 	stw	r4,-12(fp)
    304c:	e17ffe15 	stw	r5,-8(fp)
    3050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3054:	e0bffd17 	ldw	r2,-12(fp)
    3058:	10800017 	ldw	r2,0(r2)
    305c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3060:	e0bffc17 	ldw	r2,-16(fp)
    3064:	10c00a04 	addi	r3,r2,40
    3068:	e0bffd17 	ldw	r2,-12(fp)
    306c:	10800217 	ldw	r2,8(r2)
    3070:	100f883a 	mov	r7,r2
    3074:	e1bfff17 	ldw	r6,-4(fp)
    3078:	e17ffe17 	ldw	r5,-8(fp)
    307c:	1809883a 	mov	r4,r3
    3080:	000381c0 	call	381c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3084:	e037883a 	mov	sp,fp
    3088:	dfc00117 	ldw	ra,4(sp)
    308c:	df000017 	ldw	fp,0(sp)
    3090:	dec00204 	addi	sp,sp,8
    3094:	f800283a 	ret

00003098 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3098:	defffc04 	addi	sp,sp,-16
    309c:	dfc00315 	stw	ra,12(sp)
    30a0:	df000215 	stw	fp,8(sp)
    30a4:	df000204 	addi	fp,sp,8
    30a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    30ac:	e0bfff17 	ldw	r2,-4(fp)
    30b0:	10800017 	ldw	r2,0(r2)
    30b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    30b8:	e0bffe17 	ldw	r2,-8(fp)
    30bc:	10c00a04 	addi	r3,r2,40
    30c0:	e0bfff17 	ldw	r2,-4(fp)
    30c4:	10800217 	ldw	r2,8(r2)
    30c8:	100b883a 	mov	r5,r2
    30cc:	1809883a 	mov	r4,r3
    30d0:	00034a80 	call	34a8 <altera_avalon_jtag_uart_close>
}
    30d4:	e037883a 	mov	sp,fp
    30d8:	dfc00117 	ldw	ra,4(sp)
    30dc:	df000017 	ldw	fp,0(sp)
    30e0:	dec00204 	addi	sp,sp,8
    30e4:	f800283a 	ret

000030e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    30e8:	defffa04 	addi	sp,sp,-24
    30ec:	dfc00515 	stw	ra,20(sp)
    30f0:	df000415 	stw	fp,16(sp)
    30f4:	df000404 	addi	fp,sp,16
    30f8:	e13ffd15 	stw	r4,-12(fp)
    30fc:	e17ffe15 	stw	r5,-8(fp)
    3100:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3104:	e0bffd17 	ldw	r2,-12(fp)
    3108:	10800017 	ldw	r2,0(r2)
    310c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3110:	e0bffc17 	ldw	r2,-16(fp)
    3114:	10800a04 	addi	r2,r2,40
    3118:	e1bfff17 	ldw	r6,-4(fp)
    311c:	e17ffe17 	ldw	r5,-8(fp)
    3120:	1009883a 	mov	r4,r2
    3124:	00035100 	call	3510 <altera_avalon_jtag_uart_ioctl>
}
    3128:	e037883a 	mov	sp,fp
    312c:	dfc00117 	ldw	ra,4(sp)
    3130:	df000017 	ldw	fp,0(sp)
    3134:	dec00204 	addi	sp,sp,8
    3138:	f800283a 	ret

0000313c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    313c:	defffa04 	addi	sp,sp,-24
    3140:	dfc00515 	stw	ra,20(sp)
    3144:	df000415 	stw	fp,16(sp)
    3148:	df000404 	addi	fp,sp,16
    314c:	e13ffd15 	stw	r4,-12(fp)
    3150:	e17ffe15 	stw	r5,-8(fp)
    3154:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3158:	e0bffd17 	ldw	r2,-12(fp)
    315c:	00c00044 	movi	r3,1
    3160:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3164:	e0bffd17 	ldw	r2,-12(fp)
    3168:	10800017 	ldw	r2,0(r2)
    316c:	10800104 	addi	r2,r2,4
    3170:	1007883a 	mov	r3,r2
    3174:	e0bffd17 	ldw	r2,-12(fp)
    3178:	10800817 	ldw	r2,32(r2)
    317c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3180:	e0bffe17 	ldw	r2,-8(fp)
    3184:	e0ffff17 	ldw	r3,-4(fp)
    3188:	d8000015 	stw	zero,0(sp)
    318c:	e1fffd17 	ldw	r7,-12(fp)
    3190:	01800034 	movhi	r6,0
    3194:	318c7f04 	addi	r6,r6,12796
    3198:	180b883a 	mov	r5,r3
    319c:	1009883a 	mov	r4,r2
    31a0:	0003f240 	call	3f24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    31a4:	e0bffd17 	ldw	r2,-12(fp)
    31a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    31ac:	e0bffd17 	ldw	r2,-12(fp)
    31b0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    31b4:	d0e4d817 	ldw	r3,-27808(gp)
    31b8:	e1fffd17 	ldw	r7,-12(fp)
    31bc:	01800034 	movhi	r6,0
    31c0:	318d0204 	addi	r6,r6,13320
    31c4:	180b883a 	mov	r5,r3
    31c8:	1009883a 	mov	r4,r2
    31cc:	0003a400 	call	3a40 <alt_alarm_start>
    31d0:	1000040e 	bge	r2,zero,31e4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    31d4:	e0fffd17 	ldw	r3,-12(fp)
    31d8:	00a00034 	movhi	r2,32768
    31dc:	10bfffc4 	addi	r2,r2,-1
    31e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    31e4:	0001883a 	nop
    31e8:	e037883a 	mov	sp,fp
    31ec:	dfc00117 	ldw	ra,4(sp)
    31f0:	df000017 	ldw	fp,0(sp)
    31f4:	dec00204 	addi	sp,sp,8
    31f8:	f800283a 	ret

000031fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    31fc:	defff804 	addi	sp,sp,-32
    3200:	df000715 	stw	fp,28(sp)
    3204:	df000704 	addi	fp,sp,28
    3208:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    320c:	e0bfff17 	ldw	r2,-4(fp)
    3210:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    3214:	e0bffb17 	ldw	r2,-20(fp)
    3218:	10800017 	ldw	r2,0(r2)
    321c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3220:	e0bffc17 	ldw	r2,-16(fp)
    3224:	10800104 	addi	r2,r2,4
    3228:	10800037 	ldwio	r2,0(r2)
    322c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3230:	e0bffd17 	ldw	r2,-12(fp)
    3234:	1080c00c 	andi	r2,r2,768
    3238:	10006d26 	beq	r2,zero,33f0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    323c:	e0bffd17 	ldw	r2,-12(fp)
    3240:	1080400c 	andi	r2,r2,256
    3244:	10003526 	beq	r2,zero,331c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3248:	00800074 	movhi	r2,1
    324c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3250:	e0bffb17 	ldw	r2,-20(fp)
    3254:	10800a17 	ldw	r2,40(r2)
    3258:	10800044 	addi	r2,r2,1
    325c:	1081ffcc 	andi	r2,r2,2047
    3260:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    3264:	e0bffb17 	ldw	r2,-20(fp)
    3268:	10c00b17 	ldw	r3,44(r2)
    326c:	e0bffe17 	ldw	r2,-8(fp)
    3270:	18801526 	beq	r3,r2,32c8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3274:	e0bffc17 	ldw	r2,-16(fp)
    3278:	10800037 	ldwio	r2,0(r2)
    327c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3280:	e0bff917 	ldw	r2,-28(fp)
    3284:	10a0000c 	andi	r2,r2,32768
    3288:	10001126 	beq	r2,zero,32d0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    328c:	e0bffb17 	ldw	r2,-20(fp)
    3290:	10800a17 	ldw	r2,40(r2)
    3294:	e0fff917 	ldw	r3,-28(fp)
    3298:	1809883a 	mov	r4,r3
    329c:	e0fffb17 	ldw	r3,-20(fp)
    32a0:	1885883a 	add	r2,r3,r2
    32a4:	10800e04 	addi	r2,r2,56
    32a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    32ac:	e0bffb17 	ldw	r2,-20(fp)
    32b0:	10800a17 	ldw	r2,40(r2)
    32b4:	10800044 	addi	r2,r2,1
    32b8:	10c1ffcc 	andi	r3,r2,2047
    32bc:	e0bffb17 	ldw	r2,-20(fp)
    32c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    32c4:	003fe206 	br	3250 <_gp+0xffff4ad4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    32c8:	0001883a 	nop
    32cc:	00000106 	br	32d4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    32d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    32d4:	e0bff917 	ldw	r2,-28(fp)
    32d8:	10bfffec 	andhi	r2,r2,65535
    32dc:	10000f26 	beq	r2,zero,331c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    32e0:	e0bffb17 	ldw	r2,-20(fp)
    32e4:	10c00817 	ldw	r3,32(r2)
    32e8:	00bfff84 	movi	r2,-2
    32ec:	1886703a 	and	r3,r3,r2
    32f0:	e0bffb17 	ldw	r2,-20(fp)
    32f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    32f8:	e0bffc17 	ldw	r2,-16(fp)
    32fc:	10800104 	addi	r2,r2,4
    3300:	1007883a 	mov	r3,r2
    3304:	e0bffb17 	ldw	r2,-20(fp)
    3308:	10800817 	ldw	r2,32(r2)
    330c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3310:	e0bffc17 	ldw	r2,-16(fp)
    3314:	10800104 	addi	r2,r2,4
    3318:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    331c:	e0bffd17 	ldw	r2,-12(fp)
    3320:	1080800c 	andi	r2,r2,512
    3324:	103fbe26 	beq	r2,zero,3220 <_gp+0xffff4aa4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    3328:	e0bffd17 	ldw	r2,-12(fp)
    332c:	1004d43a 	srli	r2,r2,16
    3330:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    3334:	00001406 	br	3388 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    3338:	e0bffc17 	ldw	r2,-16(fp)
    333c:	e0fffb17 	ldw	r3,-20(fp)
    3340:	18c00d17 	ldw	r3,52(r3)
    3344:	e13ffb17 	ldw	r4,-20(fp)
    3348:	20c7883a 	add	r3,r4,r3
    334c:	18c20e04 	addi	r3,r3,2104
    3350:	18c00003 	ldbu	r3,0(r3)
    3354:	18c03fcc 	andi	r3,r3,255
    3358:	18c0201c 	xori	r3,r3,128
    335c:	18ffe004 	addi	r3,r3,-128
    3360:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3364:	e0bffb17 	ldw	r2,-20(fp)
    3368:	10800d17 	ldw	r2,52(r2)
    336c:	10800044 	addi	r2,r2,1
    3370:	10c1ffcc 	andi	r3,r2,2047
    3374:	e0bffb17 	ldw	r2,-20(fp)
    3378:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    337c:	e0bffa17 	ldw	r2,-24(fp)
    3380:	10bfffc4 	addi	r2,r2,-1
    3384:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    3388:	e0bffa17 	ldw	r2,-24(fp)
    338c:	10000526 	beq	r2,zero,33a4 <altera_avalon_jtag_uart_irq+0x1a8>
    3390:	e0bffb17 	ldw	r2,-20(fp)
    3394:	10c00d17 	ldw	r3,52(r2)
    3398:	e0bffb17 	ldw	r2,-20(fp)
    339c:	10800c17 	ldw	r2,48(r2)
    33a0:	18bfe51e 	bne	r3,r2,3338 <_gp+0xffff4bbc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    33a4:	e0bffa17 	ldw	r2,-24(fp)
    33a8:	103f9d26 	beq	r2,zero,3220 <_gp+0xffff4aa4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    33ac:	e0bffb17 	ldw	r2,-20(fp)
    33b0:	10c00817 	ldw	r3,32(r2)
    33b4:	00bfff44 	movi	r2,-3
    33b8:	1886703a 	and	r3,r3,r2
    33bc:	e0bffb17 	ldw	r2,-20(fp)
    33c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    33c4:	e0bffb17 	ldw	r2,-20(fp)
    33c8:	10800017 	ldw	r2,0(r2)
    33cc:	10800104 	addi	r2,r2,4
    33d0:	1007883a 	mov	r3,r2
    33d4:	e0bffb17 	ldw	r2,-20(fp)
    33d8:	10800817 	ldw	r2,32(r2)
    33dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    33e0:	e0bffc17 	ldw	r2,-16(fp)
    33e4:	10800104 	addi	r2,r2,4
    33e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    33ec:	003f8c06 	br	3220 <_gp+0xffff4aa4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    33f0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    33f4:	0001883a 	nop
    33f8:	e037883a 	mov	sp,fp
    33fc:	df000017 	ldw	fp,0(sp)
    3400:	dec00104 	addi	sp,sp,4
    3404:	f800283a 	ret

00003408 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    3408:	defff804 	addi	sp,sp,-32
    340c:	df000715 	stw	fp,28(sp)
    3410:	df000704 	addi	fp,sp,28
    3414:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    3418:	e0bffb17 	ldw	r2,-20(fp)
    341c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    3420:	e0bff917 	ldw	r2,-28(fp)
    3424:	10800017 	ldw	r2,0(r2)
    3428:	10800104 	addi	r2,r2,4
    342c:	10800037 	ldwio	r2,0(r2)
    3430:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    3434:	e0bffa17 	ldw	r2,-24(fp)
    3438:	1081000c 	andi	r2,r2,1024
    343c:	10000b26 	beq	r2,zero,346c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    3440:	e0bff917 	ldw	r2,-28(fp)
    3444:	10800017 	ldw	r2,0(r2)
    3448:	10800104 	addi	r2,r2,4
    344c:	1007883a 	mov	r3,r2
    3450:	e0bff917 	ldw	r2,-28(fp)
    3454:	10800817 	ldw	r2,32(r2)
    3458:	10810014 	ori	r2,r2,1024
    345c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    3460:	e0bff917 	ldw	r2,-28(fp)
    3464:	10000915 	stw	zero,36(r2)
    3468:	00000a06 	br	3494 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    346c:	e0bff917 	ldw	r2,-28(fp)
    3470:	10c00917 	ldw	r3,36(r2)
    3474:	00a00034 	movhi	r2,32768
    3478:	10bfff04 	addi	r2,r2,-4
    347c:	10c00536 	bltu	r2,r3,3494 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    3480:	e0bff917 	ldw	r2,-28(fp)
    3484:	10800917 	ldw	r2,36(r2)
    3488:	10c00044 	addi	r3,r2,1
    348c:	e0bff917 	ldw	r2,-28(fp)
    3490:	10c00915 	stw	r3,36(r2)
    3494:	d0a4d817 	ldw	r2,-27808(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    3498:	e037883a 	mov	sp,fp
    349c:	df000017 	ldw	fp,0(sp)
    34a0:	dec00104 	addi	sp,sp,4
    34a4:	f800283a 	ret

000034a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    34a8:	defffd04 	addi	sp,sp,-12
    34ac:	df000215 	stw	fp,8(sp)
    34b0:	df000204 	addi	fp,sp,8
    34b4:	e13ffe15 	stw	r4,-8(fp)
    34b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    34bc:	00000506 	br	34d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    34c0:	e0bfff17 	ldw	r2,-4(fp)
    34c4:	1090000c 	andi	r2,r2,16384
    34c8:	10000226 	beq	r2,zero,34d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    34cc:	00bffd44 	movi	r2,-11
    34d0:	00000b06 	br	3500 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    34d4:	e0bffe17 	ldw	r2,-8(fp)
    34d8:	10c00d17 	ldw	r3,52(r2)
    34dc:	e0bffe17 	ldw	r2,-8(fp)
    34e0:	10800c17 	ldw	r2,48(r2)
    34e4:	18800526 	beq	r3,r2,34fc <altera_avalon_jtag_uart_close+0x54>
    34e8:	e0bffe17 	ldw	r2,-8(fp)
    34ec:	10c00917 	ldw	r3,36(r2)
    34f0:	e0bffe17 	ldw	r2,-8(fp)
    34f4:	10800117 	ldw	r2,4(r2)
    34f8:	18bff136 	bltu	r3,r2,34c0 <_gp+0xffff4d44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    34fc:	0005883a 	mov	r2,zero
}
    3500:	e037883a 	mov	sp,fp
    3504:	df000017 	ldw	fp,0(sp)
    3508:	dec00104 	addi	sp,sp,4
    350c:	f800283a 	ret

00003510 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    3510:	defffa04 	addi	sp,sp,-24
    3514:	df000515 	stw	fp,20(sp)
    3518:	df000504 	addi	fp,sp,20
    351c:	e13ffd15 	stw	r4,-12(fp)
    3520:	e17ffe15 	stw	r5,-8(fp)
    3524:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    3528:	00bff9c4 	movi	r2,-25
    352c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    3530:	e0bffe17 	ldw	r2,-8(fp)
    3534:	10da8060 	cmpeqi	r3,r2,27137
    3538:	1800031e 	bne	r3,zero,3548 <altera_avalon_jtag_uart_ioctl+0x38>
    353c:	109a80a0 	cmpeqi	r2,r2,27138
    3540:	1000181e 	bne	r2,zero,35a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    3544:	00002906 	br	35ec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    3548:	e0bffd17 	ldw	r2,-12(fp)
    354c:	10c00117 	ldw	r3,4(r2)
    3550:	00a00034 	movhi	r2,32768
    3554:	10bfffc4 	addi	r2,r2,-1
    3558:	18802126 	beq	r3,r2,35e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    355c:	e0bfff17 	ldw	r2,-4(fp)
    3560:	10800017 	ldw	r2,0(r2)
    3564:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    3568:	e0bffc17 	ldw	r2,-16(fp)
    356c:	10800090 	cmplti	r2,r2,2
    3570:	1000061e 	bne	r2,zero,358c <altera_avalon_jtag_uart_ioctl+0x7c>
    3574:	e0fffc17 	ldw	r3,-16(fp)
    3578:	00a00034 	movhi	r2,32768
    357c:	10bfffc4 	addi	r2,r2,-1
    3580:	18800226 	beq	r3,r2,358c <altera_avalon_jtag_uart_ioctl+0x7c>
    3584:	e0bffc17 	ldw	r2,-16(fp)
    3588:	00000206 	br	3594 <altera_avalon_jtag_uart_ioctl+0x84>
    358c:	00a00034 	movhi	r2,32768
    3590:	10bfff84 	addi	r2,r2,-2
    3594:	e0fffd17 	ldw	r3,-12(fp)
    3598:	18800115 	stw	r2,4(r3)
      rc = 0;
    359c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    35a0:	00000f06 	br	35e0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    35a4:	e0bffd17 	ldw	r2,-12(fp)
    35a8:	10c00117 	ldw	r3,4(r2)
    35ac:	00a00034 	movhi	r2,32768
    35b0:	10bfffc4 	addi	r2,r2,-1
    35b4:	18800c26 	beq	r3,r2,35e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    35b8:	e0bffd17 	ldw	r2,-12(fp)
    35bc:	10c00917 	ldw	r3,36(r2)
    35c0:	e0bffd17 	ldw	r2,-12(fp)
    35c4:	10800117 	ldw	r2,4(r2)
    35c8:	1885803a 	cmpltu	r2,r3,r2
    35cc:	10c03fcc 	andi	r3,r2,255
    35d0:	e0bfff17 	ldw	r2,-4(fp)
    35d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
    35d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    35dc:	00000206 	br	35e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    35e0:	0001883a 	nop
    35e4:	00000106 	br	35ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    35e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    35ec:	e0bffb17 	ldw	r2,-20(fp)
}
    35f0:	e037883a 	mov	sp,fp
    35f4:	df000017 	ldw	fp,0(sp)
    35f8:	dec00104 	addi	sp,sp,4
    35fc:	f800283a 	ret

00003600 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    3600:	defff304 	addi	sp,sp,-52
    3604:	dfc00c15 	stw	ra,48(sp)
    3608:	df000b15 	stw	fp,44(sp)
    360c:	df000b04 	addi	fp,sp,44
    3610:	e13ffc15 	stw	r4,-16(fp)
    3614:	e17ffd15 	stw	r5,-12(fp)
    3618:	e1bffe15 	stw	r6,-8(fp)
    361c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    3620:	e0bffd17 	ldw	r2,-12(fp)
    3624:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    3628:	00004706 	br	3748 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    362c:	e0bffc17 	ldw	r2,-16(fp)
    3630:	10800a17 	ldw	r2,40(r2)
    3634:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    3638:	e0bffc17 	ldw	r2,-16(fp)
    363c:	10800b17 	ldw	r2,44(r2)
    3640:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    3644:	e0fff717 	ldw	r3,-36(fp)
    3648:	e0bff817 	ldw	r2,-32(fp)
    364c:	18800536 	bltu	r3,r2,3664 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    3650:	e0fff717 	ldw	r3,-36(fp)
    3654:	e0bff817 	ldw	r2,-32(fp)
    3658:	1885c83a 	sub	r2,r3,r2
    365c:	e0bff615 	stw	r2,-40(fp)
    3660:	00000406 	br	3674 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    3664:	00c20004 	movi	r3,2048
    3668:	e0bff817 	ldw	r2,-32(fp)
    366c:	1885c83a 	sub	r2,r3,r2
    3670:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    3674:	e0bff617 	ldw	r2,-40(fp)
    3678:	10001e26 	beq	r2,zero,36f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    367c:	e0fffe17 	ldw	r3,-8(fp)
    3680:	e0bff617 	ldw	r2,-40(fp)
    3684:	1880022e 	bgeu	r3,r2,3690 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    3688:	e0bffe17 	ldw	r2,-8(fp)
    368c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    3690:	e0bffc17 	ldw	r2,-16(fp)
    3694:	10c00e04 	addi	r3,r2,56
    3698:	e0bff817 	ldw	r2,-32(fp)
    369c:	1885883a 	add	r2,r3,r2
    36a0:	e1bff617 	ldw	r6,-40(fp)
    36a4:	100b883a 	mov	r5,r2
    36a8:	e13ff517 	ldw	r4,-44(fp)
    36ac:	0004b3c0 	call	4b3c <memcpy>
      ptr   += n;
    36b0:	e0fff517 	ldw	r3,-44(fp)
    36b4:	e0bff617 	ldw	r2,-40(fp)
    36b8:	1885883a 	add	r2,r3,r2
    36bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    36c0:	e0fffe17 	ldw	r3,-8(fp)
    36c4:	e0bff617 	ldw	r2,-40(fp)
    36c8:	1885c83a 	sub	r2,r3,r2
    36cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    36d0:	e0fff817 	ldw	r3,-32(fp)
    36d4:	e0bff617 	ldw	r2,-40(fp)
    36d8:	1885883a 	add	r2,r3,r2
    36dc:	10c1ffcc 	andi	r3,r2,2047
    36e0:	e0bffc17 	ldw	r2,-16(fp)
    36e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    36e8:	e0bffe17 	ldw	r2,-8(fp)
    36ec:	00bfcf16 	blt	zero,r2,362c <_gp+0xffff4eb0>
    36f0:	00000106 	br	36f8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    36f4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    36f8:	e0fff517 	ldw	r3,-44(fp)
    36fc:	e0bffd17 	ldw	r2,-12(fp)
    3700:	1880141e 	bne	r3,r2,3754 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    3704:	e0bfff17 	ldw	r2,-4(fp)
    3708:	1090000c 	andi	r2,r2,16384
    370c:	1000131e 	bne	r2,zero,375c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    3710:	0001883a 	nop
    3714:	e0bffc17 	ldw	r2,-16(fp)
    3718:	10c00a17 	ldw	r3,40(r2)
    371c:	e0bff717 	ldw	r2,-36(fp)
    3720:	1880051e 	bne	r3,r2,3738 <altera_avalon_jtag_uart_read+0x138>
    3724:	e0bffc17 	ldw	r2,-16(fp)
    3728:	10c00917 	ldw	r3,36(r2)
    372c:	e0bffc17 	ldw	r2,-16(fp)
    3730:	10800117 	ldw	r2,4(r2)
    3734:	18bff736 	bltu	r3,r2,3714 <_gp+0xffff4f98>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    3738:	e0bffc17 	ldw	r2,-16(fp)
    373c:	10c00a17 	ldw	r3,40(r2)
    3740:	e0bff717 	ldw	r2,-36(fp)
    3744:	18800726 	beq	r3,r2,3764 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    3748:	e0bffe17 	ldw	r2,-8(fp)
    374c:	00bfb716 	blt	zero,r2,362c <_gp+0xffff4eb0>
    3750:	00000506 	br	3768 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    3754:	0001883a 	nop
    3758:	00000306 	br	3768 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    375c:	0001883a 	nop
    3760:	00000106 	br	3768 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    3764:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    3768:	e0fff517 	ldw	r3,-44(fp)
    376c:	e0bffd17 	ldw	r2,-12(fp)
    3770:	18801826 	beq	r3,r2,37d4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3774:	0005303a 	rdctl	r2,status
    3778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    377c:	e0fffb17 	ldw	r3,-20(fp)
    3780:	00bfff84 	movi	r2,-2
    3784:	1884703a 	and	r2,r3,r2
    3788:	1001703a 	wrctl	status,r2
  
  return context;
    378c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    3790:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3794:	e0bffc17 	ldw	r2,-16(fp)
    3798:	10800817 	ldw	r2,32(r2)
    379c:	10c00054 	ori	r3,r2,1
    37a0:	e0bffc17 	ldw	r2,-16(fp)
    37a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    37a8:	e0bffc17 	ldw	r2,-16(fp)
    37ac:	10800017 	ldw	r2,0(r2)
    37b0:	10800104 	addi	r2,r2,4
    37b4:	1007883a 	mov	r3,r2
    37b8:	e0bffc17 	ldw	r2,-16(fp)
    37bc:	10800817 	ldw	r2,32(r2)
    37c0:	18800035 	stwio	r2,0(r3)
    37c4:	e0bffa17 	ldw	r2,-24(fp)
    37c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    37cc:	e0bff917 	ldw	r2,-28(fp)
    37d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    37d4:	e0fff517 	ldw	r3,-44(fp)
    37d8:	e0bffd17 	ldw	r2,-12(fp)
    37dc:	18800426 	beq	r3,r2,37f0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    37e0:	e0fff517 	ldw	r3,-44(fp)
    37e4:	e0bffd17 	ldw	r2,-12(fp)
    37e8:	1885c83a 	sub	r2,r3,r2
    37ec:	00000606 	br	3808 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    37f0:	e0bfff17 	ldw	r2,-4(fp)
    37f4:	1090000c 	andi	r2,r2,16384
    37f8:	10000226 	beq	r2,zero,3804 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    37fc:	00bffd44 	movi	r2,-11
    3800:	00000106 	br	3808 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    3804:	00bffec4 	movi	r2,-5
}
    3808:	e037883a 	mov	sp,fp
    380c:	dfc00117 	ldw	ra,4(sp)
    3810:	df000017 	ldw	fp,0(sp)
    3814:	dec00204 	addi	sp,sp,8
    3818:	f800283a 	ret

0000381c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    381c:	defff304 	addi	sp,sp,-52
    3820:	dfc00c15 	stw	ra,48(sp)
    3824:	df000b15 	stw	fp,44(sp)
    3828:	df000b04 	addi	fp,sp,44
    382c:	e13ffc15 	stw	r4,-16(fp)
    3830:	e17ffd15 	stw	r5,-12(fp)
    3834:	e1bffe15 	stw	r6,-8(fp)
    3838:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    383c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    3840:	e0bffd17 	ldw	r2,-12(fp)
    3844:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    3848:	00003706 	br	3928 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    384c:	e0bffc17 	ldw	r2,-16(fp)
    3850:	10800c17 	ldw	r2,48(r2)
    3854:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    3858:	e0bffc17 	ldw	r2,-16(fp)
    385c:	10800d17 	ldw	r2,52(r2)
    3860:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    3864:	e0fff917 	ldw	r3,-28(fp)
    3868:	e0bff517 	ldw	r2,-44(fp)
    386c:	1880062e 	bgeu	r3,r2,3888 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    3870:	e0fff517 	ldw	r3,-44(fp)
    3874:	e0bff917 	ldw	r2,-28(fp)
    3878:	1885c83a 	sub	r2,r3,r2
    387c:	10bfffc4 	addi	r2,r2,-1
    3880:	e0bff615 	stw	r2,-40(fp)
    3884:	00000b06 	br	38b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    3888:	e0bff517 	ldw	r2,-44(fp)
    388c:	10000526 	beq	r2,zero,38a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    3890:	00c20004 	movi	r3,2048
    3894:	e0bff917 	ldw	r2,-28(fp)
    3898:	1885c83a 	sub	r2,r3,r2
    389c:	e0bff615 	stw	r2,-40(fp)
    38a0:	00000406 	br	38b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    38a4:	00c1ffc4 	movi	r3,2047
    38a8:	e0bff917 	ldw	r2,-28(fp)
    38ac:	1885c83a 	sub	r2,r3,r2
    38b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    38b4:	e0bff617 	ldw	r2,-40(fp)
    38b8:	10001e26 	beq	r2,zero,3934 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    38bc:	e0fffe17 	ldw	r3,-8(fp)
    38c0:	e0bff617 	ldw	r2,-40(fp)
    38c4:	1880022e 	bgeu	r3,r2,38d0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    38c8:	e0bffe17 	ldw	r2,-8(fp)
    38cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    38d0:	e0bffc17 	ldw	r2,-16(fp)
    38d4:	10c20e04 	addi	r3,r2,2104
    38d8:	e0bff917 	ldw	r2,-28(fp)
    38dc:	1885883a 	add	r2,r3,r2
    38e0:	e1bff617 	ldw	r6,-40(fp)
    38e4:	e17ffd17 	ldw	r5,-12(fp)
    38e8:	1009883a 	mov	r4,r2
    38ec:	0004b3c0 	call	4b3c <memcpy>
      ptr   += n;
    38f0:	e0fffd17 	ldw	r3,-12(fp)
    38f4:	e0bff617 	ldw	r2,-40(fp)
    38f8:	1885883a 	add	r2,r3,r2
    38fc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    3900:	e0fffe17 	ldw	r3,-8(fp)
    3904:	e0bff617 	ldw	r2,-40(fp)
    3908:	1885c83a 	sub	r2,r3,r2
    390c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3910:	e0fff917 	ldw	r3,-28(fp)
    3914:	e0bff617 	ldw	r2,-40(fp)
    3918:	1885883a 	add	r2,r3,r2
    391c:	10c1ffcc 	andi	r3,r2,2047
    3920:	e0bffc17 	ldw	r2,-16(fp)
    3924:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    3928:	e0bffe17 	ldw	r2,-8(fp)
    392c:	00bfc716 	blt	zero,r2,384c <_gp+0xffff50d0>
    3930:	00000106 	br	3938 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    3934:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3938:	0005303a 	rdctl	r2,status
    393c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3940:	e0fffb17 	ldw	r3,-20(fp)
    3944:	00bfff84 	movi	r2,-2
    3948:	1884703a 	and	r2,r3,r2
    394c:	1001703a 	wrctl	status,r2
  
  return context;
    3950:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    3954:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3958:	e0bffc17 	ldw	r2,-16(fp)
    395c:	10800817 	ldw	r2,32(r2)
    3960:	10c00094 	ori	r3,r2,2
    3964:	e0bffc17 	ldw	r2,-16(fp)
    3968:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    396c:	e0bffc17 	ldw	r2,-16(fp)
    3970:	10800017 	ldw	r2,0(r2)
    3974:	10800104 	addi	r2,r2,4
    3978:	1007883a 	mov	r3,r2
    397c:	e0bffc17 	ldw	r2,-16(fp)
    3980:	10800817 	ldw	r2,32(r2)
    3984:	18800035 	stwio	r2,0(r3)
    3988:	e0bffa17 	ldw	r2,-24(fp)
    398c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3990:	e0bff817 	ldw	r2,-32(fp)
    3994:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    3998:	e0bffe17 	ldw	r2,-8(fp)
    399c:	0080100e 	bge	zero,r2,39e0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    39a0:	e0bfff17 	ldw	r2,-4(fp)
    39a4:	1090000c 	andi	r2,r2,16384
    39a8:	1000101e 	bne	r2,zero,39ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    39ac:	0001883a 	nop
    39b0:	e0bffc17 	ldw	r2,-16(fp)
    39b4:	10c00d17 	ldw	r3,52(r2)
    39b8:	e0bff517 	ldw	r2,-44(fp)
    39bc:	1880051e 	bne	r3,r2,39d4 <altera_avalon_jtag_uart_write+0x1b8>
    39c0:	e0bffc17 	ldw	r2,-16(fp)
    39c4:	10c00917 	ldw	r3,36(r2)
    39c8:	e0bffc17 	ldw	r2,-16(fp)
    39cc:	10800117 	ldw	r2,4(r2)
    39d0:	18bff736 	bltu	r3,r2,39b0 <_gp+0xffff5234>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    39d4:	e0bffc17 	ldw	r2,-16(fp)
    39d8:	10800917 	ldw	r2,36(r2)
    39dc:	1000051e 	bne	r2,zero,39f4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    39e0:	e0bffe17 	ldw	r2,-8(fp)
    39e4:	00bfd016 	blt	zero,r2,3928 <_gp+0xffff51ac>
    39e8:	00000306 	br	39f8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    39ec:	0001883a 	nop
    39f0:	00000106 	br	39f8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    39f4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    39f8:	e0fffd17 	ldw	r3,-12(fp)
    39fc:	e0bff717 	ldw	r2,-36(fp)
    3a00:	18800426 	beq	r3,r2,3a14 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    3a04:	e0fffd17 	ldw	r3,-12(fp)
    3a08:	e0bff717 	ldw	r2,-36(fp)
    3a0c:	1885c83a 	sub	r2,r3,r2
    3a10:	00000606 	br	3a2c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    3a14:	e0bfff17 	ldw	r2,-4(fp)
    3a18:	1090000c 	andi	r2,r2,16384
    3a1c:	10000226 	beq	r2,zero,3a28 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    3a20:	00bffd44 	movi	r2,-11
    3a24:	00000106 	br	3a2c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    3a28:	00bffec4 	movi	r2,-5
}
    3a2c:	e037883a 	mov	sp,fp
    3a30:	dfc00117 	ldw	ra,4(sp)
    3a34:	df000017 	ldw	fp,0(sp)
    3a38:	dec00204 	addi	sp,sp,8
    3a3c:	f800283a 	ret

00003a40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    3a40:	defff504 	addi	sp,sp,-44
    3a44:	df000a15 	stw	fp,40(sp)
    3a48:	df000a04 	addi	fp,sp,40
    3a4c:	e13ffc15 	stw	r4,-16(fp)
    3a50:	e17ffd15 	stw	r5,-12(fp)
    3a54:	e1bffe15 	stw	r6,-8(fp)
    3a58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    3a5c:	e03ff615 	stw	zero,-40(fp)
    3a60:	d0a4d817 	ldw	r2,-27808(gp)
  
  if (alt_ticks_per_second ())
    3a64:	10003c26 	beq	r2,zero,3b58 <alt_alarm_start+0x118>
  {
    if (alarm)
    3a68:	e0bffc17 	ldw	r2,-16(fp)
    3a6c:	10003826 	beq	r2,zero,3b50 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    3a70:	e0bffc17 	ldw	r2,-16(fp)
    3a74:	e0fffe17 	ldw	r3,-8(fp)
    3a78:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    3a7c:	e0bffc17 	ldw	r2,-16(fp)
    3a80:	e0ffff17 	ldw	r3,-4(fp)
    3a84:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a88:	0005303a 	rdctl	r2,status
    3a8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a90:	e0fff917 	ldw	r3,-28(fp)
    3a94:	00bfff84 	movi	r2,-2
    3a98:	1884703a 	and	r2,r3,r2
    3a9c:	1001703a 	wrctl	status,r2
  
  return context;
    3aa0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    3aa4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    3aa8:	d0a4d917 	ldw	r2,-27804(gp)
      
      current_nticks = alt_nticks();
    3aac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    3ab0:	e0fffd17 	ldw	r3,-12(fp)
    3ab4:	e0bff617 	ldw	r2,-40(fp)
    3ab8:	1885883a 	add	r2,r3,r2
    3abc:	10c00044 	addi	r3,r2,1
    3ac0:	e0bffc17 	ldw	r2,-16(fp)
    3ac4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    3ac8:	e0bffc17 	ldw	r2,-16(fp)
    3acc:	10c00217 	ldw	r3,8(r2)
    3ad0:	e0bff617 	ldw	r2,-40(fp)
    3ad4:	1880042e 	bgeu	r3,r2,3ae8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    3ad8:	e0bffc17 	ldw	r2,-16(fp)
    3adc:	00c00044 	movi	r3,1
    3ae0:	10c00405 	stb	r3,16(r2)
    3ae4:	00000206 	br	3af0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    3ae8:	e0bffc17 	ldw	r2,-16(fp)
    3aec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    3af0:	e0bffc17 	ldw	r2,-16(fp)
    3af4:	d0e00a04 	addi	r3,gp,-32728
    3af8:	e0fffa15 	stw	r3,-24(fp)
    3afc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3b00:	e0bffb17 	ldw	r2,-20(fp)
    3b04:	e0fffa17 	ldw	r3,-24(fp)
    3b08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3b0c:	e0bffa17 	ldw	r2,-24(fp)
    3b10:	10c00017 	ldw	r3,0(r2)
    3b14:	e0bffb17 	ldw	r2,-20(fp)
    3b18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3b1c:	e0bffa17 	ldw	r2,-24(fp)
    3b20:	10800017 	ldw	r2,0(r2)
    3b24:	e0fffb17 	ldw	r3,-20(fp)
    3b28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3b2c:	e0bffa17 	ldw	r2,-24(fp)
    3b30:	e0fffb17 	ldw	r3,-20(fp)
    3b34:	10c00015 	stw	r3,0(r2)
    3b38:	e0bff817 	ldw	r2,-32(fp)
    3b3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3b40:	e0bff717 	ldw	r2,-36(fp)
    3b44:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    3b48:	0005883a 	mov	r2,zero
    3b4c:	00000306 	br	3b5c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    3b50:	00bffa84 	movi	r2,-22
    3b54:	00000106 	br	3b5c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    3b58:	00bfde84 	movi	r2,-134
  }
}
    3b5c:	e037883a 	mov	sp,fp
    3b60:	df000017 	ldw	fp,0(sp)
    3b64:	dec00104 	addi	sp,sp,4
    3b68:	f800283a 	ret

00003b6c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    3b6c:	defffa04 	addi	sp,sp,-24
    3b70:	dfc00515 	stw	ra,20(sp)
    3b74:	df000415 	stw	fp,16(sp)
    3b78:	df000404 	addi	fp,sp,16
    3b7c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    3b80:	00800244 	movi	r2,9
    3b84:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    3b88:	014003f4 	movhi	r5,15
    3b8c:	29509004 	addi	r5,r5,16960
    3b90:	e13ffd17 	ldw	r4,-12(fp)
    3b94:	0002c340 	call	2c34 <__mulsi3>
    3b98:	100b883a 	mov	r5,r2
    3b9c:	0100bef4 	movhi	r4,763
    3ba0:	213c2004 	addi	r4,r4,-3968
    3ba4:	0002b780 	call	2b78 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    3ba8:	100b883a 	mov	r5,r2
    3bac:	01200034 	movhi	r4,32768
    3bb0:	213fffc4 	addi	r4,r4,-1
    3bb4:	0002b780 	call	2b78 <__udivsi3>
    3bb8:	100b883a 	mov	r5,r2
    3bbc:	e13fff17 	ldw	r4,-4(fp)
    3bc0:	0002b780 	call	2b78 <__udivsi3>
    3bc4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    3bc8:	e0bffe17 	ldw	r2,-8(fp)
    3bcc:	10002a26 	beq	r2,zero,3c78 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    3bd0:	e03ffc15 	stw	zero,-16(fp)
    3bd4:	00001706 	br	3c34 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    3bd8:	00a00034 	movhi	r2,32768
    3bdc:	10bfffc4 	addi	r2,r2,-1
    3be0:	10bfffc4 	addi	r2,r2,-1
    3be4:	103ffe1e 	bne	r2,zero,3be0 <_gp+0xffff5464>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    3be8:	014003f4 	movhi	r5,15
    3bec:	29509004 	addi	r5,r5,16960
    3bf0:	e13ffd17 	ldw	r4,-12(fp)
    3bf4:	0002c340 	call	2c34 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    3bf8:	100b883a 	mov	r5,r2
    3bfc:	0100bef4 	movhi	r4,763
    3c00:	213c2004 	addi	r4,r4,-3968
    3c04:	0002b780 	call	2b78 <__udivsi3>
    3c08:	100b883a 	mov	r5,r2
    3c0c:	01200034 	movhi	r4,32768
    3c10:	213fffc4 	addi	r4,r4,-1
    3c14:	0002b780 	call	2b78 <__udivsi3>
    3c18:	1007883a 	mov	r3,r2
    3c1c:	e0bfff17 	ldw	r2,-4(fp)
    3c20:	10c5c83a 	sub	r2,r2,r3
    3c24:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    3c28:	e0bffc17 	ldw	r2,-16(fp)
    3c2c:	10800044 	addi	r2,r2,1
    3c30:	e0bffc15 	stw	r2,-16(fp)
    3c34:	e0fffc17 	ldw	r3,-16(fp)
    3c38:	e0bffe17 	ldw	r2,-8(fp)
    3c3c:	18bfe616 	blt	r3,r2,3bd8 <_gp+0xffff545c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3c40:	014003f4 	movhi	r5,15
    3c44:	29509004 	addi	r5,r5,16960
    3c48:	e13ffd17 	ldw	r4,-12(fp)
    3c4c:	0002c340 	call	2c34 <__mulsi3>
    3c50:	100b883a 	mov	r5,r2
    3c54:	0100bef4 	movhi	r4,763
    3c58:	213c2004 	addi	r4,r4,-3968
    3c5c:	0002b780 	call	2b78 <__udivsi3>
    3c60:	e17fff17 	ldw	r5,-4(fp)
    3c64:	1009883a 	mov	r4,r2
    3c68:	0002c340 	call	2c34 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3c6c:	10bfffc4 	addi	r2,r2,-1
    3c70:	103ffe1e 	bne	r2,zero,3c6c <_gp+0xffff54f0>
    3c74:	00000d06 	br	3cac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3c78:	014003f4 	movhi	r5,15
    3c7c:	29509004 	addi	r5,r5,16960
    3c80:	e13ffd17 	ldw	r4,-12(fp)
    3c84:	0002c340 	call	2c34 <__mulsi3>
    3c88:	100b883a 	mov	r5,r2
    3c8c:	0100bef4 	movhi	r4,763
    3c90:	213c2004 	addi	r4,r4,-3968
    3c94:	0002b780 	call	2b78 <__udivsi3>
    3c98:	e17fff17 	ldw	r5,-4(fp)
    3c9c:	1009883a 	mov	r4,r2
    3ca0:	0002c340 	call	2c34 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3ca4:	10bfffc4 	addi	r2,r2,-1
    3ca8:	00bffe16 	blt	zero,r2,3ca4 <_gp+0xffff5528>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    3cac:	0005883a 	mov	r2,zero
}
    3cb0:	e037883a 	mov	sp,fp
    3cb4:	dfc00117 	ldw	ra,4(sp)
    3cb8:	df000017 	ldw	fp,0(sp)
    3cbc:	dec00204 	addi	sp,sp,8
    3cc0:	f800283a 	ret

00003cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3cc4:	defffe04 	addi	sp,sp,-8
    3cc8:	dfc00115 	stw	ra,4(sp)
    3ccc:	df000015 	stw	fp,0(sp)
    3cd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3cd4:	d0a00817 	ldw	r2,-32736(gp)
    3cd8:	10000326 	beq	r2,zero,3ce8 <alt_get_errno+0x24>
    3cdc:	d0a00817 	ldw	r2,-32736(gp)
    3ce0:	103ee83a 	callr	r2
    3ce4:	00000106 	br	3cec <alt_get_errno+0x28>
    3ce8:	d0a4d304 	addi	r2,gp,-27828
}
    3cec:	e037883a 	mov	sp,fp
    3cf0:	dfc00117 	ldw	ra,4(sp)
    3cf4:	df000017 	ldw	fp,0(sp)
    3cf8:	dec00204 	addi	sp,sp,8
    3cfc:	f800283a 	ret

00003d00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3d00:	defffb04 	addi	sp,sp,-20
    3d04:	dfc00415 	stw	ra,16(sp)
    3d08:	df000315 	stw	fp,12(sp)
    3d0c:	df000304 	addi	fp,sp,12
    3d10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3d14:	e0bfff17 	ldw	r2,-4(fp)
    3d18:	10000816 	blt	r2,zero,3d3c <close+0x3c>
    3d1c:	01400304 	movi	r5,12
    3d20:	e13fff17 	ldw	r4,-4(fp)
    3d24:	0002c340 	call	2c34 <__mulsi3>
    3d28:	1007883a 	mov	r3,r2
    3d2c:	00800034 	movhi	r2,0
    3d30:	10997f04 	addi	r2,r2,26108
    3d34:	1885883a 	add	r2,r3,r2
    3d38:	00000106 	br	3d40 <close+0x40>
    3d3c:	0005883a 	mov	r2,zero
    3d40:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3d44:	e0bffd17 	ldw	r2,-12(fp)
    3d48:	10001926 	beq	r2,zero,3db0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3d4c:	e0bffd17 	ldw	r2,-12(fp)
    3d50:	10800017 	ldw	r2,0(r2)
    3d54:	10800417 	ldw	r2,16(r2)
    3d58:	10000626 	beq	r2,zero,3d74 <close+0x74>
    3d5c:	e0bffd17 	ldw	r2,-12(fp)
    3d60:	10800017 	ldw	r2,0(r2)
    3d64:	10800417 	ldw	r2,16(r2)
    3d68:	e13ffd17 	ldw	r4,-12(fp)
    3d6c:	103ee83a 	callr	r2
    3d70:	00000106 	br	3d78 <close+0x78>
    3d74:	0005883a 	mov	r2,zero
    3d78:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3d7c:	e13fff17 	ldw	r4,-4(fp)
    3d80:	00045a80 	call	45a8 <alt_release_fd>
    if (rval < 0)
    3d84:	e0bffe17 	ldw	r2,-8(fp)
    3d88:	1000070e 	bge	r2,zero,3da8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    3d8c:	0003cc40 	call	3cc4 <alt_get_errno>
    3d90:	1007883a 	mov	r3,r2
    3d94:	e0bffe17 	ldw	r2,-8(fp)
    3d98:	0085c83a 	sub	r2,zero,r2
    3d9c:	18800015 	stw	r2,0(r3)
      return -1;
    3da0:	00bfffc4 	movi	r2,-1
    3da4:	00000706 	br	3dc4 <close+0xc4>
    }
    return 0;
    3da8:	0005883a 	mov	r2,zero
    3dac:	00000506 	br	3dc4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3db0:	0003cc40 	call	3cc4 <alt_get_errno>
    3db4:	1007883a 	mov	r3,r2
    3db8:	00801444 	movi	r2,81
    3dbc:	18800015 	stw	r2,0(r3)
    return -1;
    3dc0:	00bfffc4 	movi	r2,-1
  }
}
    3dc4:	e037883a 	mov	sp,fp
    3dc8:	dfc00117 	ldw	ra,4(sp)
    3dcc:	df000017 	ldw	fp,0(sp)
    3dd0:	dec00204 	addi	sp,sp,8
    3dd4:	f800283a 	ret

00003dd8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    3dd8:	deffff04 	addi	sp,sp,-4
    3ddc:	df000015 	stw	fp,0(sp)
    3de0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    3de4:	0001883a 	nop
    3de8:	e037883a 	mov	sp,fp
    3dec:	df000017 	ldw	fp,0(sp)
    3df0:	dec00104 	addi	sp,sp,4
    3df4:	f800283a 	ret

00003df8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3df8:	defffc04 	addi	sp,sp,-16
    3dfc:	df000315 	stw	fp,12(sp)
    3e00:	df000304 	addi	fp,sp,12
    3e04:	e13ffd15 	stw	r4,-12(fp)
    3e08:	e17ffe15 	stw	r5,-8(fp)
    3e0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3e10:	e0bfff17 	ldw	r2,-4(fp)
}
    3e14:	e037883a 	mov	sp,fp
    3e18:	df000017 	ldw	fp,0(sp)
    3e1c:	dec00104 	addi	sp,sp,4
    3e20:	f800283a 	ret

00003e24 <alt_get_errno>:
    3e24:	defffe04 	addi	sp,sp,-8
    3e28:	dfc00115 	stw	ra,4(sp)
    3e2c:	df000015 	stw	fp,0(sp)
    3e30:	d839883a 	mov	fp,sp
    3e34:	d0a00817 	ldw	r2,-32736(gp)
    3e38:	10000326 	beq	r2,zero,3e48 <alt_get_errno+0x24>
    3e3c:	d0a00817 	ldw	r2,-32736(gp)
    3e40:	103ee83a 	callr	r2
    3e44:	00000106 	br	3e4c <alt_get_errno+0x28>
    3e48:	d0a4d304 	addi	r2,gp,-27828
    3e4c:	e037883a 	mov	sp,fp
    3e50:	dfc00117 	ldw	ra,4(sp)
    3e54:	df000017 	ldw	fp,0(sp)
    3e58:	dec00204 	addi	sp,sp,8
    3e5c:	f800283a 	ret

00003e60 <alt_dev_llist_insert>:
    3e60:	defffa04 	addi	sp,sp,-24
    3e64:	dfc00515 	stw	ra,20(sp)
    3e68:	df000415 	stw	fp,16(sp)
    3e6c:	df000404 	addi	fp,sp,16
    3e70:	e13ffe15 	stw	r4,-8(fp)
    3e74:	e17fff15 	stw	r5,-4(fp)
    3e78:	e0bffe17 	ldw	r2,-8(fp)
    3e7c:	10000326 	beq	r2,zero,3e8c <alt_dev_llist_insert+0x2c>
    3e80:	e0bffe17 	ldw	r2,-8(fp)
    3e84:	10800217 	ldw	r2,8(r2)
    3e88:	1000061e 	bne	r2,zero,3ea4 <alt_dev_llist_insert+0x44>
    3e8c:	0003e240 	call	3e24 <alt_get_errno>
    3e90:	1007883a 	mov	r3,r2
    3e94:	00800584 	movi	r2,22
    3e98:	18800015 	stw	r2,0(r3)
    3e9c:	00bffa84 	movi	r2,-22
    3ea0:	00001306 	br	3ef0 <alt_dev_llist_insert+0x90>
    3ea4:	e0bffe17 	ldw	r2,-8(fp)
    3ea8:	e0ffff17 	ldw	r3,-4(fp)
    3eac:	e0fffc15 	stw	r3,-16(fp)
    3eb0:	e0bffd15 	stw	r2,-12(fp)
    3eb4:	e0bffd17 	ldw	r2,-12(fp)
    3eb8:	e0fffc17 	ldw	r3,-16(fp)
    3ebc:	10c00115 	stw	r3,4(r2)
    3ec0:	e0bffc17 	ldw	r2,-16(fp)
    3ec4:	10c00017 	ldw	r3,0(r2)
    3ec8:	e0bffd17 	ldw	r2,-12(fp)
    3ecc:	10c00015 	stw	r3,0(r2)
    3ed0:	e0bffc17 	ldw	r2,-16(fp)
    3ed4:	10800017 	ldw	r2,0(r2)
    3ed8:	e0fffd17 	ldw	r3,-12(fp)
    3edc:	10c00115 	stw	r3,4(r2)
    3ee0:	e0bffc17 	ldw	r2,-16(fp)
    3ee4:	e0fffd17 	ldw	r3,-12(fp)
    3ee8:	10c00015 	stw	r3,0(r2)
    3eec:	0005883a 	mov	r2,zero
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	dfc00117 	ldw	ra,4(sp)
    3ef8:	df000017 	ldw	fp,0(sp)
    3efc:	dec00204 	addi	sp,sp,8
    3f00:	f800283a 	ret

00003f04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3f04:	deffff04 	addi	sp,sp,-4
    3f08:	df000015 	stw	fp,0(sp)
    3f0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    3f10:	0001883a 	nop
    3f14:	e037883a 	mov	sp,fp
    3f18:	df000017 	ldw	fp,0(sp)
    3f1c:	dec00104 	addi	sp,sp,4
    3f20:	f800283a 	ret

00003f24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3f24:	defff904 	addi	sp,sp,-28
    3f28:	dfc00615 	stw	ra,24(sp)
    3f2c:	df000515 	stw	fp,20(sp)
    3f30:	df000504 	addi	fp,sp,20
    3f34:	e13ffc15 	stw	r4,-16(fp)
    3f38:	e17ffd15 	stw	r5,-12(fp)
    3f3c:	e1bffe15 	stw	r6,-8(fp)
    3f40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    3f44:	e0800217 	ldw	r2,8(fp)
    3f48:	d8800015 	stw	r2,0(sp)
    3f4c:	e1ffff17 	ldw	r7,-4(fp)
    3f50:	e1bffe17 	ldw	r6,-8(fp)
    3f54:	e17ffd17 	ldw	r5,-12(fp)
    3f58:	e13ffc17 	ldw	r4,-16(fp)
    3f5c:	00040d40 	call	40d4 <alt_iic_isr_register>
}  
    3f60:	e037883a 	mov	sp,fp
    3f64:	dfc00117 	ldw	ra,4(sp)
    3f68:	df000017 	ldw	fp,0(sp)
    3f6c:	dec00204 	addi	sp,sp,8
    3f70:	f800283a 	ret

00003f74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    3f74:	defff904 	addi	sp,sp,-28
    3f78:	df000615 	stw	fp,24(sp)
    3f7c:	df000604 	addi	fp,sp,24
    3f80:	e13ffe15 	stw	r4,-8(fp)
    3f84:	e17fff15 	stw	r5,-4(fp)
    3f88:	e0bfff17 	ldw	r2,-4(fp)
    3f8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f90:	0005303a 	rdctl	r2,status
    3f94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f98:	e0fffb17 	ldw	r3,-20(fp)
    3f9c:	00bfff84 	movi	r2,-2
    3fa0:	1884703a 	and	r2,r3,r2
    3fa4:	1001703a 	wrctl	status,r2
  
  return context;
    3fa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3fac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    3fb0:	00c00044 	movi	r3,1
    3fb4:	e0bffa17 	ldw	r2,-24(fp)
    3fb8:	1884983a 	sll	r2,r3,r2
    3fbc:	1007883a 	mov	r3,r2
    3fc0:	d0a4d717 	ldw	r2,-27812(gp)
    3fc4:	1884b03a 	or	r2,r3,r2
    3fc8:	d0a4d715 	stw	r2,-27812(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    3fcc:	d0a4d717 	ldw	r2,-27812(gp)
    3fd0:	100170fa 	wrctl	ienable,r2
    3fd4:	e0bffc17 	ldw	r2,-16(fp)
    3fd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fdc:	e0bffd17 	ldw	r2,-12(fp)
    3fe0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3fe4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    3fe8:	0001883a 	nop
}
    3fec:	e037883a 	mov	sp,fp
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00104 	addi	sp,sp,4
    3ff8:	f800283a 	ret

00003ffc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    3ffc:	defff904 	addi	sp,sp,-28
    4000:	df000615 	stw	fp,24(sp)
    4004:	df000604 	addi	fp,sp,24
    4008:	e13ffe15 	stw	r4,-8(fp)
    400c:	e17fff15 	stw	r5,-4(fp)
    4010:	e0bfff17 	ldw	r2,-4(fp)
    4014:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4018:	0005303a 	rdctl	r2,status
    401c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4020:	e0fffb17 	ldw	r3,-20(fp)
    4024:	00bfff84 	movi	r2,-2
    4028:	1884703a 	and	r2,r3,r2
    402c:	1001703a 	wrctl	status,r2
  
  return context;
    4030:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4034:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    4038:	00c00044 	movi	r3,1
    403c:	e0bffa17 	ldw	r2,-24(fp)
    4040:	1884983a 	sll	r2,r3,r2
    4044:	0084303a 	nor	r2,zero,r2
    4048:	1007883a 	mov	r3,r2
    404c:	d0a4d717 	ldw	r2,-27812(gp)
    4050:	1884703a 	and	r2,r3,r2
    4054:	d0a4d715 	stw	r2,-27812(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4058:	d0a4d717 	ldw	r2,-27812(gp)
    405c:	100170fa 	wrctl	ienable,r2
    4060:	e0bffc17 	ldw	r2,-16(fp)
    4064:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4068:	e0bffd17 	ldw	r2,-12(fp)
    406c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4070:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    4074:	0001883a 	nop
}
    4078:	e037883a 	mov	sp,fp
    407c:	df000017 	ldw	fp,0(sp)
    4080:	dec00104 	addi	sp,sp,4
    4084:	f800283a 	ret

00004088 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4088:	defffc04 	addi	sp,sp,-16
    408c:	df000315 	stw	fp,12(sp)
    4090:	df000304 	addi	fp,sp,12
    4094:	e13ffe15 	stw	r4,-8(fp)
    4098:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    409c:	000530fa 	rdctl	r2,ienable
    40a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    40a4:	00c00044 	movi	r3,1
    40a8:	e0bfff17 	ldw	r2,-4(fp)
    40ac:	1884983a 	sll	r2,r3,r2
    40b0:	1007883a 	mov	r3,r2
    40b4:	e0bffd17 	ldw	r2,-12(fp)
    40b8:	1884703a 	and	r2,r3,r2
    40bc:	1004c03a 	cmpne	r2,r2,zero
    40c0:	10803fcc 	andi	r2,r2,255
}
    40c4:	e037883a 	mov	sp,fp
    40c8:	df000017 	ldw	fp,0(sp)
    40cc:	dec00104 	addi	sp,sp,4
    40d0:	f800283a 	ret

000040d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    40d4:	defff504 	addi	sp,sp,-44
    40d8:	dfc00a15 	stw	ra,40(sp)
    40dc:	df000915 	stw	fp,36(sp)
    40e0:	df000904 	addi	fp,sp,36
    40e4:	e13ffc15 	stw	r4,-16(fp)
    40e8:	e17ffd15 	stw	r5,-12(fp)
    40ec:	e1bffe15 	stw	r6,-8(fp)
    40f0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    40f4:	00bffa84 	movi	r2,-22
    40f8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    40fc:	e0bffd17 	ldw	r2,-12(fp)
    4100:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4104:	e0bff817 	ldw	r2,-32(fp)
    4108:	10800808 	cmpgei	r2,r2,32
    410c:	1000271e 	bne	r2,zero,41ac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4110:	0005303a 	rdctl	r2,status
    4114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4118:	e0fffb17 	ldw	r3,-20(fp)
    411c:	00bfff84 	movi	r2,-2
    4120:	1884703a 	and	r2,r3,r2
    4124:	1001703a 	wrctl	status,r2
  
  return context;
    4128:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    412c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    4130:	00800034 	movhi	r2,0
    4134:	109eba04 	addi	r2,r2,31464
    4138:	e0fff817 	ldw	r3,-32(fp)
    413c:	180690fa 	slli	r3,r3,3
    4140:	10c5883a 	add	r2,r2,r3
    4144:	e0fffe17 	ldw	r3,-8(fp)
    4148:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    414c:	00800034 	movhi	r2,0
    4150:	109eba04 	addi	r2,r2,31464
    4154:	e0fff817 	ldw	r3,-32(fp)
    4158:	180690fa 	slli	r3,r3,3
    415c:	10c5883a 	add	r2,r2,r3
    4160:	10800104 	addi	r2,r2,4
    4164:	e0ffff17 	ldw	r3,-4(fp)
    4168:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    416c:	e0bffe17 	ldw	r2,-8(fp)
    4170:	10000526 	beq	r2,zero,4188 <alt_iic_isr_register+0xb4>
    4174:	e0bff817 	ldw	r2,-32(fp)
    4178:	100b883a 	mov	r5,r2
    417c:	e13ffc17 	ldw	r4,-16(fp)
    4180:	0003f740 	call	3f74 <alt_ic_irq_enable>
    4184:	00000406 	br	4198 <alt_iic_isr_register+0xc4>
    4188:	e0bff817 	ldw	r2,-32(fp)
    418c:	100b883a 	mov	r5,r2
    4190:	e13ffc17 	ldw	r4,-16(fp)
    4194:	0003ffc0 	call	3ffc <alt_ic_irq_disable>
    4198:	e0bff715 	stw	r2,-36(fp)
    419c:	e0bffa17 	ldw	r2,-24(fp)
    41a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    41a4:	e0bff917 	ldw	r2,-28(fp)
    41a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    41ac:	e0bff717 	ldw	r2,-36(fp)
}
    41b0:	e037883a 	mov	sp,fp
    41b4:	dfc00117 	ldw	ra,4(sp)
    41b8:	df000017 	ldw	fp,0(sp)
    41bc:	dec00204 	addi	sp,sp,8
    41c0:	f800283a 	ret

000041c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    41c4:	defff804 	addi	sp,sp,-32
    41c8:	dfc00715 	stw	ra,28(sp)
    41cc:	df000615 	stw	fp,24(sp)
    41d0:	dc000515 	stw	r16,20(sp)
    41d4:	df000604 	addi	fp,sp,24
    41d8:	e13ffb15 	stw	r4,-20(fp)
    41dc:	e17ffc15 	stw	r5,-16(fp)
    41e0:	e1bffd15 	stw	r6,-12(fp)
    41e4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    41e8:	e1bffe17 	ldw	r6,-8(fp)
    41ec:	e17ffd17 	ldw	r5,-12(fp)
    41f0:	e13ffc17 	ldw	r4,-16(fp)
    41f4:	000444c0 	call	444c <open>
    41f8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    41fc:	e0bffa17 	ldw	r2,-24(fp)
    4200:	10002216 	blt	r2,zero,428c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    4204:	04000034 	movhi	r16,0
    4208:	84197f04 	addi	r16,r16,26108
    420c:	e0bffa17 	ldw	r2,-24(fp)
    4210:	01400304 	movi	r5,12
    4214:	1009883a 	mov	r4,r2
    4218:	0002c340 	call	2c34 <__mulsi3>
    421c:	8085883a 	add	r2,r16,r2
    4220:	10c00017 	ldw	r3,0(r2)
    4224:	e0bffb17 	ldw	r2,-20(fp)
    4228:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    422c:	04000034 	movhi	r16,0
    4230:	84197f04 	addi	r16,r16,26108
    4234:	e0bffa17 	ldw	r2,-24(fp)
    4238:	01400304 	movi	r5,12
    423c:	1009883a 	mov	r4,r2
    4240:	0002c340 	call	2c34 <__mulsi3>
    4244:	8085883a 	add	r2,r16,r2
    4248:	10800104 	addi	r2,r2,4
    424c:	10c00017 	ldw	r3,0(r2)
    4250:	e0bffb17 	ldw	r2,-20(fp)
    4254:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4258:	04000034 	movhi	r16,0
    425c:	84197f04 	addi	r16,r16,26108
    4260:	e0bffa17 	ldw	r2,-24(fp)
    4264:	01400304 	movi	r5,12
    4268:	1009883a 	mov	r4,r2
    426c:	0002c340 	call	2c34 <__mulsi3>
    4270:	8085883a 	add	r2,r16,r2
    4274:	10800204 	addi	r2,r2,8
    4278:	10c00017 	ldw	r3,0(r2)
    427c:	e0bffb17 	ldw	r2,-20(fp)
    4280:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4284:	e13ffa17 	ldw	r4,-24(fp)
    4288:	00045a80 	call	45a8 <alt_release_fd>
  }
} 
    428c:	0001883a 	nop
    4290:	e6ffff04 	addi	sp,fp,-4
    4294:	dfc00217 	ldw	ra,8(sp)
    4298:	df000117 	ldw	fp,4(sp)
    429c:	dc000017 	ldw	r16,0(sp)
    42a0:	dec00304 	addi	sp,sp,12
    42a4:	f800283a 	ret

000042a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    42a8:	defffb04 	addi	sp,sp,-20
    42ac:	dfc00415 	stw	ra,16(sp)
    42b0:	df000315 	stw	fp,12(sp)
    42b4:	df000304 	addi	fp,sp,12
    42b8:	e13ffd15 	stw	r4,-12(fp)
    42bc:	e17ffe15 	stw	r5,-8(fp)
    42c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    42c4:	01c07fc4 	movi	r7,511
    42c8:	01800044 	movi	r6,1
    42cc:	e17ffd17 	ldw	r5,-12(fp)
    42d0:	01000034 	movhi	r4,0
    42d4:	21198204 	addi	r4,r4,26120
    42d8:	00041c40 	call	41c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    42dc:	01c07fc4 	movi	r7,511
    42e0:	000d883a 	mov	r6,zero
    42e4:	e17ffe17 	ldw	r5,-8(fp)
    42e8:	01000034 	movhi	r4,0
    42ec:	21197f04 	addi	r4,r4,26108
    42f0:	00041c40 	call	41c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    42f4:	01c07fc4 	movi	r7,511
    42f8:	01800044 	movi	r6,1
    42fc:	e17fff17 	ldw	r5,-4(fp)
    4300:	01000034 	movhi	r4,0
    4304:	21198504 	addi	r4,r4,26132
    4308:	00041c40 	call	41c4 <alt_open_fd>
}  
    430c:	0001883a 	nop
    4310:	e037883a 	mov	sp,fp
    4314:	dfc00117 	ldw	ra,4(sp)
    4318:	df000017 	ldw	fp,0(sp)
    431c:	dec00204 	addi	sp,sp,8
    4320:	f800283a 	ret

00004324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4324:	defffe04 	addi	sp,sp,-8
    4328:	dfc00115 	stw	ra,4(sp)
    432c:	df000015 	stw	fp,0(sp)
    4330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4334:	d0a00817 	ldw	r2,-32736(gp)
    4338:	10000326 	beq	r2,zero,4348 <alt_get_errno+0x24>
    433c:	d0a00817 	ldw	r2,-32736(gp)
    4340:	103ee83a 	callr	r2
    4344:	00000106 	br	434c <alt_get_errno+0x28>
    4348:	d0a4d304 	addi	r2,gp,-27828
}
    434c:	e037883a 	mov	sp,fp
    4350:	dfc00117 	ldw	ra,4(sp)
    4354:	df000017 	ldw	fp,0(sp)
    4358:	dec00204 	addi	sp,sp,8
    435c:	f800283a 	ret

00004360 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4360:	defffb04 	addi	sp,sp,-20
    4364:	dfc00415 	stw	ra,16(sp)
    4368:	df000315 	stw	fp,12(sp)
    436c:	dc000215 	stw	r16,8(sp)
    4370:	df000304 	addi	fp,sp,12
    4374:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4378:	e0bffe17 	ldw	r2,-8(fp)
    437c:	10800217 	ldw	r2,8(r2)
    4380:	10d00034 	orhi	r3,r2,16384
    4384:	e0bffe17 	ldw	r2,-8(fp)
    4388:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    438c:	e03ffd15 	stw	zero,-12(fp)
    4390:	00002306 	br	4420 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4394:	04000034 	movhi	r16,0
    4398:	84197f04 	addi	r16,r16,26108
    439c:	e0bffd17 	ldw	r2,-12(fp)
    43a0:	01400304 	movi	r5,12
    43a4:	1009883a 	mov	r4,r2
    43a8:	0002c340 	call	2c34 <__mulsi3>
    43ac:	8085883a 	add	r2,r16,r2
    43b0:	10c00017 	ldw	r3,0(r2)
    43b4:	e0bffe17 	ldw	r2,-8(fp)
    43b8:	10800017 	ldw	r2,0(r2)
    43bc:	1880151e 	bne	r3,r2,4414 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    43c0:	04000034 	movhi	r16,0
    43c4:	84197f04 	addi	r16,r16,26108
    43c8:	e0bffd17 	ldw	r2,-12(fp)
    43cc:	01400304 	movi	r5,12
    43d0:	1009883a 	mov	r4,r2
    43d4:	0002c340 	call	2c34 <__mulsi3>
    43d8:	8085883a 	add	r2,r16,r2
    43dc:	10800204 	addi	r2,r2,8
    43e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    43e4:	10000b0e 	bge	r2,zero,4414 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    43e8:	01400304 	movi	r5,12
    43ec:	e13ffd17 	ldw	r4,-12(fp)
    43f0:	0002c340 	call	2c34 <__mulsi3>
    43f4:	1007883a 	mov	r3,r2
    43f8:	00800034 	movhi	r2,0
    43fc:	10997f04 	addi	r2,r2,26108
    4400:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4404:	e0bffe17 	ldw	r2,-8(fp)
    4408:	18800226 	beq	r3,r2,4414 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    440c:	00bffcc4 	movi	r2,-13
    4410:	00000806 	br	4434 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4414:	e0bffd17 	ldw	r2,-12(fp)
    4418:	10800044 	addi	r2,r2,1
    441c:	e0bffd15 	stw	r2,-12(fp)
    4420:	d0a00717 	ldw	r2,-32740(gp)
    4424:	1007883a 	mov	r3,r2
    4428:	e0bffd17 	ldw	r2,-12(fp)
    442c:	18bfd92e 	bgeu	r3,r2,4394 <_gp+0xffff5c18>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4430:	0005883a 	mov	r2,zero
}
    4434:	e6ffff04 	addi	sp,fp,-4
    4438:	dfc00217 	ldw	ra,8(sp)
    443c:	df000117 	ldw	fp,4(sp)
    4440:	dc000017 	ldw	r16,0(sp)
    4444:	dec00304 	addi	sp,sp,12
    4448:	f800283a 	ret

0000444c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    444c:	defff604 	addi	sp,sp,-40
    4450:	dfc00915 	stw	ra,36(sp)
    4454:	df000815 	stw	fp,32(sp)
    4458:	df000804 	addi	fp,sp,32
    445c:	e13ffd15 	stw	r4,-12(fp)
    4460:	e17ffe15 	stw	r5,-8(fp)
    4464:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4468:	00bfffc4 	movi	r2,-1
    446c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4470:	00bffb44 	movi	r2,-19
    4474:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4478:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    447c:	d1600504 	addi	r5,gp,-32748
    4480:	e13ffd17 	ldw	r4,-12(fp)
    4484:	00047f40 	call	47f4 <alt_find_dev>
    4488:	e0bff815 	stw	r2,-32(fp)
    448c:	e0bff817 	ldw	r2,-32(fp)
    4490:	1000051e 	bne	r2,zero,44a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4494:	e13ffd17 	ldw	r4,-12(fp)
    4498:	00048840 	call	4884 <alt_find_file>
    449c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    44a0:	00800044 	movi	r2,1
    44a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    44a8:	e0bff817 	ldw	r2,-32(fp)
    44ac:	10002b26 	beq	r2,zero,455c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    44b0:	e13ff817 	ldw	r4,-32(fp)
    44b4:	000498c0 	call	498c <alt_get_fd>
    44b8:	e0bff915 	stw	r2,-28(fp)
    44bc:	e0bff917 	ldw	r2,-28(fp)
    44c0:	1000030e 	bge	r2,zero,44d0 <open+0x84>
    {
      status = index;
    44c4:	e0bff917 	ldw	r2,-28(fp)
    44c8:	e0bffa15 	stw	r2,-24(fp)
    44cc:	00002506 	br	4564 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    44d0:	01400304 	movi	r5,12
    44d4:	e13ff917 	ldw	r4,-28(fp)
    44d8:	0002c340 	call	2c34 <__mulsi3>
    44dc:	1007883a 	mov	r3,r2
    44e0:	00800034 	movhi	r2,0
    44e4:	10997f04 	addi	r2,r2,26108
    44e8:	1885883a 	add	r2,r3,r2
    44ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    44f0:	e0fffe17 	ldw	r3,-8(fp)
    44f4:	00900034 	movhi	r2,16384
    44f8:	10bfffc4 	addi	r2,r2,-1
    44fc:	1886703a 	and	r3,r3,r2
    4500:	e0bffc17 	ldw	r2,-16(fp)
    4504:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4508:	e0bffb17 	ldw	r2,-20(fp)
    450c:	1000051e 	bne	r2,zero,4524 <open+0xd8>
    4510:	e13ffc17 	ldw	r4,-16(fp)
    4514:	00043600 	call	4360 <alt_file_locked>
    4518:	e0bffa15 	stw	r2,-24(fp)
    451c:	e0bffa17 	ldw	r2,-24(fp)
    4520:	10001016 	blt	r2,zero,4564 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4524:	e0bff817 	ldw	r2,-32(fp)
    4528:	10800317 	ldw	r2,12(r2)
    452c:	10000826 	beq	r2,zero,4550 <open+0x104>
    4530:	e0bff817 	ldw	r2,-32(fp)
    4534:	10800317 	ldw	r2,12(r2)
    4538:	e1ffff17 	ldw	r7,-4(fp)
    453c:	e1bffe17 	ldw	r6,-8(fp)
    4540:	e17ffd17 	ldw	r5,-12(fp)
    4544:	e13ffc17 	ldw	r4,-16(fp)
    4548:	103ee83a 	callr	r2
    454c:	00000106 	br	4554 <open+0x108>
    4550:	0005883a 	mov	r2,zero
    4554:	e0bffa15 	stw	r2,-24(fp)
    4558:	00000206 	br	4564 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    455c:	00bffb44 	movi	r2,-19
    4560:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4564:	e0bffa17 	ldw	r2,-24(fp)
    4568:	1000090e 	bge	r2,zero,4590 <open+0x144>
  {
    alt_release_fd (index);  
    456c:	e13ff917 	ldw	r4,-28(fp)
    4570:	00045a80 	call	45a8 <alt_release_fd>
    ALT_ERRNO = -status;
    4574:	00043240 	call	4324 <alt_get_errno>
    4578:	1007883a 	mov	r3,r2
    457c:	e0bffa17 	ldw	r2,-24(fp)
    4580:	0085c83a 	sub	r2,zero,r2
    4584:	18800015 	stw	r2,0(r3)
    return -1;
    4588:	00bfffc4 	movi	r2,-1
    458c:	00000106 	br	4594 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    4590:	e0bff917 	ldw	r2,-28(fp)
}
    4594:	e037883a 	mov	sp,fp
    4598:	dfc00117 	ldw	ra,4(sp)
    459c:	df000017 	ldw	fp,0(sp)
    45a0:	dec00204 	addi	sp,sp,8
    45a4:	f800283a 	ret

000045a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    45a8:	defffc04 	addi	sp,sp,-16
    45ac:	dfc00315 	stw	ra,12(sp)
    45b0:	df000215 	stw	fp,8(sp)
    45b4:	dc000115 	stw	r16,4(sp)
    45b8:	df000204 	addi	fp,sp,8
    45bc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    45c0:	e0bffe17 	ldw	r2,-8(fp)
    45c4:	108000d0 	cmplti	r2,r2,3
    45c8:	1000111e 	bne	r2,zero,4610 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    45cc:	04000034 	movhi	r16,0
    45d0:	84197f04 	addi	r16,r16,26108
    45d4:	e0bffe17 	ldw	r2,-8(fp)
    45d8:	01400304 	movi	r5,12
    45dc:	1009883a 	mov	r4,r2
    45e0:	0002c340 	call	2c34 <__mulsi3>
    45e4:	8085883a 	add	r2,r16,r2
    45e8:	10800204 	addi	r2,r2,8
    45ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    45f0:	04000034 	movhi	r16,0
    45f4:	84197f04 	addi	r16,r16,26108
    45f8:	e0bffe17 	ldw	r2,-8(fp)
    45fc:	01400304 	movi	r5,12
    4600:	1009883a 	mov	r4,r2
    4604:	0002c340 	call	2c34 <__mulsi3>
    4608:	8085883a 	add	r2,r16,r2
    460c:	10000015 	stw	zero,0(r2)
  }
}
    4610:	0001883a 	nop
    4614:	e6ffff04 	addi	sp,fp,-4
    4618:	dfc00217 	ldw	ra,8(sp)
    461c:	df000117 	ldw	fp,4(sp)
    4620:	dc000017 	ldw	r16,0(sp)
    4624:	dec00304 	addi	sp,sp,12
    4628:	f800283a 	ret

0000462c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    462c:	defffa04 	addi	sp,sp,-24
    4630:	df000515 	stw	fp,20(sp)
    4634:	df000504 	addi	fp,sp,20
    4638:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    463c:	0005303a 	rdctl	r2,status
    4640:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4644:	e0fffc17 	ldw	r3,-16(fp)
    4648:	00bfff84 	movi	r2,-2
    464c:	1884703a 	and	r2,r3,r2
    4650:	1001703a 	wrctl	status,r2
  
  return context;
    4654:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4658:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    465c:	e0bfff17 	ldw	r2,-4(fp)
    4660:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4664:	e0bffd17 	ldw	r2,-12(fp)
    4668:	10800017 	ldw	r2,0(r2)
    466c:	e0fffd17 	ldw	r3,-12(fp)
    4670:	18c00117 	ldw	r3,4(r3)
    4674:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    4678:	e0bffd17 	ldw	r2,-12(fp)
    467c:	10800117 	ldw	r2,4(r2)
    4680:	e0fffd17 	ldw	r3,-12(fp)
    4684:	18c00017 	ldw	r3,0(r3)
    4688:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    468c:	e0bffd17 	ldw	r2,-12(fp)
    4690:	e0fffd17 	ldw	r3,-12(fp)
    4694:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    4698:	e0bffd17 	ldw	r2,-12(fp)
    469c:	e0fffd17 	ldw	r3,-12(fp)
    46a0:	10c00015 	stw	r3,0(r2)
    46a4:	e0bffb17 	ldw	r2,-20(fp)
    46a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46ac:	e0bffe17 	ldw	r2,-8(fp)
    46b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    46b4:	0001883a 	nop
    46b8:	e037883a 	mov	sp,fp
    46bc:	df000017 	ldw	fp,0(sp)
    46c0:	dec00104 	addi	sp,sp,4
    46c4:	f800283a 	ret

000046c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    46c8:	defffb04 	addi	sp,sp,-20
    46cc:	dfc00415 	stw	ra,16(sp)
    46d0:	df000315 	stw	fp,12(sp)
    46d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    46d8:	d0a00a17 	ldw	r2,-32728(gp)
    46dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    46e0:	d0a4d917 	ldw	r2,-27804(gp)
    46e4:	10800044 	addi	r2,r2,1
    46e8:	d0a4d915 	stw	r2,-27804(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    46ec:	00002e06 	br	47a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    46f0:	e0bffd17 	ldw	r2,-12(fp)
    46f4:	10800017 	ldw	r2,0(r2)
    46f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    46fc:	e0bffd17 	ldw	r2,-12(fp)
    4700:	10800403 	ldbu	r2,16(r2)
    4704:	10803fcc 	andi	r2,r2,255
    4708:	10000426 	beq	r2,zero,471c <alt_tick+0x54>
    470c:	d0a4d917 	ldw	r2,-27804(gp)
    4710:	1000021e 	bne	r2,zero,471c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    4714:	e0bffd17 	ldw	r2,-12(fp)
    4718:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    471c:	e0bffd17 	ldw	r2,-12(fp)
    4720:	10800217 	ldw	r2,8(r2)
    4724:	d0e4d917 	ldw	r3,-27804(gp)
    4728:	18801d36 	bltu	r3,r2,47a0 <alt_tick+0xd8>
    472c:	e0bffd17 	ldw	r2,-12(fp)
    4730:	10800403 	ldbu	r2,16(r2)
    4734:	10803fcc 	andi	r2,r2,255
    4738:	1000191e 	bne	r2,zero,47a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    473c:	e0bffd17 	ldw	r2,-12(fp)
    4740:	10800317 	ldw	r2,12(r2)
    4744:	e0fffd17 	ldw	r3,-12(fp)
    4748:	18c00517 	ldw	r3,20(r3)
    474c:	1809883a 	mov	r4,r3
    4750:	103ee83a 	callr	r2
    4754:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4758:	e0bfff17 	ldw	r2,-4(fp)
    475c:	1000031e 	bne	r2,zero,476c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    4760:	e13ffd17 	ldw	r4,-12(fp)
    4764:	000462c0 	call	462c <alt_alarm_stop>
    4768:	00000d06 	br	47a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    476c:	e0bffd17 	ldw	r2,-12(fp)
    4770:	10c00217 	ldw	r3,8(r2)
    4774:	e0bfff17 	ldw	r2,-4(fp)
    4778:	1887883a 	add	r3,r3,r2
    477c:	e0bffd17 	ldw	r2,-12(fp)
    4780:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4784:	e0bffd17 	ldw	r2,-12(fp)
    4788:	10c00217 	ldw	r3,8(r2)
    478c:	d0a4d917 	ldw	r2,-27804(gp)
    4790:	1880032e 	bgeu	r3,r2,47a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    4794:	e0bffd17 	ldw	r2,-12(fp)
    4798:	00c00044 	movi	r3,1
    479c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    47a0:	e0bffe17 	ldw	r2,-8(fp)
    47a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    47a8:	e0fffd17 	ldw	r3,-12(fp)
    47ac:	d0a00a04 	addi	r2,gp,-32728
    47b0:	18bfcf1e 	bne	r3,r2,46f0 <_gp+0xffff5f74>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    47b4:	0001883a 	nop
}
    47b8:	0001883a 	nop
    47bc:	e037883a 	mov	sp,fp
    47c0:	dfc00117 	ldw	ra,4(sp)
    47c4:	df000017 	ldw	fp,0(sp)
    47c8:	dec00204 	addi	sp,sp,8
    47cc:	f800283a 	ret

000047d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    47d0:	deffff04 	addi	sp,sp,-4
    47d4:	df000015 	stw	fp,0(sp)
    47d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    47dc:	000170fa 	wrctl	ienable,zero
}
    47e0:	0001883a 	nop
    47e4:	e037883a 	mov	sp,fp
    47e8:	df000017 	ldw	fp,0(sp)
    47ec:	dec00104 	addi	sp,sp,4
    47f0:	f800283a 	ret

000047f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    47f4:	defffa04 	addi	sp,sp,-24
    47f8:	dfc00515 	stw	ra,20(sp)
    47fc:	df000415 	stw	fp,16(sp)
    4800:	df000404 	addi	fp,sp,16
    4804:	e13ffe15 	stw	r4,-8(fp)
    4808:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    480c:	e0bfff17 	ldw	r2,-4(fp)
    4810:	10800017 	ldw	r2,0(r2)
    4814:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4818:	e13ffe17 	ldw	r4,-8(fp)
    481c:	00023a00 	call	23a0 <strlen>
    4820:	10800044 	addi	r2,r2,1
    4824:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4828:	00000d06 	br	4860 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    482c:	e0bffc17 	ldw	r2,-16(fp)
    4830:	10800217 	ldw	r2,8(r2)
    4834:	e0fffd17 	ldw	r3,-12(fp)
    4838:	180d883a 	mov	r6,r3
    483c:	e17ffe17 	ldw	r5,-8(fp)
    4840:	1009883a 	mov	r4,r2
    4844:	0004b0c0 	call	4b0c <memcmp>
    4848:	1000021e 	bne	r2,zero,4854 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    484c:	e0bffc17 	ldw	r2,-16(fp)
    4850:	00000706 	br	4870 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4854:	e0bffc17 	ldw	r2,-16(fp)
    4858:	10800017 	ldw	r2,0(r2)
    485c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4860:	e0fffc17 	ldw	r3,-16(fp)
    4864:	e0bfff17 	ldw	r2,-4(fp)
    4868:	18bff01e 	bne	r3,r2,482c <_gp+0xffff60b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    486c:	0005883a 	mov	r2,zero
}
    4870:	e037883a 	mov	sp,fp
    4874:	dfc00117 	ldw	ra,4(sp)
    4878:	df000017 	ldw	fp,0(sp)
    487c:	dec00204 	addi	sp,sp,8
    4880:	f800283a 	ret

00004884 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4884:	defffb04 	addi	sp,sp,-20
    4888:	dfc00415 	stw	ra,16(sp)
    488c:	df000315 	stw	fp,12(sp)
    4890:	df000304 	addi	fp,sp,12
    4894:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4898:	d0a00317 	ldw	r2,-32756(gp)
    489c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    48a0:	00003106 	br	4968 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    48a4:	e0bffd17 	ldw	r2,-12(fp)
    48a8:	10800217 	ldw	r2,8(r2)
    48ac:	1009883a 	mov	r4,r2
    48b0:	00023a00 	call	23a0 <strlen>
    48b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    48b8:	e0bffd17 	ldw	r2,-12(fp)
    48bc:	10c00217 	ldw	r3,8(r2)
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	10bfffc4 	addi	r2,r2,-1
    48c8:	1885883a 	add	r2,r3,r2
    48cc:	10800003 	ldbu	r2,0(r2)
    48d0:	10803fcc 	andi	r2,r2,255
    48d4:	1080201c 	xori	r2,r2,128
    48d8:	10bfe004 	addi	r2,r2,-128
    48dc:	10800bd8 	cmpnei	r2,r2,47
    48e0:	1000031e 	bne	r2,zero,48f0 <alt_find_file+0x6c>
    {
      len -= 1;
    48e4:	e0bffe17 	ldw	r2,-8(fp)
    48e8:	10bfffc4 	addi	r2,r2,-1
    48ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    48f0:	e0bffe17 	ldw	r2,-8(fp)
    48f4:	e0ffff17 	ldw	r3,-4(fp)
    48f8:	1885883a 	add	r2,r3,r2
    48fc:	10800003 	ldbu	r2,0(r2)
    4900:	10803fcc 	andi	r2,r2,255
    4904:	1080201c 	xori	r2,r2,128
    4908:	10bfe004 	addi	r2,r2,-128
    490c:	10800be0 	cmpeqi	r2,r2,47
    4910:	1000081e 	bne	r2,zero,4934 <alt_find_file+0xb0>
    4914:	e0bffe17 	ldw	r2,-8(fp)
    4918:	e0ffff17 	ldw	r3,-4(fp)
    491c:	1885883a 	add	r2,r3,r2
    4920:	10800003 	ldbu	r2,0(r2)
    4924:	10803fcc 	andi	r2,r2,255
    4928:	1080201c 	xori	r2,r2,128
    492c:	10bfe004 	addi	r2,r2,-128
    4930:	10000a1e 	bne	r2,zero,495c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    4934:	e0bffd17 	ldw	r2,-12(fp)
    4938:	10800217 	ldw	r2,8(r2)
    493c:	e0fffe17 	ldw	r3,-8(fp)
    4940:	180d883a 	mov	r6,r3
    4944:	e17fff17 	ldw	r5,-4(fp)
    4948:	1009883a 	mov	r4,r2
    494c:	0004b0c0 	call	4b0c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4950:	1000021e 	bne	r2,zero,495c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4954:	e0bffd17 	ldw	r2,-12(fp)
    4958:	00000706 	br	4978 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    495c:	e0bffd17 	ldw	r2,-12(fp)
    4960:	10800017 	ldw	r2,0(r2)
    4964:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4968:	e0fffd17 	ldw	r3,-12(fp)
    496c:	d0a00304 	addi	r2,gp,-32756
    4970:	18bfcc1e 	bne	r3,r2,48a4 <_gp+0xffff6128>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    4974:	0005883a 	mov	r2,zero
}
    4978:	e037883a 	mov	sp,fp
    497c:	dfc00117 	ldw	ra,4(sp)
    4980:	df000017 	ldw	fp,0(sp)
    4984:	dec00204 	addi	sp,sp,8
    4988:	f800283a 	ret

0000498c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    498c:	defffa04 	addi	sp,sp,-24
    4990:	dfc00515 	stw	ra,20(sp)
    4994:	df000415 	stw	fp,16(sp)
    4998:	dc000315 	stw	r16,12(sp)
    499c:	df000404 	addi	fp,sp,16
    49a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    49a4:	00bffa04 	movi	r2,-24
    49a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    49ac:	e03ffc15 	stw	zero,-16(fp)
    49b0:	00001d06 	br	4a28 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    49b4:	04000034 	movhi	r16,0
    49b8:	84197f04 	addi	r16,r16,26108
    49bc:	e0bffc17 	ldw	r2,-16(fp)
    49c0:	01400304 	movi	r5,12
    49c4:	1009883a 	mov	r4,r2
    49c8:	0002c340 	call	2c34 <__mulsi3>
    49cc:	8085883a 	add	r2,r16,r2
    49d0:	10800017 	ldw	r2,0(r2)
    49d4:	1000111e 	bne	r2,zero,4a1c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    49d8:	04000034 	movhi	r16,0
    49dc:	84197f04 	addi	r16,r16,26108
    49e0:	e0bffc17 	ldw	r2,-16(fp)
    49e4:	01400304 	movi	r5,12
    49e8:	1009883a 	mov	r4,r2
    49ec:	0002c340 	call	2c34 <__mulsi3>
    49f0:	8085883a 	add	r2,r16,r2
    49f4:	e0fffe17 	ldw	r3,-8(fp)
    49f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    49fc:	d0e00717 	ldw	r3,-32740(gp)
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	1880020e 	bge	r3,r2,4a10 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    4a08:	e0bffc17 	ldw	r2,-16(fp)
    4a0c:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
    4a10:	e0bffc17 	ldw	r2,-16(fp)
    4a14:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    4a18:	00000606 	br	4a34 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4a1c:	e0bffc17 	ldw	r2,-16(fp)
    4a20:	10800044 	addi	r2,r2,1
    4a24:	e0bffc15 	stw	r2,-16(fp)
    4a28:	e0bffc17 	ldw	r2,-16(fp)
    4a2c:	10800810 	cmplti	r2,r2,32
    4a30:	103fe01e 	bne	r2,zero,49b4 <_gp+0xffff6238>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4a34:	e0bffd17 	ldw	r2,-12(fp)
}
    4a38:	e6ffff04 	addi	sp,fp,-4
    4a3c:	dfc00217 	ldw	ra,8(sp)
    4a40:	df000117 	ldw	fp,4(sp)
    4a44:	dc000017 	ldw	r16,0(sp)
    4a48:	dec00304 	addi	sp,sp,12
    4a4c:	f800283a 	ret

00004a50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    4a50:	defffe04 	addi	sp,sp,-8
    4a54:	df000115 	stw	fp,4(sp)
    4a58:	df000104 	addi	fp,sp,4
    4a5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    4a60:	e0bfff17 	ldw	r2,-4(fp)
    4a64:	10bffe84 	addi	r2,r2,-6
    4a68:	10c00428 	cmpgeui	r3,r2,16
    4a6c:	18001a1e 	bne	r3,zero,4ad8 <alt_exception_cause_generated_bad_addr+0x88>
    4a70:	100690ba 	slli	r3,r2,2
    4a74:	00800034 	movhi	r2,0
    4a78:	1092a204 	addi	r2,r2,19080
    4a7c:	1885883a 	add	r2,r3,r2
    4a80:	10800017 	ldw	r2,0(r2)
    4a84:	1000683a 	jmp	r2
    4a88:	00004ac8 	cmpgei	zero,zero,299
    4a8c:	00004ac8 	cmpgei	zero,zero,299
    4a90:	00004ad8 	cmpnei	zero,zero,299
    4a94:	00004ad8 	cmpnei	zero,zero,299
    4a98:	00004ad8 	cmpnei	zero,zero,299
    4a9c:	00004ac8 	cmpgei	zero,zero,299
    4aa0:	00004ad0 	cmplti	zero,zero,299
    4aa4:	00004ad8 	cmpnei	zero,zero,299
    4aa8:	00004ac8 	cmpgei	zero,zero,299
    4aac:	00004ac8 	cmpgei	zero,zero,299
    4ab0:	00004ad8 	cmpnei	zero,zero,299
    4ab4:	00004ac8 	cmpgei	zero,zero,299
    4ab8:	00004ad0 	cmplti	zero,zero,299
    4abc:	00004ad8 	cmpnei	zero,zero,299
    4ac0:	00004ad8 	cmpnei	zero,zero,299
    4ac4:	00004ac8 	cmpgei	zero,zero,299
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    4ac8:	00800044 	movi	r2,1
    4acc:	00000306 	br	4adc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    4ad0:	0005883a 	mov	r2,zero
    4ad4:	00000106 	br	4adc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    4ad8:	0005883a 	mov	r2,zero
  }
}
    4adc:	e037883a 	mov	sp,fp
    4ae0:	df000017 	ldw	fp,0(sp)
    4ae4:	dec00104 	addi	sp,sp,4
    4ae8:	f800283a 	ret

00004aec <exit>:
    4aec:	defffe04 	addi	sp,sp,-8
    4af0:	000b883a 	mov	r5,zero
    4af4:	dc000015 	stw	r16,0(sp)
    4af8:	dfc00115 	stw	ra,4(sp)
    4afc:	2021883a 	mov	r16,r4
    4b00:	0004b640 	call	4b64 <__call_exitprocs>
    4b04:	8009883a 	mov	r4,r16
    4b08:	0004cf40 	call	4cf4 <_exit>

00004b0c <memcmp>:
    4b0c:	218d883a 	add	r6,r4,r6
    4b10:	21800826 	beq	r4,r6,4b34 <memcmp+0x28>
    4b14:	20800003 	ldbu	r2,0(r4)
    4b18:	28c00003 	ldbu	r3,0(r5)
    4b1c:	10c00226 	beq	r2,r3,4b28 <memcmp+0x1c>
    4b20:	10c5c83a 	sub	r2,r2,r3
    4b24:	f800283a 	ret
    4b28:	21000044 	addi	r4,r4,1
    4b2c:	29400044 	addi	r5,r5,1
    4b30:	003ff706 	br	4b10 <_gp+0xffff6394>
    4b34:	0005883a 	mov	r2,zero
    4b38:	f800283a 	ret

00004b3c <memcpy>:
    4b3c:	2005883a 	mov	r2,r4
    4b40:	2007883a 	mov	r3,r4
    4b44:	218d883a 	add	r6,r4,r6
    4b48:	19800526 	beq	r3,r6,4b60 <memcpy+0x24>
    4b4c:	29000003 	ldbu	r4,0(r5)
    4b50:	18c00044 	addi	r3,r3,1
    4b54:	29400044 	addi	r5,r5,1
    4b58:	193fffc5 	stb	r4,-1(r3)
    4b5c:	003ffa06 	br	4b48 <_gp+0xffff63cc>
    4b60:	f800283a 	ret

00004b64 <__call_exitprocs>:
    4b64:	defff504 	addi	sp,sp,-44
    4b68:	dd000515 	stw	r20,20(sp)
    4b6c:	05000034 	movhi	r20,0
    4b70:	dc800315 	stw	r18,12(sp)
    4b74:	dfc00a15 	stw	ra,40(sp)
    4b78:	df000915 	stw	fp,36(sp)
    4b7c:	ddc00815 	stw	r23,32(sp)
    4b80:	dd800715 	stw	r22,28(sp)
    4b84:	dd400615 	stw	r21,24(sp)
    4b88:	dcc00415 	stw	r19,16(sp)
    4b8c:	dc400215 	stw	r17,8(sp)
    4b90:	dc000115 	stw	r16,4(sp)
    4b94:	d9000015 	stw	r4,0(sp)
    4b98:	2825883a 	mov	r18,r5
    4b9c:	a519e004 	addi	r20,r20,26496
    4ba0:	a4400017 	ldw	r17,0(r20)
    4ba4:	8cc00c17 	ldw	r19,48(r17)
    4ba8:	8c400c04 	addi	r17,r17,48
    4bac:	98004526 	beq	r19,zero,4cc4 <__call_exitprocs+0x160>
    4bb0:	9c000117 	ldw	r16,4(r19)
    4bb4:	00900034 	movhi	r2,16384
    4bb8:	10bfffc4 	addi	r2,r2,-1
    4bbc:	9d402217 	ldw	r21,136(r19)
    4bc0:	85bfffc4 	addi	r22,r16,-1
    4bc4:	80a1883a 	add	r16,r16,r2
    4bc8:	8421883a 	add	r16,r16,r16
    4bcc:	8421883a 	add	r16,r16,r16
    4bd0:	ac2f883a 	add	r23,r21,r16
    4bd4:	84000204 	addi	r16,r16,8
    4bd8:	9c21883a 	add	r16,r19,r16
    4bdc:	b0002716 	blt	r22,zero,4c7c <__call_exitprocs+0x118>
    4be0:	90000726 	beq	r18,zero,4c00 <__call_exitprocs+0x9c>
    4be4:	a800041e 	bne	r21,zero,4bf8 <__call_exitprocs+0x94>
    4be8:	b5bfffc4 	addi	r22,r22,-1
    4bec:	bdffff04 	addi	r23,r23,-4
    4bf0:	843fff04 	addi	r16,r16,-4
    4bf4:	003ff906 	br	4bdc <_gp+0xffff6460>
    4bf8:	b9002017 	ldw	r4,128(r23)
    4bfc:	913ffa1e 	bne	r18,r4,4be8 <_gp+0xffff646c>
    4c00:	99000117 	ldw	r4,4(r19)
    4c04:	82000017 	ldw	r8,0(r16)
    4c08:	213fffc4 	addi	r4,r4,-1
    4c0c:	b100021e 	bne	r22,r4,4c18 <__call_exitprocs+0xb4>
    4c10:	9d800115 	stw	r22,4(r19)
    4c14:	00000106 	br	4c1c <__call_exitprocs+0xb8>
    4c18:	80000015 	stw	zero,0(r16)
    4c1c:	403ff226 	beq	r8,zero,4be8 <_gp+0xffff646c>
    4c20:	9f000117 	ldw	fp,4(r19)
    4c24:	a8000526 	beq	r21,zero,4c3c <__call_exitprocs+0xd8>
    4c28:	00800044 	movi	r2,1
    4c2c:	1592983a 	sll	r9,r2,r22
    4c30:	a9404017 	ldw	r5,256(r21)
    4c34:	494a703a 	and	r5,r9,r5
    4c38:	2800021e 	bne	r5,zero,4c44 <__call_exitprocs+0xe0>
    4c3c:	403ee83a 	callr	r8
    4c40:	00000906 	br	4c68 <__call_exitprocs+0x104>
    4c44:	a9004117 	ldw	r4,260(r21)
    4c48:	4908703a 	and	r4,r9,r4
    4c4c:	2000041e 	bne	r4,zero,4c60 <__call_exitprocs+0xfc>
    4c50:	b9400017 	ldw	r5,0(r23)
    4c54:	d9000017 	ldw	r4,0(sp)
    4c58:	403ee83a 	callr	r8
    4c5c:	00000206 	br	4c68 <__call_exitprocs+0x104>
    4c60:	b9000017 	ldw	r4,0(r23)
    4c64:	403ee83a 	callr	r8
    4c68:	99000117 	ldw	r4,4(r19)
    4c6c:	e13fcc1e 	bne	fp,r4,4ba0 <_gp+0xffff6424>
    4c70:	89000017 	ldw	r4,0(r17)
    4c74:	993fdc26 	beq	r19,r4,4be8 <_gp+0xffff646c>
    4c78:	003fc906 	br	4ba0 <_gp+0xffff6424>
    4c7c:	00800034 	movhi	r2,0
    4c80:	10800004 	addi	r2,r2,0
    4c84:	10000f26 	beq	r2,zero,4cc4 <__call_exitprocs+0x160>
    4c88:	99400117 	ldw	r5,4(r19)
    4c8c:	99000017 	ldw	r4,0(r19)
    4c90:	2800091e 	bne	r5,zero,4cb8 <__call_exitprocs+0x154>
    4c94:	20000826 	beq	r4,zero,4cb8 <__call_exitprocs+0x154>
    4c98:	89000015 	stw	r4,0(r17)
    4c9c:	a8000226 	beq	r21,zero,4ca8 <__call_exitprocs+0x144>
    4ca0:	a809883a 	mov	r4,r21
    4ca4:	00000000 	call	0 <__alt_mem_USB_onchip_mem>
    4ca8:	9809883a 	mov	r4,r19
    4cac:	00000000 	call	0 <__alt_mem_USB_onchip_mem>
    4cb0:	8cc00017 	ldw	r19,0(r17)
    4cb4:	003fbd06 	br	4bac <_gp+0xffff6430>
    4cb8:	9823883a 	mov	r17,r19
    4cbc:	2027883a 	mov	r19,r4
    4cc0:	003fba06 	br	4bac <_gp+0xffff6430>
    4cc4:	dfc00a17 	ldw	ra,40(sp)
    4cc8:	df000917 	ldw	fp,36(sp)
    4ccc:	ddc00817 	ldw	r23,32(sp)
    4cd0:	dd800717 	ldw	r22,28(sp)
    4cd4:	dd400617 	ldw	r21,24(sp)
    4cd8:	dd000517 	ldw	r20,20(sp)
    4cdc:	dcc00417 	ldw	r19,16(sp)
    4ce0:	dc800317 	ldw	r18,12(sp)
    4ce4:	dc400217 	ldw	r17,8(sp)
    4ce8:	dc000117 	ldw	r16,4(sp)
    4cec:	dec00b04 	addi	sp,sp,44
    4cf0:	f800283a 	ret

00004cf4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4cf4:	defffd04 	addi	sp,sp,-12
    4cf8:	df000215 	stw	fp,8(sp)
    4cfc:	df000204 	addi	fp,sp,8
    4d00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4d04:	0001883a 	nop
    4d08:	e0bfff17 	ldw	r2,-4(fp)
    4d0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4d10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4d14:	10000226 	beq	r2,zero,4d20 <_exit+0x2c>
    ALT_SIM_FAIL();
    4d18:	002af070 	cmpltui	zero,zero,43969
    4d1c:	00000106 	br	4d24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4d20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4d24:	003fff06 	br	4d24 <_gp+0xffff65a8>
