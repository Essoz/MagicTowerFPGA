
main_control.elf:     file format elf32-littlenios2
main_control.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020270

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005900 memsz 0x00005900 flags rwx
    LOAD off    0x00006920 vaddr 0x00025920 paddr 0x00025c58 align 2**12
         filesz 0x00000338 memsz 0x00000338 flags rw-
    LOAD off    0x00006f90 vaddr 0x00025f90 paddr 0x00025f90 align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-
    LOAD off    0x00007000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x001854a0 memsz 0x001854a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .onchip       00000040  00020230  00020230  00001230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .resources    001854a0  10000000  10000000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00004fcc  00020270  00020270  00001270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       000006e4  0002523c  0002523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rwdata       00000338  00025920  00025c58  00006920  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  7 .bss          00000134  00025f90  00025f90  00006f90  2**2
                  ALLOC, SMALL_DATA
  8 .Mem_for_Game_Data 00000000  00010000  00010000  0018c4a0  2**0
                  CONTENTS
  9 .keycode_mem  00000000  00015010  00015010  0018c4a0  2**0
                  CONTENTS
 10 .Main_onchip_mem 00000000  000260c4  000260c4  0018c4a0  2**0
                  CONTENTS
 11 .Main_Soc_onchip_mem_for_Tiles 00000000  00030000  00030000  0018c4a0  2**0
                  CONTENTS
 12 .resource_sdram 00000000  101854a0  101854a0  0018c4a0  2**0
                  CONTENTS
 13 .comment      00000023  00000000  00000000  0018c4a0  2**0
                  CONTENTS, READONLY
 14 .debug_aranges 00000740  00000000  00000000  0018c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   00009fd6  00000000  00000000  0018cc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000347f  00000000  00000000  00196bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003e6c  00000000  00000000  0019a05d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  000013c4  00000000  00000000  0019decc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000263e  00000000  00000000  0019f290  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00001535  00000000  00000000  001a18ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_alt_sim_info 00000010  00000000  00000000  001a2e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000002d0  00000000  00000000  001a2e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .thread_model 00000003  00000000  00000000  001a58ca  2**0
                  CONTENTS, READONLY
 24 .cpu          00000008  00000000  00000000  001a58cd  2**0
                  CONTENTS, READONLY
 25 .qsys         00000001  00000000  00000000  001a58d5  2**0
                  CONTENTS, READONLY
 26 .simulation_enabled 00000001  00000000  00000000  001a58d6  2**0
                  CONTENTS, READONLY
 27 .sysid_hash   00000004  00000000  00000000  001a58d7  2**0
                  CONTENTS, READONLY
 28 .sysid_base   00000004  00000000  00000000  001a58db  2**0
                  CONTENTS, READONLY
 29 .sysid_time   00000004  00000000  00000000  001a58df  2**0
                  CONTENTS, READONLY
 30 .stderr_dev   0000000e  00000000  00000000  001a58e3  2**0
                  CONTENTS, READONLY
 31 .stdin_dev    0000000e  00000000  00000000  001a58f1  2**0
                  CONTENTS, READONLY
 32 .stdout_dev   0000000e  00000000  00000000  001a58ff  2**0
                  CONTENTS, READONLY
 33 .sopc_system_name 00000009  00000000  00000000  001a590d  2**0
                  CONTENTS, READONLY
 34 .quartus_project_dir 0000002b  00000000  00000000  001a5916  2**0
                  CONTENTS, READONLY
 35 .jdi          00009f55  00000000  00000000  001a5941  2**0
                  CONTENTS, READONLY
 36 .sopcinfo     000f4829  00000000  00000000  001af896  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .onchip	00000000 .onchip
10000000 l    d  .resources	00000000 .resources
00020270 l    d  .text	00000000 .text
0002523c l    d  .rodata	00000000 .rodata
00025920 l    d  .rwdata	00000000 .rwdata
00025f90 l    d  .bss	00000000 .bss
00010000 l    d  .Mem_for_Game_Data	00000000 .Mem_for_Game_Data
00015010 l    d  .keycode_mem	00000000 .keycode_mem
000260c4 l    d  .Main_onchip_mem	00000000 .Main_onchip_mem
00030000 l    d  .Main_Soc_onchip_mem_for_Tiles	00000000 .Main_Soc_onchip_mem_for_Tiles
101854a0 l    d  .resource_sdram	00000000 .resource_sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../main_control_bsp//obj/HAL/src/crt0.o
000202a8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 memcpy_dma.c
00000000 l    df *ABS*	00000000 chinese.c
00000000 l    df *ABS*	00000000 cover.c
00000000 l    df *ABS*	00000000 empty.c
00000000 l    df *ABS*	00000000 english_font.c
00000000 l    df *ABS*	00000000 gameover.c
00000000 l    df *ABS*	00000000 FixedTextDrawing.c
00000000 l    df *ABS*	00000000 cover_draw.c
00000000 l    df *ABS*	00000000 erase_draw.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 vga-helper.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00022738 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00025940 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
0002305c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000231b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000232f0 l     F .text	00000034 alt_dev_reg
00025a20 l     O .rwdata	0000002c Main_jtag_uart
00025a4c l     O .rwdata	00000030 sgdma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
000235e8 l     F .text	0000003c alt_get_errno
00024218 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_close.c
0002437c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000244d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024504 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024934 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024a94 l     F .text	0000003c alt_get_errno
00024ad0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00025fc0 g     O .bss	00000004 alt_instruction_exception_handler
0002266c g     F .text	0000001c putchar
00023148 g     F .text	0000006c alt_main
00022688 g     F .text	00000080 _puts_r
00025fc4 g     O .bss	00000100 alt_irq
00025c58 g       *ABS*	00000000 __flash_rwdata_start
00020250 g     O .onchip	00000020 dma_descriptor_end
00020720 g     F .text	00000068 draw_gameover_slow
00020f0c g     F .text	00000038 Change_Status
00022618 g     F .text	0000004c printf
00023748 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
000202ac g     F .text	000000a8 memcpy_dma
10000000 g     O .resources	000a34a0 font_data_zh
00023e60 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
00025f98 g     O .bss	00000004 encounter
00015010 g       *ABS*	00000000 __alt_mem_keycode_mem
0002571c g     O .rodata	00000020 Bat
00024d9c g     F .text	00000024 altera_nios2_gen2_irq_init
000256dc g     O .rodata	00000020 Green_Slime
00020000 g     F .entry	0000000c __reset
000239b0 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020230 g     O .onchip	00000020 dma_descriptor
00025fac g     O .bss	00000004 errno
00025fb4 g     O .bss	00000004 alt_argv
00020d84 g     F .text	000000f4 Move
0002dc24 g       *ABS*	00000000 _gp
00025920 g     O .rwdata	00000020 Moster_List
00021274 g     F .text	00000294 Do_Battle
00025aa4 g     O .rwdata	00000180 alt_fd_list
0002579c g     O .rodata	00000020 Magician_Lightning
00022664 g     F .text	00000008 _putchar_r
000245e4 g     F .text	00000090 alt_find_dev
00024a18 g     F .text	0000007c alt_io_redirect
00022708 g     F .text	00000014 puts
00024f8c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00020000 g       *ABS*	00000000 __alt_mem_Main_onchip_mem
00023aa8 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00023468 g     F .text	000000ec altera_avalon_jtag_uart_read
000225dc g     F .text	0000003c _printf_r
00022fa0 g     F .text	00000064 .hidden __udivsi3
000216ec g     F .text	000002b0 Print_All
00023be0 g     F .text	0000005c alt_avalon_sgdma_stop
00010000 g       *ABS*	00000000 __alt_mem_Mem_for_Game_Data
00024490 g     F .text	00000028 alt_dcache_flush
00022524 g     F .text	00000090 fb_test
00025c4c g     O .rwdata	00000004 alt_max_fd
00020e78 g     F .text	00000094 Increase_Attribute
000207d0 g     F .text	000000ac UpdateMap
00025c2c g     O .rwdata	00000004 _global_impure_ptr
000260c4 g       *ABS*	00000000 __bss_end
00024844 g     F .text	000000f0 alt_iic_isr_register
00023624 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
00021228 g     F .text	0000004c Go_DownStairs
10000000 g       *ABS*	00000000 __alt_mem_resource_sdram
000211b4 g     F .text	00000020 Meet_EXP_Store
00025f94 g     O .bss	00000004 Player_controller_base
000206d8 g     F .text	00000048 draw_gameover
000247f8 g     F .text	0000004c alt_ic_irq_enabled
00021d3c g     F .text	000000d8 fb_set
000205f0 g     F .text	000000e8 draw_cover
00025fbc g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00025a7c g     O .rwdata	00000028 alt_dev_null
00025300 g     O .rodata	00000014 Player_Status_Init
00023c3c g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
000244b8 g     F .text	00000020 alt_dcache_flush_all
00025c58 g       *ABS*	00000000 __ram_rwdata_end
00021e14 g     F .text	0000010c utf8_to_code
00025c44 g     O .rwdata	00000008 alt_dev_list
000231f0 g     F .text	00000100 write
00023d80 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
00022df8 g     F .text	00000058 _putc_r
00025920 g       *ABS*	00000000 __ram_rodata_end
00023004 g     F .text	00000058 .hidden __umodsi3
00023a28 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
0002573c g     O .rodata	00000020 Magician
00023b34 g     F .text	00000054 alt_avalon_sgdma_register_callback
000260c4 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00030000 g       *ABS*	00000000 __alt_stack_pointer
00023e00 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00023554 g     F .text	00000094 altera_avalon_jtag_uart_write
00023858 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
00025f9c g     O .bss	00000004 cur_floor
000205ac g     F .text	00000044 draw_all_text
00022130 g     F .text	000001e0 fb_char_zh
000227a4 g     F .text	0000052c ___vfprintf_internal_r
00023950 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
00025078 g     F .text	00000190 __call_exitprocs
0002087c g     F .text	00000138 Init_Game
00020270 g     F .text	0000003c _start
00022310 g     F .text	00000214 fb_string
00023ca0 g     F .text	00000054 alt_avalon_sgdma_open
1013a4a0 g     O .resources	0004b000 gameover
0002335c g     F .text	0000004c alt_sys_init
00025fa0 g     O .bss	00000004 cur_posX
000225b4 g     F .text	00000028 .hidden __mulsi3
00025920 g       *ABS*	00000000 __ram_rwdata_start
0002523c g       *ABS*	00000000 __ram_rodata_start
00020788 g     F .text	00000048 draw_erase
000233a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024ec8 g     F .text	000000c4 alt_get_fd
00025048 g     F .text	00000030 memcmp
000260c4 g       *ABS*	00000000 __alt_stack_base
000209b4 g     F .text	000000d4 Normal_Walk
00021508 g     F .text	000001e4 Battle
00024dc0 g     F .text	00000108 alt_find_file
00024540 g     F .text	000000a4 alt_dev_llist_insert
00023b88 g     F .text	00000058 alt_avalon_sgdma_start
00022cec g     F .text	000000b8 __sfvwrite_small_dev
00025f90 g       *ABS*	00000000 __bss_start
0002577c g     O .rodata	00000020 Guard
0002199c g     F .text	000003a0 main
00025fb8 g     O .bss	00000004 alt_envp
00023408 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00025c34 g     O .rwdata	00000008 alt_sgdma_list
00025c24 g     O .rwdata	00000004 Game_data_mem_base
00025c50 g     O .rwdata	00000004 alt_errno
000257bc g     O .rodata	00000020 Slime_Man
0002055c g     F .text	00000050 draw_floor_num
00022da4 g     F .text	00000054 putc
00022ea8 g     F .text	00000084 .hidden __divsi3
0002523c g       *ABS*	00000000 __flash_rodata_start
00023324 g     F .text	00000038 alt_irq_init
00024d18 g     F .text	00000084 alt_release_fd
0002575c g     O .rodata	00000020 Skeleton
00022e50 g     F .text	00000058 _write_r
000210e0 g     F .text	000000b4 Meet_Door
00025c30 g     O .rwdata	00000004 _impure_ptr
00025fb0 g     O .bss	00000004 alt_argc
100ee4a0 g     O .resources	0004b000 empty_arr
00020020 g       .exceptions	00000000 alt_irq_entry
00021194 g     F .text	00000020 Meet_Coin_Store
00025c3c g     O .rwdata	00000008 alt_fs_list
00020f44 g     F .text	0000019c Pick_Items
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024694 g     F .text	00000050 alt_ic_isr_register
00025f90 g     O .bss	00000004 dma_device
00025c58 g       *ABS*	00000000 _edata
000256fc g     O .rodata	00000020 Red_Slime
000260c4 g       *ABS*	00000000 _end
00020494 g     F .text	00000050 draw_press_l
00020230 g       *ABS*	00000000 __ram_exceptions_end
0002476c g     F .text	0000008c alt_ic_irq_disable
00023cf4 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
00025028 g     F .text	00000020 exit
00025fa4 g     O .bss	00000001 usb_key
00022f2c g     F .text	00000074 .hidden __modsi3
000211d4 g     F .text	00000054 Go_Upstairs
00021f20 g     F .text	00000088 utf8_len
00030000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020a88 g     F .text	000002fc Judge_the_block
00025fa8 g     O .bss	00000004 cur_posY
00025208 g     F .text	00000034 _exit
00025c28 g     O .rwdata	00000004 Keycode_mem_base
0002271c g     F .text	0000001c strlen
00020354 g     F .text	00000140 draw_table
00024bbc g     F .text	0000015c open
000204e4 g     F .text	00000078 draw_floor_text
00024674 g     F .text	00000020 alt_icache_flush_all
00025314 g     O .rodata	000003c8 Floor_Configuration_Init
00025c54 g     O .rwdata	00000004 alt_priority_mask
000246e4 g     F .text	00000088 alt_ic_irq_enable
101394a0 g     O .resources	00001000 font_data_en
00030000 g       *ABS*	00000000 __alt_mem_Main_Soc_onchip_mem_for_Tiles
00022cd0 g     F .text	0000001c __vfprintf_internal
000238cc g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
100a34a0 g     O .resources	0004b000 cover
00021fa8 g     F .text	00000188 fb_char_en
000243b8 g     F .text	000000d8 close
000230c4 g     F .text	00000084 alt_load
000242d4 g     F .text	000000a8 alt_avalon_sgdma_init



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08409c14 	ori	at,at,624
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	1097f104 	addi	r2,r2,24516
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	1097f104 	addi	r2,r2,24516
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <gameover+0xefee5c8c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <gameover+0xefee5c80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a0e717 	ldw	r2,-31844(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a0e717 	ldw	r2,-31844(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020270 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20270:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20274:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20278:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2027c:	d6b70914 	ori	gp,gp,56356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20280:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20284:	1097e414 	ori	r2,r2,24464

    movhi r3, %hi(__bss_end)
   20288:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2028c:	18d83114 	ori	r3,r3,24772

    beq r2, r3, 1f
   20290:	10c00326 	beq	r2,r3,202a0 <_start+0x30>

0:
    stw zero, (r2)
   20294:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20298:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2029c:	10fffd36 	bltu	r2,r3,20294 <gameover+0xefee5df4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   202a0:	00230c40 	call	230c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   202a4:	00231480 	call	23148 <alt_main>

000202a8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   202a8:	003fff06 	br	202a8 <gameover+0xefee5e08>

000202ac <memcpy_dma>:
// Allocate descriptors in the descriptor_memory (onchip memory)
alt_sgdma_descriptor dma_descriptor 	__attribute__((section(".onchip")));
alt_sgdma_descriptor dma_descriptor_end	__attribute__((section(".onchip")));
alt_sgdma_dev* dma_device = NULL;

uint32_t memcpy_dma(volatile void* to, void* from, uint16_t size) {
   202ac:	defff804 	addi	sp,sp,-32
   202b0:	dfc00715 	stw	ra,28(sp)
   202b4:	df000615 	stw	fp,24(sp)
   202b8:	df000604 	addi	fp,sp,24
   202bc:	e13ffd15 	stw	r4,-12(fp)
   202c0:	e17ffe15 	stw	r5,-8(fp)
   202c4:	3005883a 	mov	r2,r6
   202c8:	e0bfff0d 	sth	r2,-4(fp)
	if(!dma_device) {
   202cc:	d0a0db17 	ldw	r2,-31892(gp)
   202d0:	1000041e 	bne	r2,zero,202e4 <memcpy_dma+0x38>
		dma_device = alt_avalon_sgdma_open("/dev/sgdma_0");
   202d4:	010000b4 	movhi	r4,2
   202d8:	21148f04 	addi	r4,r4,21052
   202dc:	0023ca00 	call	23ca0 <alt_avalon_sgdma_open>
   202e0:	d0a0db15 	stw	r2,-31892(gp)
	}

	alt_avalon_sgdma_construct_mem_to_mem_desc(
   202e4:	e0bfff0b 	ldhu	r2,-4(fp)
   202e8:	d8000215 	stw	zero,8(sp)
   202ec:	d8000115 	stw	zero,4(sp)
   202f0:	d8800015 	stw	r2,0(sp)
   202f4:	e1fffd17 	ldw	r7,-12(fp)
   202f8:	e1bffe17 	ldw	r6,-8(fp)
   202fc:	014000b4 	movhi	r5,2
   20300:	29409404 	addi	r5,r5,592
   20304:	010000b4 	movhi	r4,2
   20308:	21008c04 	addi	r4,r4,560
   2030c:	00238580 	call	23858 <alt_avalon_sgdma_construct_mem_to_mem_desc>
			(void*) to,				// destination
			size,					// expected_bytes_transferred
			0,						// no fixed read address
			0						// no fixed write address
	);
	alt_avalon_sgdma_do_sync_transfer(dma_device, &dma_descriptor);
   20310:	d0a0db17 	ldw	r2,-31892(gp)
   20314:	014000b4 	movhi	r5,2
   20318:	29408c04 	addi	r5,r5,560
   2031c:	1009883a 	mov	r4,r2
   20320:	00237480 	call	23748 <alt_avalon_sgdma_do_sync_transfer>
	return dma_descriptor.actual_bytes_transferred;
   20324:	008000b4 	movhi	r2,2
   20328:	10808c04 	addi	r2,r2,560
   2032c:	10c00703 	ldbu	r3,28(r2)
   20330:	10800743 	ldbu	r2,29(r2)
   20334:	1004923a 	slli	r2,r2,8
   20338:	10c4b03a 	or	r2,r2,r3
   2033c:	10bfffcc 	andi	r2,r2,65535
}
   20340:	e037883a 	mov	sp,fp
   20344:	dfc00117 	ldw	ra,4(sp)
   20348:	df000017 	ldw	fp,0(sp)
   2034c:	dec00204 	addi	sp,sp,8
   20350:	f800283a 	ret

00020354 <draw_table>:
#include "FixedTextDrawing.h"


void draw_table(){
   20354:	defffc04 	addi	sp,sp,-16
   20358:	dfc00315 	stw	ra,12(sp)
   2035c:	df000215 	stw	fp,8(sp)
   20360:	df000204 	addi	fp,sp,8
    fb_string(64, 40, 1, 1, 640, "状态正常");
   20364:	008000b4 	movhi	r2,2
   20368:	10949304 	addi	r2,r2,21068
   2036c:	d8800115 	stw	r2,4(sp)
   20370:	0080a004 	movi	r2,640
   20374:	d8800015 	stw	r2,0(sp)
   20378:	01c00044 	movi	r7,1
   2037c:	01800044 	movi	r6,1
   20380:	01400a04 	movi	r5,40
   20384:	01001004 	movi	r4,64
   20388:	00223100 	call	22310 <fb_string>

    fb_string(32 + 4,64+4, 1, 1, 640, "等级");   // TODO: Set 1
   2038c:	008000b4 	movhi	r2,2
   20390:	10949704 	addi	r2,r2,21084
   20394:	d8800115 	stw	r2,4(sp)
   20398:	0080a004 	movi	r2,640
   2039c:	d8800015 	stw	r2,0(sp)
   203a0:	01c00044 	movi	r7,1
   203a4:	01800044 	movi	r6,1
   203a8:	01401104 	movi	r5,68
   203ac:	01000904 	movi	r4,36
   203b0:	00223100 	call	22310 <fb_string>
    fb_string(32 + 4,89+4, 1, 1, 640, "体力");
   203b4:	008000b4 	movhi	r2,2
   203b8:	10949904 	addi	r2,r2,21092
   203bc:	d8800115 	stw	r2,4(sp)
   203c0:	0080a004 	movi	r2,640
   203c4:	d8800015 	stw	r2,0(sp)
   203c8:	01c00044 	movi	r7,1
   203cc:	01800044 	movi	r6,1
   203d0:	01401744 	movi	r5,93
   203d4:	01000904 	movi	r4,36
   203d8:	00223100 	call	22310 <fb_string>
    fb_string(32 + 4,114+4, 1, 1, 640, "攻击");
   203dc:	008000b4 	movhi	r2,2
   203e0:	10949b04 	addi	r2,r2,21100
   203e4:	d8800115 	stw	r2,4(sp)
   203e8:	0080a004 	movi	r2,640
   203ec:	d8800015 	stw	r2,0(sp)
   203f0:	01c00044 	movi	r7,1
   203f4:	01800044 	movi	r6,1
   203f8:	01401d84 	movi	r5,118
   203fc:	01000904 	movi	r4,36
   20400:	00223100 	call	22310 <fb_string>
    fb_string(32 + 4,139+4, 1, 1, 640, "防御");
   20404:	008000b4 	movhi	r2,2
   20408:	10949d04 	addi	r2,r2,21108
   2040c:	d8800115 	stw	r2,4(sp)
   20410:	0080a004 	movi	r2,640
   20414:	d8800015 	stw	r2,0(sp)
   20418:	01c00044 	movi	r7,1
   2041c:	01800044 	movi	r6,1
   20420:	014023c4 	movi	r5,143
   20424:	01000904 	movi	r4,36
   20428:	00223100 	call	22310 <fb_string>
    fb_string(32 + 4,164+4, 1, 1, 640, "经验值");
   2042c:	008000b4 	movhi	r2,2
   20430:	10949f04 	addi	r2,r2,21116
   20434:	d8800115 	stw	r2,4(sp)
   20438:	0080a004 	movi	r2,640
   2043c:	d8800015 	stw	r2,0(sp)
   20440:	01c00044 	movi	r7,1
   20444:	01800044 	movi	r6,1
   20448:	01402a04 	movi	r5,168
   2044c:	01000904 	movi	r4,36
   20450:	00223100 	call	22310 <fb_string>

    fb_string(48, 189, 1, 1, 640, "气息");
   20454:	008000b4 	movhi	r2,2
   20458:	1094a204 	addi	r2,r2,21128
   2045c:	d8800115 	stw	r2,4(sp)
   20460:	0080a004 	movi	r2,640
   20464:	d8800015 	stw	r2,0(sp)
   20468:	01c00044 	movi	r7,1
   2046c:	01800044 	movi	r6,1
   20470:	01402f44 	movi	r5,189
   20474:	01000c04 	movi	r4,48
   20478:	00223100 	call	22310 <fb_string>

}
   2047c:	0001883a 	nop
   20480:	e037883a 	mov	sp,fp
   20484:	dfc00117 	ldw	ra,4(sp)
   20488:	df000017 	ldw	fp,0(sp)
   2048c:	dec00204 	addi	sp,sp,8
   20490:	f800283a 	ret

00020494 <draw_press_l>:
void draw_press_l(){
   20494:	defffc04 	addi	sp,sp,-16
   20498:	dfc00315 	stw	ra,12(sp)
   2049c:	df000215 	stw	fp,8(sp)
   204a0:	df000204 	addi	fp,sp,8
    fb_string(32*14, 32 * 12, 2, 1, 32 * 18, "Press-L");
   204a4:	008000b4 	movhi	r2,2
   204a8:	1094a404 	addi	r2,r2,21136
   204ac:	d8800115 	stw	r2,4(sp)
   204b0:	00809004 	movi	r2,576
   204b4:	d8800015 	stw	r2,0(sp)
   204b8:	01c00044 	movi	r7,1
   204bc:	01800084 	movi	r6,2
   204c0:	01406004 	movi	r5,384
   204c4:	01007004 	movi	r4,448
   204c8:	00223100 	call	22310 <fb_string>
}
   204cc:	0001883a 	nop
   204d0:	e037883a 	mov	sp,fp
   204d4:	dfc00117 	ldw	ra,4(sp)
   204d8:	df000017 	ldw	fp,0(sp)
   204dc:	dec00204 	addi	sp,sp,8
   204e0:	f800283a 	ret

000204e4 <draw_floor_text>:

void draw_floor_text(){
   204e4:	defffc04 	addi	sp,sp,-16
   204e8:	dfc00315 	stw	ra,12(sp)
   204ec:	df000215 	stw	fp,8(sp)
   204f0:	df000204 	addi	fp,sp,8

    fb_string(11*32, 8, 1, 0, 640, "主塔");
   204f4:	008000b4 	movhi	r2,2
   204f8:	1094a604 	addi	r2,r2,21144
   204fc:	d8800115 	stw	r2,4(sp)
   20500:	0080a004 	movi	r2,640
   20504:	d8800015 	stw	r2,0(sp)
   20508:	000f883a 	mov	r7,zero
   2050c:	01800044 	movi	r6,1
   20510:	01400204 	movi	r5,8
   20514:	01005804 	movi	r4,352
   20518:	00223100 	call	22310 <fb_string>
    fb_string(13*32, 10, 1, 0, 640, "F");
   2051c:	008000b4 	movhi	r2,2
   20520:	1094a804 	addi	r2,r2,21152
   20524:	d8800115 	stw	r2,4(sp)
   20528:	0080a004 	movi	r2,640
   2052c:	d8800015 	stw	r2,0(sp)
   20530:	000f883a 	mov	r7,zero
   20534:	01800044 	movi	r6,1
   20538:	01400284 	movi	r5,10
   2053c:	01006804 	movi	r4,416
   20540:	00223100 	call	22310 <fb_string>

}
   20544:	0001883a 	nop
   20548:	e037883a 	mov	sp,fp
   2054c:	dfc00117 	ldw	ra,4(sp)
   20550:	df000017 	ldw	fp,0(sp)
   20554:	dec00204 	addi	sp,sp,8
   20558:	f800283a 	ret

0002055c <draw_floor_num>:

void draw_floor_num(int cur_floor){
   2055c:	defffc04 	addi	sp,sp,-16
   20560:	dfc00315 	stw	ra,12(sp)
   20564:	df000215 	stw	fp,8(sp)
   20568:	df000204 	addi	fp,sp,8
   2056c:	e13fff15 	stw	r4,-4(fp)
    fb_char_en(13*32 - 8, 10, 1, 0, cur_floor + 48 + 1);
   20570:	e0bfff17 	ldw	r2,-4(fp)
   20574:	10800c44 	addi	r2,r2,49
   20578:	10803fcc 	andi	r2,r2,255
   2057c:	d8800015 	stw	r2,0(sp)
   20580:	000f883a 	mov	r7,zero
   20584:	01800044 	movi	r6,1
   20588:	01400284 	movi	r5,10
   2058c:	01006604 	movi	r4,408
   20590:	0021fa80 	call	21fa8 <fb_char_en>
}
   20594:	0001883a 	nop
   20598:	e037883a 	mov	sp,fp
   2059c:	dfc00117 	ldw	ra,4(sp)
   205a0:	df000017 	ldw	fp,0(sp)
   205a4:	dec00204 	addi	sp,sp,8
   205a8:	f800283a 	ret

000205ac <draw_all_text>:

void draw_all_text(int cur_floor){
   205ac:	defffd04 	addi	sp,sp,-12
   205b0:	dfc00215 	stw	ra,8(sp)
   205b4:	df000115 	stw	fp,4(sp)
   205b8:	df000104 	addi	fp,sp,4
   205bc:	e13fff15 	stw	r4,-4(fp)
    draw_erase();
   205c0:	00207880 	call	20788 <draw_erase>
    draw_table();
   205c4:	00203540 	call	20354 <draw_table>
    draw_press_l();
   205c8:	00204940 	call	20494 <draw_press_l>
    draw_floor_text();
   205cc:	00204e40 	call	204e4 <draw_floor_text>
    draw_floor_num(cur_floor);
   205d0:	e13fff17 	ldw	r4,-4(fp)
   205d4:	002055c0 	call	2055c <draw_floor_num>

   205d8:	0001883a 	nop
   205dc:	e037883a 	mov	sp,fp
   205e0:	dfc00117 	ldw	ra,4(sp)
   205e4:	df000017 	ldw	fp,0(sp)
   205e8:	dec00204 	addi	sp,sp,8
   205ec:	f800283a 	ret

000205f0 <draw_cover>:
#include "cover_draw.h"

void draw_cover() {
   205f0:	defffc04 	addi	sp,sp,-16
   205f4:	dfc00315 	stw	ra,12(sp)
   205f8:	df000215 	stw	fp,8(sp)
   205fc:	df000204 	addi	fp,sp,8
    fb_set(0, 0, 640, 480, cover);
   20600:	008402b4 	movhi	r2,4106
   20604:	108d2804 	addi	r2,r2,13472
   20608:	d8800015 	stw	r2,0(sp)
   2060c:	01c07804 	movi	r7,480
   20610:	0180a004 	movi	r6,640
   20614:	000b883a 	mov	r5,zero
   20618:	0009883a 	mov	r4,zero
   2061c:	0021d3c0 	call	21d3c <fb_set>
    // title
    fb_string(320 - 56 * 4, 80, 4, 0, 640, "MAGIC    TOWER");
   20620:	008000b4 	movhi	r2,2
   20624:	1094a904 	addi	r2,r2,21156
   20628:	d8800115 	stw	r2,4(sp)
   2062c:	0080a004 	movi	r2,640
   20630:	d8800015 	stw	r2,0(sp)
   20634:	000f883a 	mov	r7,zero
   20638:	01800104 	movi	r6,4
   2063c:	01401404 	movi	r5,80
   20640:	01001804 	movi	r4,96
   20644:	00223100 	call	22310 <fb_string>
    
    // appendix
    fb_string(0, 480 - 16 * 1, 1, 1, 640, "FPGA Beta Ver 1.0");
   20648:	008000b4 	movhi	r2,2
   2064c:	1094ad04 	addi	r2,r2,21172
   20650:	d8800115 	stw	r2,4(sp)
   20654:	0080a004 	movi	r2,640
   20658:	d8800015 	stw	r2,0(sp)
   2065c:	01c00044 	movi	r7,1
   20660:	01800044 	movi	r6,1
   20664:	01407404 	movi	r5,464
   20668:	0009883a 	mov	r4,zero
   2066c:	00223100 	call	22310 <fb_string>
    fb_string(0, 480 - 48 * 1, 1, 1, 640, "Yuxuan Jiang & Tianyu Zhang");
   20670:	008000b4 	movhi	r2,2
   20674:	1094b204 	addi	r2,r2,21192
   20678:	d8800115 	stw	r2,4(sp)
   2067c:	0080a004 	movi	r2,640
   20680:	d8800015 	stw	r2,0(sp)
   20684:	01c00044 	movi	r7,1
   20688:	01800044 	movi	r6,1
   2068c:	01406c04 	movi	r5,432
   20690:	0009883a 	mov	r4,zero
   20694:	00223100 	call	22310 <fb_string>
    fb_string(0, 480 - 32 * 1, 1, 1, 640, "UIUC ECE 385 Final Project");
   20698:	008000b4 	movhi	r2,2
   2069c:	1094b904 	addi	r2,r2,21220
   206a0:	d8800115 	stw	r2,4(sp)
   206a4:	0080a004 	movi	r2,640
   206a8:	d8800015 	stw	r2,0(sp)
   206ac:	01c00044 	movi	r7,1
   206b0:	01800044 	movi	r6,1
   206b4:	01407004 	movi	r5,448
   206b8:	0009883a 	mov	r4,zero
   206bc:	00223100 	call	22310 <fb_string>
}
   206c0:	0001883a 	nop
   206c4:	e037883a 	mov	sp,fp
   206c8:	dfc00117 	ldw	ra,4(sp)
   206cc:	df000017 	ldw	fp,0(sp)
   206d0:	dec00204 	addi	sp,sp,8
   206d4:	f800283a 	ret

000206d8 <draw_gameover>:

void draw_gameover() {
   206d8:	defffd04 	addi	sp,sp,-12
   206dc:	dfc00215 	stw	ra,8(sp)
   206e0:	df000115 	stw	fp,4(sp)
   206e4:	df000104 	addi	fp,sp,4
    fb_set(0, 0, 640, 480, gameover);
   206e8:	00840534 	movhi	r2,4116
   206ec:	10a92804 	addi	r2,r2,-23392
   206f0:	d8800015 	stw	r2,0(sp)
   206f4:	01c07804 	movi	r7,480
   206f8:	0180a004 	movi	r6,640
   206fc:	000b883a 	mov	r5,zero
   20700:	0009883a 	mov	r4,zero
   20704:	0021d3c0 	call	21d3c <fb_set>
}
   20708:	0001883a 	nop
   2070c:	e037883a 	mov	sp,fp
   20710:	dfc00117 	ldw	ra,4(sp)
   20714:	df000017 	ldw	fp,0(sp)
   20718:	dec00204 	addi	sp,sp,8
   2071c:	f800283a 	ret

00020720 <draw_gameover_slow>:

void draw_gameover_slow() {
   20720:	defffe04 	addi	sp,sp,-8
   20724:	df000115 	stw	fp,4(sp)
   20728:	df000104 	addi	fp,sp,4
    for (int i = 0; i < 640*480; i++) {
   2072c:	e03fff15 	stw	zero,-4(fp)
   20730:	00000c06 	br	20764 <draw_gameover_slow+0x44>
        FB_BASE[i] = gameover[i];
   20734:	e0ffff17 	ldw	r3,-4(fp)
   20738:	00801034 	movhi	r2,64
   2073c:	1887883a 	add	r3,r3,r2
   20740:	00840534 	movhi	r2,4116
   20744:	10a92804 	addi	r2,r2,-23392
   20748:	e13fff17 	ldw	r4,-4(fp)
   2074c:	1105883a 	add	r2,r2,r4
   20750:	10800003 	ldbu	r2,0(r2)
   20754:	18800005 	stb	r2,0(r3)
void draw_gameover() {
    fb_set(0, 0, 640, 480, gameover);
}

void draw_gameover_slow() {
    for (int i = 0; i < 640*480; i++) {
   20758:	e0bfff17 	ldw	r2,-4(fp)
   2075c:	10800044 	addi	r2,r2,1
   20760:	e0bfff15 	stw	r2,-4(fp)
   20764:	e0ffff17 	ldw	r3,-4(fp)
   20768:	00800174 	movhi	r2,5
   2076c:	10abffc4 	addi	r2,r2,-20481
   20770:	10fff00e 	bge	r2,r3,20734 <gameover+0xefee6294>
        FB_BASE[i] = gameover[i];
    }
}
   20774:	0001883a 	nop
   20778:	e037883a 	mov	sp,fp
   2077c:	df000017 	ldw	fp,0(sp)
   20780:	dec00104 	addi	sp,sp,4
   20784:	f800283a 	ret

00020788 <draw_erase>:
#include "erase_draw.h"

void draw_erase() {
   20788:	defffd04 	addi	sp,sp,-12
   2078c:	dfc00215 	stw	ra,8(sp)
   20790:	df000115 	stw	fp,4(sp)
   20794:	df000104 	addi	fp,sp,4
    fb_set(0, 0, 640, 480, empty_arr);
   20798:	008403f4 	movhi	r2,4111
   2079c:	10b92804 	addi	r2,r2,-7008
   207a0:	d8800015 	stw	r2,0(sp)
   207a4:	01c07804 	movi	r7,480
   207a8:	0180a004 	movi	r6,640
   207ac:	000b883a 	mov	r5,zero
   207b0:	0009883a 	mov	r4,zero
   207b4:	0021d3c0 	call	21d3c <fb_set>
   207b8:	0001883a 	nop
   207bc:	e037883a 	mov	sp,fp
   207c0:	dfc00117 	ldw	ra,4(sp)
   207c4:	df000017 	ldw	fp,0(sp)
   207c8:	dec00204 	addi	sp,sp,8
   207cc:	f800283a 	ret

000207d0 <UpdateMap>:
//     }
//
//     return ch;
//}

void UpdateMap() {
   207d0:	defffb04 	addi	sp,sp,-20
   207d4:	dfc00415 	stw	ra,16(sp)
   207d8:	df000315 	stw	fp,12(sp)
   207dc:	dc400215 	stw	r17,8(sp)
   207e0:	dc000115 	stw	r16,4(sp)
   207e4:	df000304 	addi	fp,sp,12
    for (int i = PLAYER_STATUS_TYPE; i < PLAYER_STATUS_TYPE + FLOOR_SIZE; i++) {
   207e8:	00800284 	movi	r2,10
   207ec:	e0bffd15 	stw	r2,-12(fp)
   207f0:	00001706 	br	20850 <UpdateMap+0x80>
        Player_controller_base[i] = (int) Game_data_mem_base[i + cur_floor * FLOOR_SIZE];
   207f4:	d0e0dc17 	ldw	r3,-31888(gp)
   207f8:	e0bffd17 	ldw	r2,-12(fp)
   207fc:	1085883a 	add	r2,r2,r2
   20800:	1085883a 	add	r2,r2,r2
   20804:	18a1883a 	add	r16,r3,r2
   20808:	d4600017 	ldw	r17,-32768(gp)
   2080c:	d0a0de17 	ldw	r2,-31880(gp)
   20810:	01401e44 	movi	r5,121
   20814:	1009883a 	mov	r4,r2
   20818:	00225b40 	call	225b4 <__mulsi3>
   2081c:	1007883a 	mov	r3,r2
   20820:	e0bffd17 	ldw	r2,-12(fp)
   20824:	1885883a 	add	r2,r3,r2
   20828:	1085883a 	add	r2,r2,r2
   2082c:	8885883a 	add	r2,r17,r2
   20830:	1080000b 	ldhu	r2,0(r2)
   20834:	10bfffcc 	andi	r2,r2,65535
   20838:	10a0001c 	xori	r2,r2,32768
   2083c:	10a00004 	addi	r2,r2,-32768
   20840:	80800015 	stw	r2,0(r16)
//
//     return ch;
//}

void UpdateMap() {
    for (int i = PLAYER_STATUS_TYPE; i < PLAYER_STATUS_TYPE + FLOOR_SIZE; i++) {
   20844:	e0bffd17 	ldw	r2,-12(fp)
   20848:	10800044 	addi	r2,r2,1
   2084c:	e0bffd15 	stw	r2,-12(fp)
   20850:	e0bffd17 	ldw	r2,-12(fp)
   20854:	108020d0 	cmplti	r2,r2,131
   20858:	103fe61e 	bne	r2,zero,207f4 <gameover+0xefee6354>
        Player_controller_base[i] = (int) Game_data_mem_base[i + cur_floor * FLOOR_SIZE];
    }
}
   2085c:	0001883a 	nop
   20860:	e6fffe04 	addi	sp,fp,-8
   20864:	dfc00317 	ldw	ra,12(sp)
   20868:	df000217 	ldw	fp,8(sp)
   2086c:	dc400117 	ldw	r17,4(sp)
   20870:	dc000017 	ldw	r16,0(sp)
   20874:	dec00404 	addi	sp,sp,16
   20878:	f800283a 	ret

0002087c <Init_Game>:

void Init_Game()
{
   2087c:	defff904 	addi	sp,sp,-28
   20880:	dfc00615 	stw	ra,24(sp)
   20884:	df000515 	stw	fp,20(sp)
   20888:	dc400415 	stw	r17,16(sp)
   2088c:	dc000315 	stw	r16,12(sp)
   20890:	df000504 	addi	fp,sp,20
    // Game_data_mem_base   = malloc((PLAYER_STATUS_TYPE + TOT_FLOOR_NUMBER * FLOOR_SIZE) * sizeof(alt_16));
    // Keycode_mem_base     = malloc(sizeof(unsigned char));

    // Init Status
    for (int i = 0; i < PLAYER_STATUS_TYPE; i++) {
   20894:	e03ffb15 	stw	zero,-20(fp)
   20898:	00000e06 	br	208d4 <Init_Game+0x58>
        Game_data_mem_base[i] = Player_Status_Init[i];
   2089c:	d0e00017 	ldw	r3,-32768(gp)
   208a0:	e0bffb17 	ldw	r2,-20(fp)
   208a4:	1085883a 	add	r2,r2,r2
   208a8:	1889883a 	add	r4,r3,r2
   208ac:	008000b4 	movhi	r2,2
   208b0:	1094c004 	addi	r2,r2,21248
   208b4:	e0fffb17 	ldw	r3,-20(fp)
   208b8:	18c7883a 	add	r3,r3,r3
   208bc:	10c5883a 	add	r2,r2,r3
   208c0:	1080000b 	ldhu	r2,0(r2)
   208c4:	2080000d 	sth	r2,0(r4)
{
    // Game_data_mem_base   = malloc((PLAYER_STATUS_TYPE + TOT_FLOOR_NUMBER * FLOOR_SIZE) * sizeof(alt_16));
    // Keycode_mem_base     = malloc(sizeof(unsigned char));

    // Init Status
    for (int i = 0; i < PLAYER_STATUS_TYPE; i++) {
   208c8:	e0bffb17 	ldw	r2,-20(fp)
   208cc:	10800044 	addi	r2,r2,1
   208d0:	e0bffb15 	stw	r2,-20(fp)
   208d4:	e0bffb17 	ldw	r2,-20(fp)
   208d8:	10800290 	cmplti	r2,r2,10
   208dc:	103fef1e 	bne	r2,zero,2089c <gameover+0xefee63fc>
        Game_data_mem_base[i] = Player_Status_Init[i];
    }

    // Init Floor Config
    for (int i = 0; i < TOT_FLOOR_NUMBER; i++) {
   208e0:	e03ffc15 	stw	zero,-16(fp)
   208e4:	00002106 	br	2096c <Init_Game+0xf0>
        for (int j = 0; j < FLOOR_SIZE; j++) {
   208e8:	e03ffd15 	stw	zero,-12(fp)
   208ec:	00001906 	br	20954 <Init_Game+0xd8>
            Game_data_mem_base[PLAYER_STATUS_TYPE + i * FLOOR_SIZE + j] = Floor_Configuration_Init[i][j];
   208f0:	d4200017 	ldw	r16,-32768(gp)
   208f4:	01401e44 	movi	r5,121
   208f8:	e13ffc17 	ldw	r4,-16(fp)
   208fc:	00225b40 	call	225b4 <__mulsi3>
   20900:	10c00284 	addi	r3,r2,10
   20904:	e0bffd17 	ldw	r2,-12(fp)
   20908:	1885883a 	add	r2,r3,r2
   2090c:	1085883a 	add	r2,r2,r2
   20910:	80a3883a 	add	r17,r16,r2
   20914:	040000b4 	movhi	r16,2
   20918:	8414c504 	addi	r16,r16,21268
   2091c:	e0bffc17 	ldw	r2,-16(fp)
   20920:	01401e44 	movi	r5,121
   20924:	1009883a 	mov	r4,r2
   20928:	00225b40 	call	225b4 <__mulsi3>
   2092c:	1007883a 	mov	r3,r2
   20930:	e0bffd17 	ldw	r2,-12(fp)
   20934:	1885883a 	add	r2,r3,r2
   20938:	1085883a 	add	r2,r2,r2
   2093c:	8085883a 	add	r2,r16,r2
   20940:	1080000b 	ldhu	r2,0(r2)
   20944:	8880000d 	sth	r2,0(r17)
        Game_data_mem_base[i] = Player_Status_Init[i];
    }

    // Init Floor Config
    for (int i = 0; i < TOT_FLOOR_NUMBER; i++) {
        for (int j = 0; j < FLOOR_SIZE; j++) {
   20948:	e0bffd17 	ldw	r2,-12(fp)
   2094c:	10800044 	addi	r2,r2,1
   20950:	e0bffd15 	stw	r2,-12(fp)
   20954:	e0bffd17 	ldw	r2,-12(fp)
   20958:	10801e50 	cmplti	r2,r2,121
   2095c:	103fe41e 	bne	r2,zero,208f0 <gameover+0xefee6450>
    for (int i = 0; i < PLAYER_STATUS_TYPE; i++) {
        Game_data_mem_base[i] = Player_Status_Init[i];
    }

    // Init Floor Config
    for (int i = 0; i < TOT_FLOOR_NUMBER; i++) {
   20960:	e0bffc17 	ldw	r2,-16(fp)
   20964:	10800044 	addi	r2,r2,1
   20968:	e0bffc15 	stw	r2,-16(fp)
   2096c:	e0bffc17 	ldw	r2,-16(fp)
   20970:	10800110 	cmplti	r2,r2,4
   20974:	103fdc1e 	bne	r2,zero,208e8 <gameover+0xefee6448>
        for (int j = 0; j < FLOOR_SIZE; j++) {
            Game_data_mem_base[PLAYER_STATUS_TYPE + i * FLOOR_SIZE + j] = Floor_Configuration_Init[i][j];
        }
    }

    cur_posX  = 5;
   20978:	00800144 	movi	r2,5
   2097c:	d0a0df15 	stw	r2,-31876(gp)
    cur_posY  = 10;
   20980:	00800284 	movi	r2,10
   20984:	d0a0e115 	stw	r2,-31868(gp)
    cur_floor = 0;
   20988:	d020de15 	stw	zero,-31880(gp)
    usb_key   = 0;
   2098c:	d020e005 	stb	zero,-31872(gp)
    encounter = 0;
   20990:	d020dd15 	stw	zero,-31884(gp)
}
   20994:	0001883a 	nop
   20998:	e6fffe04 	addi	sp,fp,-8
   2099c:	dfc00317 	ldw	ra,12(sp)
   209a0:	df000217 	ldw	fp,8(sp)
   209a4:	dc400117 	ldw	r17,4(sp)
   209a8:	dc000017 	ldw	r16,0(sp)
   209ac:	dec00404 	addi	sp,sp,16
   209b0:	f800283a 	ret

000209b4 <Normal_Walk>:

int Normal_Walk()
{
   209b4:	deffff04 	addi	sp,sp,-4
   209b8:	df000015 	stw	fp,0(sp)
   209bc:	d839883a 	mov	fp,sp
    switch (usb_key) {
   209c0:	d0a0e003 	ldbu	r2,-31872(gp)
   209c4:	10803fcc 	andi	r2,r2,255
   209c8:	10c001e0 	cmpeqi	r3,r2,7
   209cc:	1800221e 	bne	r3,zero,20a58 <Normal_Walk+0xa4>
   209d0:	10c00208 	cmpgei	r3,r2,8
   209d4:	1800031e 	bne	r3,zero,209e4 <Normal_Walk+0x30>
   209d8:	10800120 	cmpeqi	r2,r2,4
   209dc:	1000151e 	bne	r2,zero,20a34 <Normal_Walk+0x80>
   209e0:	00002406 	br	20a74 <Normal_Walk+0xc0>
   209e4:	10c005a0 	cmpeqi	r3,r2,22
   209e8:	18000b1e 	bne	r3,zero,20a18 <Normal_Walk+0x64>
   209ec:	108006a0 	cmpeqi	r2,r2,26
   209f0:	10002026 	beq	r2,zero,20a74 <Normal_Walk+0xc0>
        case 0x1a:
            if (cur_posY > 0 && cur_posY <= 10) {
   209f4:	d0a0e117 	ldw	r2,-31868(gp)
   209f8:	10000526 	beq	r2,zero,20a10 <Normal_Walk+0x5c>
   209fc:	d0a0e117 	ldw	r2,-31868(gp)
   20a00:	108002e8 	cmpgeui	r2,r2,11
   20a04:	1000021e 	bne	r2,zero,20a10 <Normal_Walk+0x5c>
                return 1;
   20a08:	00800044 	movi	r2,1
   20a0c:	00001a06 	br	20a78 <Normal_Walk+0xc4>
            } else {
                return 0;
   20a10:	0005883a 	mov	r2,zero
   20a14:	00001806 	br	20a78 <Normal_Walk+0xc4>
            }
            break;
        case 0x16:
            if (cur_posY >= 0 && cur_posY < 10) {
   20a18:	d0a0e117 	ldw	r2,-31868(gp)
   20a1c:	108002a8 	cmpgeui	r2,r2,10
   20a20:	1000021e 	bne	r2,zero,20a2c <Normal_Walk+0x78>
                return 1;
   20a24:	00800044 	movi	r2,1
   20a28:	00001306 	br	20a78 <Normal_Walk+0xc4>
            } else {
                return 0;
   20a2c:	0005883a 	mov	r2,zero
   20a30:	00001106 	br	20a78 <Normal_Walk+0xc4>
            }
            break;
        case 0x04:
            if (cur_posX > 0 && cur_posX <= 10) {
   20a34:	d0a0df17 	ldw	r2,-31876(gp)
   20a38:	10000526 	beq	r2,zero,20a50 <Normal_Walk+0x9c>
   20a3c:	d0a0df17 	ldw	r2,-31876(gp)
   20a40:	108002e8 	cmpgeui	r2,r2,11
   20a44:	1000021e 	bne	r2,zero,20a50 <Normal_Walk+0x9c>
                return 1;
   20a48:	00800044 	movi	r2,1
   20a4c:	00000a06 	br	20a78 <Normal_Walk+0xc4>
            } else {
                return 0;
   20a50:	0005883a 	mov	r2,zero
   20a54:	00000806 	br	20a78 <Normal_Walk+0xc4>
            }
            break;
        case 0x07:
            if (cur_posX >= 0 && cur_posX < 10) {
   20a58:	d0a0df17 	ldw	r2,-31876(gp)
   20a5c:	108002a8 	cmpgeui	r2,r2,10
   20a60:	1000021e 	bne	r2,zero,20a6c <Normal_Walk+0xb8>
                return 1;
   20a64:	00800044 	movi	r2,1
   20a68:	00000306 	br	20a78 <Normal_Walk+0xc4>
            } else {
                return 0;
   20a6c:	0005883a 	mov	r2,zero
   20a70:	00000106 	br	20a78 <Normal_Walk+0xc4>
            }
            break;
        default:
            return 0;
   20a74:	0005883a 	mov	r2,zero
            break;
    }
}
   20a78:	e037883a 	mov	sp,fp
   20a7c:	df000017 	ldw	fp,0(sp)
   20a80:	dec00104 	addi	sp,sp,4
   20a84:	f800283a 	ret

00020a88 <Judge_the_block>:
#define GO_UPSTAIRS        16
#define GO_DOWNSTAIRS      17
#define BATTLE             18

int Judge_the_block()
{
   20a88:	defffa04 	addi	sp,sp,-24
   20a8c:	dfc00515 	stw	ra,20(sp)
   20a90:	df000415 	stw	fp,16(sp)
   20a94:	dc400315 	stw	r17,12(sp)
   20a98:	dc000215 	stw	r16,8(sp)
   20a9c:	df000404 	addi	fp,sp,16
    alt_16 block_type;
    int encounter_signal;

    switch (usb_key) {
   20aa0:	d0a0e003 	ldbu	r2,-31872(gp)
   20aa4:	10803fcc 	andi	r2,r2,255
   20aa8:	10c001e0 	cmpeqi	r3,r2,7
   20aac:	1800451e 	bne	r3,zero,20bc4 <Judge_the_block+0x13c>
   20ab0:	10c00208 	cmpgei	r3,r2,8
   20ab4:	1800031e 	bne	r3,zero,20ac4 <Judge_the_block+0x3c>
   20ab8:	10800120 	cmpeqi	r2,r2,4
   20abc:	10002e1e 	bne	r2,zero,20b78 <Judge_the_block+0xf0>
   20ac0:	00005306 	br	20c10 <Judge_the_block+0x188>
   20ac4:	10c005a0 	cmpeqi	r3,r2,22
   20ac8:	1800171e 	bne	r3,zero,20b28 <Judge_the_block+0xa0>
   20acc:	108006a0 	cmpeqi	r2,r2,26
   20ad0:	10004f26 	beq	r2,zero,20c10 <Judge_the_block+0x188>
        case 0x1a:
            block_type = Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY - 1) * 11 + cur_posX];
   20ad4:	d4200017 	ldw	r16,-32768(gp)
   20ad8:	d0a0de17 	ldw	r2,-31880(gp)
   20adc:	01401e44 	movi	r5,121
   20ae0:	1009883a 	mov	r4,r2
   20ae4:	00225b40 	call	225b4 <__mulsi3>
   20ae8:	1023883a 	mov	r17,r2
   20aec:	d0a0e117 	ldw	r2,-31868(gp)
   20af0:	014002c4 	movi	r5,11
   20af4:	1009883a 	mov	r4,r2
   20af8:	00225b40 	call	225b4 <__mulsi3>
   20afc:	8887883a 	add	r3,r17,r2
   20b00:	d0a0df17 	ldw	r2,-31876(gp)
   20b04:	1887883a 	add	r3,r3,r2
   20b08:	00a00034 	movhi	r2,32768
   20b0c:	10bfffc4 	addi	r2,r2,-1
   20b10:	1885883a 	add	r2,r3,r2
   20b14:	1085883a 	add	r2,r2,r2
   20b18:	8085883a 	add	r2,r16,r2
   20b1c:	1080000b 	ldhu	r2,0(r2)
   20b20:	e0bffc0d 	sth	r2,-16(fp)
            break;
   20b24:	00003c06 	br	20c18 <Judge_the_block+0x190>
        case 0x16:
            block_type = Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY + 1) * 11 + cur_posX];
   20b28:	d4200017 	ldw	r16,-32768(gp)
   20b2c:	d0a0de17 	ldw	r2,-31880(gp)
   20b30:	01401e44 	movi	r5,121
   20b34:	1009883a 	mov	r4,r2
   20b38:	00225b40 	call	225b4 <__mulsi3>
   20b3c:	1023883a 	mov	r17,r2
   20b40:	d0a0e117 	ldw	r2,-31868(gp)
   20b44:	10800044 	addi	r2,r2,1
   20b48:	014002c4 	movi	r5,11
   20b4c:	1009883a 	mov	r4,r2
   20b50:	00225b40 	call	225b4 <__mulsi3>
   20b54:	8887883a 	add	r3,r17,r2
   20b58:	d0a0df17 	ldw	r2,-31876(gp)
   20b5c:	1885883a 	add	r2,r3,r2
   20b60:	10800284 	addi	r2,r2,10
   20b64:	1085883a 	add	r2,r2,r2
   20b68:	8085883a 	add	r2,r16,r2
   20b6c:	1080000b 	ldhu	r2,0(r2)
   20b70:	e0bffc0d 	sth	r2,-16(fp)
            break;
   20b74:	00002806 	br	20c18 <Judge_the_block+0x190>
        case 0x04:
            block_type = Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1];
   20b78:	d4200017 	ldw	r16,-32768(gp)
   20b7c:	d0a0de17 	ldw	r2,-31880(gp)
   20b80:	01401e44 	movi	r5,121
   20b84:	1009883a 	mov	r4,r2
   20b88:	00225b40 	call	225b4 <__mulsi3>
   20b8c:	1023883a 	mov	r17,r2
   20b90:	d0a0e117 	ldw	r2,-31868(gp)
   20b94:	014002c4 	movi	r5,11
   20b98:	1009883a 	mov	r4,r2
   20b9c:	00225b40 	call	225b4 <__mulsi3>
   20ba0:	8887883a 	add	r3,r17,r2
   20ba4:	d0a0df17 	ldw	r2,-31876(gp)
   20ba8:	1885883a 	add	r2,r3,r2
   20bac:	10800244 	addi	r2,r2,9
   20bb0:	1085883a 	add	r2,r2,r2
   20bb4:	8085883a 	add	r2,r16,r2
   20bb8:	1080000b 	ldhu	r2,0(r2)
   20bbc:	e0bffc0d 	sth	r2,-16(fp)
            break;
   20bc0:	00001506 	br	20c18 <Judge_the_block+0x190>
        case 0x07:
            block_type = Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1];
   20bc4:	d4200017 	ldw	r16,-32768(gp)
   20bc8:	d0a0de17 	ldw	r2,-31880(gp)
   20bcc:	01401e44 	movi	r5,121
   20bd0:	1009883a 	mov	r4,r2
   20bd4:	00225b40 	call	225b4 <__mulsi3>
   20bd8:	1023883a 	mov	r17,r2
   20bdc:	d0a0e117 	ldw	r2,-31868(gp)
   20be0:	014002c4 	movi	r5,11
   20be4:	1009883a 	mov	r4,r2
   20be8:	00225b40 	call	225b4 <__mulsi3>
   20bec:	8887883a 	add	r3,r17,r2
   20bf0:	d0a0df17 	ldw	r2,-31876(gp)
   20bf4:	1885883a 	add	r2,r3,r2
   20bf8:	108002c4 	addi	r2,r2,11
   20bfc:	1085883a 	add	r2,r2,r2
   20c00:	8085883a 	add	r2,r16,r2
   20c04:	1080000b 	ldhu	r2,0(r2)
   20c08:	e0bffc0d 	sth	r2,-16(fp)
            break;
   20c0c:	00000206 	br	20c18 <Judge_the_block+0x190>
        default:
            return 0;
   20c10:	0005883a 	mov	r2,zero
   20c14:	00005406 	br	20d68 <Judge_the_block+0x2e0>
            break;
    }

    switch (block_type) {
   20c18:	e0bffc0f 	ldh	r2,-16(fp)
   20c1c:	10c004e8 	cmpgeui	r3,r2,19
   20c20:	18004d1e 	bne	r3,zero,20d58 <Judge_the_block+0x2d0>
   20c24:	100690ba 	slli	r3,r2,2
   20c28:	008000b4 	movhi	r2,2
   20c2c:	10830f04 	addi	r2,r2,3132
   20c30:	1885883a 	add	r2,r3,r2
   20c34:	10800017 	ldw	r2,0(r2)
   20c38:	1000683a 	jmp	r2
   20c3c:	00020c88 	cmpgei	zero,zero,2098
   20c40:	00020c90 	cmplti	zero,zero,2098
   20c44:	00020c98 	cmpnei	zero,zero,2098
   20c48:	00020ca4 	muli	zero,zero,2098
   20c4c:	00020cb0 	cmpltui	zero,zero,2098
   20c50:	00020cbc 	xorhi	zero,zero,2098
   20c54:	00020cc8 	cmpgei	zero,zero,2099
   20c58:	00020cd4 	movui	zero,2099
   20c5c:	00020ce0 	cmpeqi	zero,zero,2099
   20c60:	00020cec 	andhi	zero,zero,2099
   20c64:	00020cf8 	rdprs	zero,zero,2099
   20c68:	00020d04 	movi	zero,2100
   20c6c:	00020d10 	cmplti	zero,zero,2100
   20c70:	00020d1c 	xori	zero,zero,2100
   20c74:	00020d28 	cmpgeui	zero,zero,2100
   20c78:	00020d58 	cmpnei	zero,zero,2101
   20c7c:	00020d34 	movhi	zero,2100
   20c80:	00020d40 	call	20d4 <__alt_mem_Mem_for_Game_Data-0xdf2c>
   20c84:	00020d4c 	andi	zero,zero,2101
		case ROAD:
			encounter_signal = MOVE;
   20c88:	e03ffd15 	stw	zero,-12(fp)
            break;
   20c8c:	00003506 	br	20d64 <Judge_the_block+0x2dc>
        case DIRT:
			encounter_signal = MOVE;
   20c90:	e03ffd15 	stw	zero,-12(fp)
            break;
   20c94:	00003306 	br	20d64 <Judge_the_block+0x2dc>
		case BRICK:
			encounter_signal = BLOCK;
   20c98:	00800044 	movi	r2,1
   20c9c:	e0bffd15 	stw	r2,-12(fp)
            break;
   20ca0:	00003006 	br	20d64 <Judge_the_block+0x2dc>
		case STAR:
			encounter_signal = BLOCK;
   20ca4:	00800044 	movi	r2,1
   20ca8:	e0bffd15 	stw	r2,-12(fp)
            break;
   20cac:	00002d06 	br	20d64 <Judge_the_block+0x2dc>
		case VOID:
			encounter_signal = BLOCK;
   20cb0:	00800044 	movi	r2,1
   20cb4:	e0bffd15 	stw	r2,-12(fp)
            break;
   20cb8:	00002a06 	br	20d64 <Judge_the_block+0x2dc>
        case UPSTAIRS:
            encounter_signal = GO_UPSTAIRS;
   20cbc:	00800404 	movi	r2,16
   20cc0:	e0bffd15 	stw	r2,-12(fp)
            break;
   20cc4:	00002706 	br	20d64 <Judge_the_block+0x2dc>
        case DOWNSTAIRS:
            encounter_signal = GO_DOWNSTAIRS;
   20cc8:	00800444 	movi	r2,17
   20ccc:	e0bffd15 	stw	r2,-12(fp)
            break;
   20cd0:	00002406 	br	20d64 <Judge_the_block+0x2dc>
		case YELLOW_DOOR:
			encounter_signal = MEET_YELLOW_DOOR;
   20cd4:	00800284 	movi	r2,10
   20cd8:	e0bffd15 	stw	r2,-12(fp)
            break;
   20cdc:	00002106 	br	20d64 <Judge_the_block+0x2dc>
		case BLUE_DOOR:
			encounter_signal = MEET_BLUE_DOOR;
   20ce0:	008002c4 	movi	r2,11
   20ce4:	e0bffd15 	stw	r2,-12(fp)
            break;
   20ce8:	00001e06 	br	20d64 <Judge_the_block+0x2dc>
		case RED_DOOR:
			encounter_signal = MEET_RED_DOOR;
   20cec:	00800304 	movi	r2,12
   20cf0:	e0bffd15 	stw	r2,-12(fp)
            break;
   20cf4:	00001b06 	br	20d64 <Judge_the_block+0x2dc>
		case YELLOW_KEY:
			encounter_signal = PICK_YELLOW_KEY;
   20cf8:	00800104 	movi	r2,4
   20cfc:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d00:	00001806 	br	20d64 <Judge_the_block+0x2dc>
		case BLUE_KEY:
			encounter_signal = PICK_BLUE_KEY;
   20d04:	00800144 	movi	r2,5
   20d08:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d0c:	00001506 	br	20d64 <Judge_the_block+0x2dc>
		case RED_KEY:
			encounter_signal = PICK_RED_KEY;
   20d10:	00800184 	movi	r2,6
   20d14:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d18:	00001206 	br	20d64 <Judge_the_block+0x2dc>
		case RED_GEM:
			encounter_signal = PICK_RED_GEM;
   20d1c:	00800084 	movi	r2,2
   20d20:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d24:	00000f06 	br	20d64 <Judge_the_block+0x2dc>
		case BLUE_GEM:
			encounter_signal = PICK_BLUE_GEM;
   20d28:	008000c4 	movi	r2,3
   20d2c:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d30:	00000c06 	br	20d64 <Judge_the_block+0x2dc>
		case RED_POTION:
			encounter_signal = PICK_RED_HEALTH;
   20d34:	008001c4 	movi	r2,7
   20d38:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d3c:	00000906 	br	20d64 <Judge_the_block+0x2dc>
		case BLUE_POTION:
			encounter_signal = PICK_BLUE_HEALTH;
   20d40:	00800204 	movi	r2,8
   20d44:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d48:	00000606 	br	20d64 <Judge_the_block+0x2dc>
        case GREEN_POTION:
			encounter_signal = PICK_EXP;
   20d4c:	00800244 	movi	r2,9
   20d50:	e0bffd15 	stw	r2,-12(fp)
			break;
   20d54:	00000306 	br	20d64 <Judge_the_block+0x2dc>
		default:
			encounter_signal = BATTLE;		// We set default to battle because the moster types are too many
   20d58:	00800484 	movi	r2,18
   20d5c:	e0bffd15 	stw	r2,-12(fp)
            break;
   20d60:	0001883a 	nop
    }

    return encounter_signal;
   20d64:	e0bffd17 	ldw	r2,-12(fp)
}
   20d68:	e6fffe04 	addi	sp,fp,-8
   20d6c:	dfc00317 	ldw	ra,12(sp)
   20d70:	df000217 	ldw	fp,8(sp)
   20d74:	dc400117 	ldw	r17,4(sp)
   20d78:	dc000017 	ldw	r16,0(sp)
   20d7c:	dec00404 	addi	sp,sp,16
   20d80:	f800283a 	ret

00020d84 <Move>:

void Move()
{
   20d84:	deffff04 	addi	sp,sp,-4
   20d88:	df000015 	stw	fp,0(sp)
   20d8c:	d839883a 	mov	fp,sp
    switch (usb_key) {
   20d90:	d0a0e003 	ldbu	r2,-31872(gp)
   20d94:	10803fcc 	andi	r2,r2,255
   20d98:	10c001e0 	cmpeqi	r3,r2,7
   20d9c:	1800231e 	bne	r3,zero,20e2c <Move+0xa8>
   20da0:	10c00208 	cmpgei	r3,r2,8
   20da4:	1800031e 	bne	r3,zero,20db4 <Move+0x30>
   20da8:	10800120 	cmpeqi	r2,r2,4
   20dac:	1000161e 	bne	r2,zero,20e08 <Move+0x84>
        case 0x07:
            if (cur_posX >= 0 && cur_posX < 10) {
                cur_posX++;
            }
            break;
        default: break;
   20db0:	00002c06 	br	20e64 <Move+0xe0>
    return encounter_signal;
}

void Move()
{
    switch (usb_key) {
   20db4:	10c005a0 	cmpeqi	r3,r2,22
   20db8:	18000c1e 	bne	r3,zero,20dec <Move+0x68>
   20dbc:	108006a0 	cmpeqi	r2,r2,26
   20dc0:	1000011e 	bne	r2,zero,20dc8 <Move+0x44>
        case 0x07:
            if (cur_posX >= 0 && cur_posX < 10) {
                cur_posX++;
            }
            break;
        default: break;
   20dc4:	00002706 	br	20e64 <Move+0xe0>

void Move()
{
    switch (usb_key) {
        case 0x1a:
            if (cur_posY > 0 && cur_posY <= 10) {
   20dc8:	d0a0e117 	ldw	r2,-31868(gp)
   20dcc:	10001e26 	beq	r2,zero,20e48 <Move+0xc4>
   20dd0:	d0a0e117 	ldw	r2,-31868(gp)
   20dd4:	108002e8 	cmpgeui	r2,r2,11
   20dd8:	10001b1e 	bne	r2,zero,20e48 <Move+0xc4>
                cur_posY--;
   20ddc:	d0a0e117 	ldw	r2,-31868(gp)
   20de0:	10bfffc4 	addi	r2,r2,-1
   20de4:	d0a0e115 	stw	r2,-31868(gp)
            }
            break;
   20de8:	00001706 	br	20e48 <Move+0xc4>
        case 0x16:
            if (cur_posY >= 0 && cur_posY < 10) {
   20dec:	d0a0e117 	ldw	r2,-31868(gp)
   20df0:	108002a8 	cmpgeui	r2,r2,10
   20df4:	1000161e 	bne	r2,zero,20e50 <Move+0xcc>
                cur_posY++;
   20df8:	d0a0e117 	ldw	r2,-31868(gp)
   20dfc:	10800044 	addi	r2,r2,1
   20e00:	d0a0e115 	stw	r2,-31868(gp)
            }
            break;
   20e04:	00001206 	br	20e50 <Move+0xcc>
        case 0x04:
            if (cur_posX > 0 && cur_posX <= 10) {
   20e08:	d0a0df17 	ldw	r2,-31876(gp)
   20e0c:	10001226 	beq	r2,zero,20e58 <Move+0xd4>
   20e10:	d0a0df17 	ldw	r2,-31876(gp)
   20e14:	108002e8 	cmpgeui	r2,r2,11
   20e18:	10000f1e 	bne	r2,zero,20e58 <Move+0xd4>
                cur_posX--;
   20e1c:	d0a0df17 	ldw	r2,-31876(gp)
   20e20:	10bfffc4 	addi	r2,r2,-1
   20e24:	d0a0df15 	stw	r2,-31876(gp)
            }
            break;
   20e28:	00000b06 	br	20e58 <Move+0xd4>
        case 0x07:
            if (cur_posX >= 0 && cur_posX < 10) {
   20e2c:	d0a0df17 	ldw	r2,-31876(gp)
   20e30:	108002a8 	cmpgeui	r2,r2,10
   20e34:	10000a1e 	bne	r2,zero,20e60 <Move+0xdc>
                cur_posX++;
   20e38:	d0a0df17 	ldw	r2,-31876(gp)
   20e3c:	10800044 	addi	r2,r2,1
   20e40:	d0a0df15 	stw	r2,-31876(gp)
            }
            break;
   20e44:	00000606 	br	20e60 <Move+0xdc>
    switch (usb_key) {
        case 0x1a:
            if (cur_posY > 0 && cur_posY <= 10) {
                cur_posY--;
            }
            break;
   20e48:	0001883a 	nop
   20e4c:	00000506 	br	20e64 <Move+0xe0>
        case 0x16:
            if (cur_posY >= 0 && cur_posY < 10) {
                cur_posY++;
            }
            break;
   20e50:	0001883a 	nop
   20e54:	00000306 	br	20e64 <Move+0xe0>
        case 0x04:
            if (cur_posX > 0 && cur_posX <= 10) {
                cur_posX--;
            }
            break;
   20e58:	0001883a 	nop
   20e5c:	00000106 	br	20e64 <Move+0xe0>
        case 0x07:
            if (cur_posX >= 0 && cur_posX < 10) {
                cur_posX++;
            }
            break;
   20e60:	0001883a 	nop
        default: break;
    }
}
   20e64:	0001883a 	nop
   20e68:	e037883a 	mov	sp,fp
   20e6c:	df000017 	ldw	fp,0(sp)
   20e70:	dec00104 	addi	sp,sp,4
   20e74:	f800283a 	ret

00020e78 <Increase_Attribute>:

int Increase_Attribute(int Type, alt_16 value)
{
   20e78:	defffd04 	addi	sp,sp,-12
   20e7c:	df000215 	stw	fp,8(sp)
   20e80:	df000204 	addi	fp,sp,8
   20e84:	e13ffe15 	stw	r4,-8(fp)
   20e88:	2805883a 	mov	r2,r5
   20e8c:	e0bfff0d 	sth	r2,-4(fp)
    if (Game_data_mem_base[Type] + value >= 0)
   20e90:	d0e00017 	ldw	r3,-32768(gp)
   20e94:	e0bffe17 	ldw	r2,-8(fp)
   20e98:	1085883a 	add	r2,r2,r2
   20e9c:	1885883a 	add	r2,r3,r2
   20ea0:	1080000b 	ldhu	r2,0(r2)
   20ea4:	10ffffcc 	andi	r3,r2,65535
   20ea8:	18e0001c 	xori	r3,r3,32768
   20eac:	18e00004 	addi	r3,r3,-32768
   20eb0:	e0bfff0f 	ldh	r2,-4(fp)
   20eb4:	1885883a 	add	r2,r3,r2
   20eb8:	10000f16 	blt	r2,zero,20ef8 <Increase_Attribute+0x80>
    {
        Game_data_mem_base[Type] += value;
   20ebc:	d0e00017 	ldw	r3,-32768(gp)
   20ec0:	e0bffe17 	ldw	r2,-8(fp)
   20ec4:	1085883a 	add	r2,r2,r2
   20ec8:	1887883a 	add	r3,r3,r2
   20ecc:	d1200017 	ldw	r4,-32768(gp)
   20ed0:	e0bffe17 	ldw	r2,-8(fp)
   20ed4:	1085883a 	add	r2,r2,r2
   20ed8:	2085883a 	add	r2,r4,r2
   20edc:	1080000b 	ldhu	r2,0(r2)
   20ee0:	1009883a 	mov	r4,r2
   20ee4:	e0bfff0b 	ldhu	r2,-4(fp)
   20ee8:	2085883a 	add	r2,r4,r2
   20eec:	1880000d 	sth	r2,0(r3)
        return 1;
   20ef0:	00800044 	movi	r2,1
   20ef4:	00000106 	br	20efc <Increase_Attribute+0x84>
    }
    else { return 0;}
   20ef8:	0005883a 	mov	r2,zero
}
   20efc:	e037883a 	mov	sp,fp
   20f00:	df000017 	ldw	fp,0(sp)
   20f04:	dec00104 	addi	sp,sp,4
   20f08:	f800283a 	ret

00020f0c <Change_Status>:

void Change_Status(alt_16 value)
{
   20f0c:	defffe04 	addi	sp,sp,-8
   20f10:	df000115 	stw	fp,4(sp)
   20f14:	df000104 	addi	fp,sp,4
   20f18:	2005883a 	mov	r2,r4
   20f1c:	e0bfff0d 	sth	r2,-4(fp)
    Game_data_mem_base[3] = value;
   20f20:	d0a00017 	ldw	r2,-32768(gp)
   20f24:	10800184 	addi	r2,r2,6
   20f28:	e0ffff0b 	ldhu	r3,-4(fp)
   20f2c:	10c0000d 	sth	r3,0(r2)
}
   20f30:	0001883a 	nop
   20f34:	e037883a 	mov	sp,fp
   20f38:	df000017 	ldw	fp,0(sp)
   20f3c:	dec00104 	addi	sp,sp,4
   20f40:	f800283a 	ret

00020f44 <Pick_Items>:

void Pick_Items()
{
   20f44:	defffc04 	addi	sp,sp,-16
   20f48:	dfc00315 	stw	ra,12(sp)
   20f4c:	df000215 	stw	fp,8(sp)
   20f50:	dc400115 	stw	r17,4(sp)
   20f54:	dc000015 	stw	r16,0(sp)
   20f58:	df000204 	addi	fp,sp,8
    switch (usb_key) {
   20f5c:	d0a0e003 	ldbu	r2,-31872(gp)
   20f60:	10803fcc 	andi	r2,r2,255
   20f64:	10c001e0 	cmpeqi	r3,r2,7
   20f68:	1800431e 	bne	r3,zero,21078 <Pick_Items+0x134>
   20f6c:	10c00208 	cmpgei	r3,r2,8
   20f70:	1800031e 	bne	r3,zero,20f80 <Pick_Items+0x3c>
   20f74:	10800120 	cmpeqi	r2,r2,4
   20f78:	10002d1e 	bne	r2,zero,21030 <Pick_Items+0xec>
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1]   = (alt_16) ROAD;
            break;
        case 0x07:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1]   = (alt_16) ROAD;
            break;
        default: break;
   20f7c:	00005006 	br	210c0 <Pick_Items+0x17c>
    Game_data_mem_base[3] = value;
}

void Pick_Items()
{
    switch (usb_key) {
   20f80:	10c005a0 	cmpeqi	r3,r2,22
   20f84:	1800171e 	bne	r3,zero,20fe4 <Pick_Items+0xa0>
   20f88:	108006a0 	cmpeqi	r2,r2,26
   20f8c:	1000011e 	bne	r2,zero,20f94 <Pick_Items+0x50>
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1]   = (alt_16) ROAD;
            break;
        case 0x07:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1]   = (alt_16) ROAD;
            break;
        default: break;
   20f90:	00004b06 	br	210c0 <Pick_Items+0x17c>

void Pick_Items()
{
    switch (usb_key) {
        case 0x1a:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY - 1) * 11 + cur_posX] = (alt_16) ROAD;
   20f94:	d4200017 	ldw	r16,-32768(gp)
   20f98:	d0a0de17 	ldw	r2,-31880(gp)
   20f9c:	01401e44 	movi	r5,121
   20fa0:	1009883a 	mov	r4,r2
   20fa4:	00225b40 	call	225b4 <__mulsi3>
   20fa8:	1023883a 	mov	r17,r2
   20fac:	d0a0e117 	ldw	r2,-31868(gp)
   20fb0:	014002c4 	movi	r5,11
   20fb4:	1009883a 	mov	r4,r2
   20fb8:	00225b40 	call	225b4 <__mulsi3>
   20fbc:	8887883a 	add	r3,r17,r2
   20fc0:	d0a0df17 	ldw	r2,-31876(gp)
   20fc4:	1887883a 	add	r3,r3,r2
   20fc8:	00a00034 	movhi	r2,32768
   20fcc:	10bfffc4 	addi	r2,r2,-1
   20fd0:	1885883a 	add	r2,r3,r2
   20fd4:	1085883a 	add	r2,r2,r2
   20fd8:	8085883a 	add	r2,r16,r2
   20fdc:	1000000d 	sth	zero,0(r2)
            break;
   20fe0:	00003706 	br	210c0 <Pick_Items+0x17c>
        case 0x16:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY + 1) * 11 + cur_posX] = (alt_16) ROAD;
   20fe4:	d4200017 	ldw	r16,-32768(gp)
   20fe8:	d0a0de17 	ldw	r2,-31880(gp)
   20fec:	01401e44 	movi	r5,121
   20ff0:	1009883a 	mov	r4,r2
   20ff4:	00225b40 	call	225b4 <__mulsi3>
   20ff8:	1023883a 	mov	r17,r2
   20ffc:	d0a0e117 	ldw	r2,-31868(gp)
   21000:	10800044 	addi	r2,r2,1
   21004:	014002c4 	movi	r5,11
   21008:	1009883a 	mov	r4,r2
   2100c:	00225b40 	call	225b4 <__mulsi3>
   21010:	8887883a 	add	r3,r17,r2
   21014:	d0a0df17 	ldw	r2,-31876(gp)
   21018:	1885883a 	add	r2,r3,r2
   2101c:	10800284 	addi	r2,r2,10
   21020:	1085883a 	add	r2,r2,r2
   21024:	8085883a 	add	r2,r16,r2
   21028:	1000000d 	sth	zero,0(r2)
            break;
   2102c:	00002406 	br	210c0 <Pick_Items+0x17c>
        case 0x04:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1]   = (alt_16) ROAD;
   21030:	d4200017 	ldw	r16,-32768(gp)
   21034:	d0a0de17 	ldw	r2,-31880(gp)
   21038:	01401e44 	movi	r5,121
   2103c:	1009883a 	mov	r4,r2
   21040:	00225b40 	call	225b4 <__mulsi3>
   21044:	1023883a 	mov	r17,r2
   21048:	d0a0e117 	ldw	r2,-31868(gp)
   2104c:	014002c4 	movi	r5,11
   21050:	1009883a 	mov	r4,r2
   21054:	00225b40 	call	225b4 <__mulsi3>
   21058:	8887883a 	add	r3,r17,r2
   2105c:	d0a0df17 	ldw	r2,-31876(gp)
   21060:	1885883a 	add	r2,r3,r2
   21064:	10800244 	addi	r2,r2,9
   21068:	1085883a 	add	r2,r2,r2
   2106c:	8085883a 	add	r2,r16,r2
   21070:	1000000d 	sth	zero,0(r2)
            break;
   21074:	00001206 	br	210c0 <Pick_Items+0x17c>
        case 0x07:
            Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1]   = (alt_16) ROAD;
   21078:	d4200017 	ldw	r16,-32768(gp)
   2107c:	d0a0de17 	ldw	r2,-31880(gp)
   21080:	01401e44 	movi	r5,121
   21084:	1009883a 	mov	r4,r2
   21088:	00225b40 	call	225b4 <__mulsi3>
   2108c:	1023883a 	mov	r17,r2
   21090:	d0a0e117 	ldw	r2,-31868(gp)
   21094:	014002c4 	movi	r5,11
   21098:	1009883a 	mov	r4,r2
   2109c:	00225b40 	call	225b4 <__mulsi3>
   210a0:	8887883a 	add	r3,r17,r2
   210a4:	d0a0df17 	ldw	r2,-31876(gp)
   210a8:	1885883a 	add	r2,r3,r2
   210ac:	108002c4 	addi	r2,r2,11
   210b0:	1085883a 	add	r2,r2,r2
   210b4:	8085883a 	add	r2,r16,r2
   210b8:	1000000d 	sth	zero,0(r2)
            break;
   210bc:	0001883a 	nop
        default: break;
    }
}
   210c0:	0001883a 	nop
   210c4:	e6fffe04 	addi	sp,fp,-8
   210c8:	dfc00317 	ldw	ra,12(sp)
   210cc:	df000217 	ldw	fp,8(sp)
   210d0:	dc400117 	ldw	r17,4(sp)
   210d4:	dc000017 	ldw	r16,0(sp)
   210d8:	dec00404 	addi	sp,sp,16
   210dc:	f800283a 	ret

000210e0 <Meet_Door>:

void Meet_Door(int Type)
{
   210e0:	defffd04 	addi	sp,sp,-12
   210e4:	dfc00215 	stw	ra,8(sp)
   210e8:	df000115 	stw	fp,4(sp)
   210ec:	df000104 	addi	fp,sp,4
   210f0:	e13fff15 	stw	r4,-4(fp)
    switch (Type)
   210f4:	e0bfff17 	ldw	r2,-4(fp)
   210f8:	10c00060 	cmpeqi	r3,r2,1
   210fc:	18000e1e 	bne	r3,zero,21138 <Meet_Door+0x58>
   21100:	10c00088 	cmpgei	r3,r2,2
   21104:	1800021e 	bne	r3,zero,21110 <Meet_Door+0x30>
   21108:	10000626 	beq	r2,zero,21124 <Meet_Door+0x44>
        case RED:
            if (0 == Increase_Attribute(Red_Key, -1)) { return;}
            break;
        case HIDDEN:
            break;
        default: break;
   2110c:	00001906 	br	21174 <Meet_Door+0x94>
    }
}

void Meet_Door(int Type)
{
    switch (Type)
   21110:	10c000a0 	cmpeqi	r3,r2,2
   21114:	18000d1e 	bne	r3,zero,2114c <Meet_Door+0x6c>
   21118:	108000e0 	cmpeqi	r2,r2,3
   2111c:	1000101e 	bne	r2,zero,21160 <Meet_Door+0x80>
        case RED:
            if (0 == Increase_Attribute(Red_Key, -1)) { return;}
            break;
        case HIDDEN:
            break;
        default: break;
   21120:	00001406 	br	21174 <Meet_Door+0x94>
void Meet_Door(int Type)
{
    switch (Type)
    {
        case YELLOW:
            if (0 == Increase_Attribute(Yellow_Key, -1)) { return;}
   21124:	017fffc4 	movi	r5,-1
   21128:	01000144 	movi	r4,5
   2112c:	0020e780 	call	20e78 <Increase_Attribute>
   21130:	10000d1e 	bne	r2,zero,21168 <Meet_Door+0x88>
   21134:	00001206 	br	21180 <Meet_Door+0xa0>
            break;
        case BLUE:
            if (0 == Increase_Attribute(Blue_Key, -1)) { return;}
   21138:	017fffc4 	movi	r5,-1
   2113c:	01000184 	movi	r4,6
   21140:	0020e780 	call	20e78 <Increase_Attribute>
   21144:	10000a1e 	bne	r2,zero,21170 <Meet_Door+0x90>
   21148:	00000d06 	br	21180 <Meet_Door+0xa0>
            break;
        case RED:
            if (0 == Increase_Attribute(Red_Key, -1)) { return;}
   2114c:	017fffc4 	movi	r5,-1
   21150:	010001c4 	movi	r4,7
   21154:	0020e780 	call	20e78 <Increase_Attribute>
   21158:	10000826 	beq	r2,zero,2117c <Meet_Door+0x9c>
            break;
   2115c:	00000506 	br	21174 <Meet_Door+0x94>
        case HIDDEN:
            break;
   21160:	0001883a 	nop
   21164:	00000306 	br	21174 <Meet_Door+0x94>
{
    switch (Type)
    {
        case YELLOW:
            if (0 == Increase_Attribute(Yellow_Key, -1)) { return;}
            break;
   21168:	0001883a 	nop
   2116c:	00000106 	br	21174 <Meet_Door+0x94>
        case BLUE:
            if (0 == Increase_Attribute(Blue_Key, -1)) { return;}
            break;
   21170:	0001883a 	nop
        case HIDDEN:
            break;
        default: break;
    }
    // If there are keys left:
    Pick_Items();
   21174:	0020f440 	call	20f44 <Pick_Items>
   21178:	00000106 	br	21180 <Meet_Door+0xa0>
            break;
        case BLUE:
            if (0 == Increase_Attribute(Blue_Key, -1)) { return;}
            break;
        case RED:
            if (0 == Increase_Attribute(Red_Key, -1)) { return;}
   2117c:	0001883a 	nop
            break;
        default: break;
    }
    // If there are keys left:
    Pick_Items();
}
   21180:	e037883a 	mov	sp,fp
   21184:	dfc00117 	ldw	ra,4(sp)
   21188:	df000017 	ldw	fp,0(sp)
   2118c:	dec00204 	addi	sp,sp,8
   21190:	f800283a 	ret

00021194 <Meet_Coin_Store>:

void Meet_Coin_Store()
{
   21194:	deffff04 	addi	sp,sp,-4
   21198:	df000015 	stw	fp,0(sp)
   2119c:	d839883a 	mov	fp,sp

}
   211a0:	0001883a 	nop
   211a4:	e037883a 	mov	sp,fp
   211a8:	df000017 	ldw	fp,0(sp)
   211ac:	dec00104 	addi	sp,sp,4
   211b0:	f800283a 	ret

000211b4 <Meet_EXP_Store>:

void Meet_EXP_Store()
{
   211b4:	deffff04 	addi	sp,sp,-4
   211b8:	df000015 	stw	fp,0(sp)
   211bc:	d839883a 	mov	fp,sp

}
   211c0:	0001883a 	nop
   211c4:	e037883a 	mov	sp,fp
   211c8:	df000017 	ldw	fp,0(sp)
   211cc:	dec00104 	addi	sp,sp,4
   211d0:	f800283a 	ret

000211d4 <Go_Upstairs>:

void Go_Upstairs()
{
   211d4:	defffe04 	addi	sp,sp,-8
   211d8:	dfc00115 	stw	ra,4(sp)
   211dc:	df000015 	stw	fp,0(sp)
   211e0:	d839883a 	mov	fp,sp
    Move();
   211e4:	0020d840 	call	20d84 <Move>
    if ((cur_floor + 1) < TOT_FLOOR_NUMBER) {
   211e8:	d0a0de17 	ldw	r2,-31880(gp)
   211ec:	10800044 	addi	r2,r2,1
   211f0:	10800128 	cmpgeui	r2,r2,4
   211f4:	1000031e 	bne	r2,zero,21204 <Go_Upstairs+0x30>
        cur_floor ++;
   211f8:	d0a0de17 	ldw	r2,-31880(gp)
   211fc:	10800044 	addi	r2,r2,1
   21200:	d0a0de15 	stw	r2,-31880(gp)
    }
    draw_all_text(cur_floor);
   21204:	d0a0de17 	ldw	r2,-31880(gp)
   21208:	1009883a 	mov	r4,r2
   2120c:	00205ac0 	call	205ac <draw_all_text>
}
   21210:	0001883a 	nop
   21214:	e037883a 	mov	sp,fp
   21218:	dfc00117 	ldw	ra,4(sp)
   2121c:	df000017 	ldw	fp,0(sp)
   21220:	dec00204 	addi	sp,sp,8
   21224:	f800283a 	ret

00021228 <Go_DownStairs>:

void Go_DownStairs()
{
   21228:	defffe04 	addi	sp,sp,-8
   2122c:	dfc00115 	stw	ra,4(sp)
   21230:	df000015 	stw	fp,0(sp)
   21234:	d839883a 	mov	fp,sp
    Move();
   21238:	0020d840 	call	20d84 <Move>
    if (cur_floor > 0) {
   2123c:	d0a0de17 	ldw	r2,-31880(gp)
   21240:	10000326 	beq	r2,zero,21250 <Go_DownStairs+0x28>
        cur_floor --;
   21244:	d0a0de17 	ldw	r2,-31880(gp)
   21248:	10bfffc4 	addi	r2,r2,-1
   2124c:	d0a0de15 	stw	r2,-31880(gp)
    }
    draw_all_text(cur_floor);
   21250:	d0a0de17 	ldw	r2,-31880(gp)
   21254:	1009883a 	mov	r4,r2
   21258:	00205ac0 	call	205ac <draw_all_text>
}
   2125c:	0001883a 	nop
   21260:	e037883a 	mov	sp,fp
   21264:	dfc00117 	ldw	ra,4(sp)
   21268:	df000017 	ldw	fp,0(sp)
   2126c:	dec00204 	addi	sp,sp,8
   21270:	f800283a 	ret

00021274 <Do_Battle>:

/*  Return 1 if the knight defeats the moster, 0 if the knight fails  */
int Do_Battle(int moster_type)
{
   21274:	defff704 	addi	sp,sp,-36
   21278:	dfc00815 	stw	ra,32(sp)
   2127c:	df000715 	stw	fp,28(sp)
   21280:	df000704 	addi	fp,sp,28
   21284:	e13fff15 	stw	r4,-4(fp)
    Moster_Attributes* target_moster;

    // Choose the monster_type
    switch (moster_type)
   21288:	e0bfff17 	ldw	r2,-4(fp)
   2128c:	10bffb44 	addi	r2,r2,-19
   21290:	10c00268 	cmpgeui	r3,r2,9
   21294:	1800371e 	bne	r3,zero,21374 <Do_Battle+0x100>
   21298:	100690ba 	slli	r3,r2,2
   2129c:	008000b4 	movhi	r2,2
   212a0:	1084ac04 	addi	r2,r2,4784
   212a4:	1885883a 	add	r2,r3,r2
   212a8:	10800017 	ldw	r2,0(r2)
   212ac:	1000683a 	jmp	r2
   212b0:	000212d4 	movui	zero,2123
   212b4:	000212e8 	cmpgeui	zero,zero,2123
   212b8:	000212fc 	xorhi	zero,zero,2123
   212bc:	00021310 	cmplti	zero,zero,2124
   212c0:	00021324 	muli	zero,zero,2124
   212c4:	00021338 	rdprs	zero,zero,2124
   212c8:	0002134c 	andi	zero,zero,2125
   212cc:	00021374 	movhi	zero,2125
   212d0:	00021360 	cmpeqi	zero,zero,2125
    {
        case GREEN_SLIME1:
            target_moster = Moster_List[0];
   212d4:	008000b4 	movhi	r2,2
   212d8:	10964804 	addi	r2,r2,22816
   212dc:	10800017 	ldw	r2,0(r2)
   212e0:	e0bff915 	stw	r2,-28(fp)
            break;
   212e4:	00002406 	br	21378 <Do_Battle+0x104>
        case RED_SLIME1:
            target_moster = Moster_List[1];
   212e8:	008000b4 	movhi	r2,2
   212ec:	10964804 	addi	r2,r2,22816
   212f0:	10800117 	ldw	r2,4(r2)
   212f4:	e0bff915 	stw	r2,-28(fp)
            break;
   212f8:	00001f06 	br	21378 <Do_Battle+0x104>
        case BAT1:
            target_moster = Moster_List[2];
   212fc:	008000b4 	movhi	r2,2
   21300:	10964804 	addi	r2,r2,22816
   21304:	10800217 	ldw	r2,8(r2)
   21308:	e0bff915 	stw	r2,-28(fp)
            break;
   2130c:	00001a06 	br	21378 <Do_Battle+0x104>
        case MAGICIAN1:
            target_moster = Moster_List[3];
   21310:	008000b4 	movhi	r2,2
   21314:	10964804 	addi	r2,r2,22816
   21318:	10800317 	ldw	r2,12(r2)
   2131c:	e0bff915 	stw	r2,-28(fp)
            break;
   21320:	00001506 	br	21378 <Do_Battle+0x104>
        case SKELETON1:
            target_moster = Moster_List[4];
   21324:	008000b4 	movhi	r2,2
   21328:	10964804 	addi	r2,r2,22816
   2132c:	10800417 	ldw	r2,16(r2)
   21330:	e0bff915 	stw	r2,-28(fp)
            break;
   21334:	00001006 	br	21378 <Do_Battle+0x104>
        case GUARD1:
            target_moster = Moster_List[5];
   21338:	008000b4 	movhi	r2,2
   2133c:	10964804 	addi	r2,r2,22816
   21340:	10800517 	ldw	r2,20(r2)
   21344:	e0bff915 	stw	r2,-28(fp)
            break;
   21348:	00000b06 	br	21378 <Do_Battle+0x104>
        case MAGICIAN_LIGHTNING1:
            target_moster = Moster_List[6];
   2134c:	008000b4 	movhi	r2,2
   21350:	10964804 	addi	r2,r2,22816
   21354:	10800617 	ldw	r2,24(r2)
   21358:	e0bff915 	stw	r2,-28(fp)
            break;
   2135c:	00000606 	br	21378 <Do_Battle+0x104>
        case SLIME_MAN1:
            target_moster = Moster_List[7];
   21360:	008000b4 	movhi	r2,2
   21364:	10964804 	addi	r2,r2,22816
   21368:	10800717 	ldw	r2,28(r2)
   2136c:	e0bff915 	stw	r2,-28(fp)
            break;
   21370:	00000106 	br	21378 <Do_Battle+0x104>
        default:
            break;
   21374:	0001883a 	nop
    }

    int monster_health = target_moster->Monster_Health;
   21378:	e0bff917 	ldw	r2,-28(fp)
   2137c:	10800017 	ldw	r2,0(r2)
   21380:	e0bffa15 	stw	r2,-24(fp)
    int monster_energy_bar = target_moster->Monster_Energy_Bar;
   21384:	e0bff917 	ldw	r2,-28(fp)
   21388:	10800317 	ldw	r2,12(r2)
   2138c:	e0bffc15 	stw	r2,-16(fp)

    // Calculate the health change of the player
    int player_health  = (int) Game_data_mem_base[Health];
   21390:	d0a00017 	ldw	r2,-32768(gp)
   21394:	10800084 	addi	r2,r2,2
   21398:	1080000b 	ldhu	r2,0(r2)
   2139c:	10bfffcc 	andi	r2,r2,65535
   213a0:	10a0001c 	xori	r2,r2,32768
   213a4:	10a00004 	addi	r2,r2,-32768
   213a8:	e0bffb15 	stw	r2,-20(fp)
    int player_attack  = (int) Game_data_mem_base[Attack];
   213ac:	d0a00017 	ldw	r2,-32768(gp)
   213b0:	10800104 	addi	r2,r2,4
   213b4:	1080000b 	ldhu	r2,0(r2)
   213b8:	10bfffcc 	andi	r2,r2,65535
   213bc:	10a0001c 	xori	r2,r2,32768
   213c0:	10a00004 	addi	r2,r2,-32768
   213c4:	e0bffd15 	stw	r2,-12(fp)
    int player_defense = (int) Game_data_mem_base[Defense];
   213c8:	d0a00017 	ldw	r2,-32768(gp)
   213cc:	10800184 	addi	r2,r2,6
   213d0:	1080000b 	ldhu	r2,0(r2)
   213d4:	10bfffcc 	andi	r2,r2,65535
   213d8:	10a0001c 	xori	r2,r2,32768
   213dc:	10a00004 	addi	r2,r2,-32768
   213e0:	e0bffe15 	stw	r2,-8(fp)
#define damage(x, y) ( (x > y) ? (x - y) : 0 )

    while (1)
    {
        // Player attack first normally
        monster_health -= damage(player_attack, target_moster->Monster_Defense);
   213e4:	e0bff917 	ldw	r2,-28(fp)
   213e8:	10c00217 	ldw	r3,8(r2)
   213ec:	e0bffd17 	ldw	r2,-12(fp)
   213f0:	1880050e 	bge	r3,r2,21408 <Do_Battle+0x194>
   213f4:	e0bff917 	ldw	r2,-28(fp)
   213f8:	10800217 	ldw	r2,8(r2)
   213fc:	e0fffd17 	ldw	r3,-12(fp)
   21400:	1885c83a 	sub	r2,r3,r2
   21404:	00000106 	br	2140c <Do_Battle+0x198>
   21408:	0005883a 	mov	r2,zero
   2140c:	e0fffa17 	ldw	r3,-24(fp)
   21410:	1885c83a 	sub	r2,r3,r2
   21414:	e0bffa15 	stw	r2,-24(fp)
        if (monster_health > 0)
   21418:	e0bffa17 	ldw	r2,-24(fp)
   2141c:	0080180e 	bge	zero,r2,21480 <Do_Battle+0x20c>
        {
            if (target_moster->Special == 1) {
   21420:	e0bff917 	ldw	r2,-28(fp)
   21424:	10800717 	ldw	r2,28(r2)
   21428:	10800058 	cmpnei	r2,r2,1
   2142c:	1000061e 	bne	r2,zero,21448 <Do_Battle+0x1d4>
                player_health -= target_moster->Monster_Attack;
   21430:	e0bff917 	ldw	r2,-28(fp)
   21434:	10800117 	ldw	r2,4(r2)
   21438:	e0fffb17 	ldw	r3,-20(fp)
   2143c:	1885c83a 	sub	r2,r3,r2
   21440:	e0bffb15 	stw	r2,-20(fp)
   21444:	00002506 	br	214dc <Do_Battle+0x268>
            } else {
                player_health -= damage(target_moster->Monster_Attack, player_defense);
   21448:	e0bff917 	ldw	r2,-28(fp)
   2144c:	10800117 	ldw	r2,4(r2)
   21450:	e0fffe17 	ldw	r3,-8(fp)
   21454:	1880050e 	bge	r3,r2,2146c <Do_Battle+0x1f8>
   21458:	e0bff917 	ldw	r2,-28(fp)
   2145c:	10c00117 	ldw	r3,4(r2)
   21460:	e0bffe17 	ldw	r2,-8(fp)
   21464:	1885c83a 	sub	r2,r3,r2
   21468:	00000106 	br	21470 <Do_Battle+0x1fc>
   2146c:	0005883a 	mov	r2,zero
   21470:	e0fffb17 	ldw	r3,-20(fp)
   21474:	1885c83a 	sub	r2,r3,r2
   21478:	e0bffb15 	stw	r2,-20(fp)
   2147c:	00001706 	br	214dc <Do_Battle+0x268>
            }
        }
        else
        {
            Game_data_mem_base[Health] = player_health;
   21480:	d0a00017 	ldw	r2,-32768(gp)
   21484:	10800084 	addi	r2,r2,2
   21488:	e0fffb17 	ldw	r3,-20(fp)
   2148c:	10c0000d 	sth	r3,0(r2)
            Increase_Attribute(Coin, target_moster->Coin_Gained);
   21490:	e0bff917 	ldw	r2,-28(fp)
   21494:	10800617 	ldw	r2,24(r2)
   21498:	10bfffcc 	andi	r2,r2,65535
   2149c:	10a0001c 	xori	r2,r2,32768
   214a0:	10a00004 	addi	r2,r2,-32768
   214a4:	100b883a 	mov	r5,r2
   214a8:	01000204 	movi	r4,8
   214ac:	0020e780 	call	20e78 <Increase_Attribute>
            Increase_Attribute(EXP, target_moster->EXP_Gained);
   214b0:	e0bff917 	ldw	r2,-28(fp)
   214b4:	10800517 	ldw	r2,20(r2)
   214b8:	10bfffcc 	andi	r2,r2,65535
   214bc:	10a0001c 	xori	r2,r2,32768
   214c0:	10a00004 	addi	r2,r2,-32768
   214c4:	100b883a 	mov	r5,r2
   214c8:	01000104 	movi	r4,4
   214cc:	0020e780 	call	20e78 <Increase_Attribute>
            Pick_Items();
   214d0:	0020f440 	call	20f44 <Pick_Items>
            return 1;
   214d4:	00800044 	movi	r2,1
   214d8:	00000606 	br	214f4 <Do_Battle+0x280>
        }
        
        if (player_health <= 0)
   214dc:	e0bffb17 	ldw	r2,-20(fp)
   214e0:	00bfc016 	blt	zero,r2,213e4 <gameover+0xefee6f44>
        {
            Game_data_mem_base[Health] = 0;
   214e4:	d0a00017 	ldw	r2,-32768(gp)
   214e8:	10800084 	addi	r2,r2,2
   214ec:	1000000d 	sth	zero,0(r2)
            return 0;
   214f0:	0005883a 	mov	r2,zero
        }
    }

#undef damage
}
   214f4:	e037883a 	mov	sp,fp
   214f8:	dfc00117 	ldw	ra,4(sp)
   214fc:	df000017 	ldw	fp,0(sp)
   21500:	dec00204 	addi	sp,sp,8
   21504:	f800283a 	ret

00021508 <Battle>:

void Battle()
{
   21508:	defffb04 	addi	sp,sp,-20
   2150c:	dfc00415 	stw	ra,16(sp)
   21510:	df000315 	stw	fp,12(sp)
   21514:	dc400215 	stw	r17,8(sp)
   21518:	dc000115 	stw	r16,4(sp)
   2151c:	df000304 	addi	fp,sp,12
    int moster_type;

    switch (usb_key) {
   21520:	d0a0e003 	ldbu	r2,-31872(gp)
   21524:	10803fcc 	andi	r2,r2,255
   21528:	10c001e0 	cmpeqi	r3,r2,7
   2152c:	18004f1e 	bne	r3,zero,2166c <Battle+0x164>
   21530:	10c00208 	cmpgei	r3,r2,8
   21534:	1800031e 	bne	r3,zero,21544 <Battle+0x3c>
   21538:	10800120 	cmpeqi	r2,r2,4
   2153c:	1000351e 	bne	r2,zero,21614 <Battle+0x10c>
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1];
            break;
        case 0x07:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1];
            break;
        default: break;
   21540:	00006006 	br	216c4 <Battle+0x1bc>

void Battle()
{
    int moster_type;

    switch (usb_key) {
   21544:	10c005a0 	cmpeqi	r3,r2,22
   21548:	18001b1e 	bne	r3,zero,215b8 <Battle+0xb0>
   2154c:	108006a0 	cmpeqi	r2,r2,26
   21550:	1000011e 	bne	r2,zero,21558 <Battle+0x50>
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1];
            break;
        case 0x07:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1];
            break;
        default: break;
   21554:	00005b06 	br	216c4 <Battle+0x1bc>
{
    int moster_type;

    switch (usb_key) {
        case 0x1a:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY - 1) * 11 + cur_posX];
   21558:	d4200017 	ldw	r16,-32768(gp)
   2155c:	d0a0de17 	ldw	r2,-31880(gp)
   21560:	01401e44 	movi	r5,121
   21564:	1009883a 	mov	r4,r2
   21568:	00225b40 	call	225b4 <__mulsi3>
   2156c:	1023883a 	mov	r17,r2
   21570:	d0a0e117 	ldw	r2,-31868(gp)
   21574:	014002c4 	movi	r5,11
   21578:	1009883a 	mov	r4,r2
   2157c:	00225b40 	call	225b4 <__mulsi3>
   21580:	8887883a 	add	r3,r17,r2
   21584:	d0a0df17 	ldw	r2,-31876(gp)
   21588:	1887883a 	add	r3,r3,r2
   2158c:	00a00034 	movhi	r2,32768
   21590:	10bfffc4 	addi	r2,r2,-1
   21594:	1885883a 	add	r2,r3,r2
   21598:	1085883a 	add	r2,r2,r2
   2159c:	8085883a 	add	r2,r16,r2
   215a0:	1080000b 	ldhu	r2,0(r2)
   215a4:	10bfffcc 	andi	r2,r2,65535
   215a8:	10a0001c 	xori	r2,r2,32768
   215ac:	10a00004 	addi	r2,r2,-32768
   215b0:	e0bffd15 	stw	r2,-12(fp)
            break;
   215b4:	00004306 	br	216c4 <Battle+0x1bc>
        case 0x16:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + (cur_posY + 1) * 11 + cur_posX];
   215b8:	d4200017 	ldw	r16,-32768(gp)
   215bc:	d0a0de17 	ldw	r2,-31880(gp)
   215c0:	01401e44 	movi	r5,121
   215c4:	1009883a 	mov	r4,r2
   215c8:	00225b40 	call	225b4 <__mulsi3>
   215cc:	1023883a 	mov	r17,r2
   215d0:	d0a0e117 	ldw	r2,-31868(gp)
   215d4:	10800044 	addi	r2,r2,1
   215d8:	014002c4 	movi	r5,11
   215dc:	1009883a 	mov	r4,r2
   215e0:	00225b40 	call	225b4 <__mulsi3>
   215e4:	8887883a 	add	r3,r17,r2
   215e8:	d0a0df17 	ldw	r2,-31876(gp)
   215ec:	1885883a 	add	r2,r3,r2
   215f0:	10800284 	addi	r2,r2,10
   215f4:	1085883a 	add	r2,r2,r2
   215f8:	8085883a 	add	r2,r16,r2
   215fc:	1080000b 	ldhu	r2,0(r2)
   21600:	10bfffcc 	andi	r2,r2,65535
   21604:	10a0001c 	xori	r2,r2,32768
   21608:	10a00004 	addi	r2,r2,-32768
   2160c:	e0bffd15 	stw	r2,-12(fp)
            break;
   21610:	00002c06 	br	216c4 <Battle+0x1bc>
        case 0x04:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX - 1];
   21614:	d4200017 	ldw	r16,-32768(gp)
   21618:	d0a0de17 	ldw	r2,-31880(gp)
   2161c:	01401e44 	movi	r5,121
   21620:	1009883a 	mov	r4,r2
   21624:	00225b40 	call	225b4 <__mulsi3>
   21628:	1023883a 	mov	r17,r2
   2162c:	d0a0e117 	ldw	r2,-31868(gp)
   21630:	014002c4 	movi	r5,11
   21634:	1009883a 	mov	r4,r2
   21638:	00225b40 	call	225b4 <__mulsi3>
   2163c:	8887883a 	add	r3,r17,r2
   21640:	d0a0df17 	ldw	r2,-31876(gp)
   21644:	1885883a 	add	r2,r3,r2
   21648:	10800244 	addi	r2,r2,9
   2164c:	1085883a 	add	r2,r2,r2
   21650:	8085883a 	add	r2,r16,r2
   21654:	1080000b 	ldhu	r2,0(r2)
   21658:	10bfffcc 	andi	r2,r2,65535
   2165c:	10a0001c 	xori	r2,r2,32768
   21660:	10a00004 	addi	r2,r2,-32768
   21664:	e0bffd15 	stw	r2,-12(fp)
            break;
   21668:	00001606 	br	216c4 <Battle+0x1bc>
        case 0x07:
            moster_type = (int) Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + cur_posY * 11 + cur_posX + 1];
   2166c:	d4200017 	ldw	r16,-32768(gp)
   21670:	d0a0de17 	ldw	r2,-31880(gp)
   21674:	01401e44 	movi	r5,121
   21678:	1009883a 	mov	r4,r2
   2167c:	00225b40 	call	225b4 <__mulsi3>
   21680:	1023883a 	mov	r17,r2
   21684:	d0a0e117 	ldw	r2,-31868(gp)
   21688:	014002c4 	movi	r5,11
   2168c:	1009883a 	mov	r4,r2
   21690:	00225b40 	call	225b4 <__mulsi3>
   21694:	8887883a 	add	r3,r17,r2
   21698:	d0a0df17 	ldw	r2,-31876(gp)
   2169c:	1885883a 	add	r2,r3,r2
   216a0:	108002c4 	addi	r2,r2,11
   216a4:	1085883a 	add	r2,r2,r2
   216a8:	8085883a 	add	r2,r16,r2
   216ac:	1080000b 	ldhu	r2,0(r2)
   216b0:	10bfffcc 	andi	r2,r2,65535
   216b4:	10a0001c 	xori	r2,r2,32768
   216b8:	10a00004 	addi	r2,r2,-32768
   216bc:	e0bffd15 	stw	r2,-12(fp)
            break;
   216c0:	0001883a 	nop
        default: break;
    }

    Do_Battle(moster_type);
   216c4:	e13ffd17 	ldw	r4,-12(fp)
   216c8:	00212740 	call	21274 <Do_Battle>
}
   216cc:	0001883a 	nop
   216d0:	e6fffe04 	addi	sp,fp,-8
   216d4:	dfc00317 	ldw	ra,12(sp)
   216d8:	df000217 	ldw	fp,8(sp)
   216dc:	dc400117 	ldw	r17,4(sp)
   216e0:	dc000017 	ldw	r16,0(sp)
   216e4:	dec00404 	addi	sp,sp,16
   216e8:	f800283a 	ret

000216ec <Print_All>:

void Print_All()
{
   216ec:	defffa04 	addi	sp,sp,-24
   216f0:	dfc00515 	stw	ra,20(sp)
   216f4:	df000415 	stw	fp,16(sp)
   216f8:	dc400315 	stw	r17,12(sp)
   216fc:	dc000215 	stw	r16,8(sp)
   21700:	df000404 	addi	fp,sp,16
    // Clear the screen
    printf("\033[2J");
   21704:	010000b4 	movhi	r4,2
   21708:	2115f704 	addi	r4,r4,22492
   2170c:	00226180 	call	22618 <printf>
    // Print the current floor config
    for (int i = 0; i < 11; i++) {
   21710:	e03ffc15 	stw	zero,-16(fp)
   21714:	00002e06 	br	217d0 <Print_All+0xe4>
        for (int j = 0; j < 11; j++) {
   21718:	e03ffd15 	stw	zero,-12(fp)
   2171c:	00002406 	br	217b0 <Print_All+0xc4>
            if (i == cur_posY && j == cur_posX) {
   21720:	e0fffc17 	ldw	r3,-16(fp)
   21724:	d0a0e117 	ldw	r2,-31868(gp)
   21728:	1880071e 	bne	r3,r2,21748 <Print_All+0x5c>
   2172c:	e0fffd17 	ldw	r3,-12(fp)
   21730:	d0a0df17 	ldw	r2,-31876(gp)
   21734:	1880041e 	bne	r3,r2,21748 <Print_All+0x5c>
                printf("P,  ");
   21738:	010000b4 	movhi	r4,2
   2173c:	2115f904 	addi	r4,r4,22500
   21740:	00226180 	call	22618 <printf>
                continue;
   21744:	00001706 	br	217a4 <Print_All+0xb8>
            }
            printf("%d,  ", Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + i * 11 + j]);
   21748:	d4200017 	ldw	r16,-32768(gp)
   2174c:	d0a0de17 	ldw	r2,-31880(gp)
   21750:	01401e44 	movi	r5,121
   21754:	1009883a 	mov	r4,r2
   21758:	00225b40 	call	225b4 <__mulsi3>
   2175c:	1023883a 	mov	r17,r2
   21760:	014002c4 	movi	r5,11
   21764:	e13ffc17 	ldw	r4,-16(fp)
   21768:	00225b40 	call	225b4 <__mulsi3>
   2176c:	8887883a 	add	r3,r17,r2
   21770:	e0bffd17 	ldw	r2,-12(fp)
   21774:	1885883a 	add	r2,r3,r2
   21778:	10800284 	addi	r2,r2,10
   2177c:	1085883a 	add	r2,r2,r2
   21780:	8085883a 	add	r2,r16,r2
   21784:	1080000b 	ldhu	r2,0(r2)
   21788:	10bfffcc 	andi	r2,r2,65535
   2178c:	10a0001c 	xori	r2,r2,32768
   21790:	10a00004 	addi	r2,r2,-32768
   21794:	100b883a 	mov	r5,r2
   21798:	010000b4 	movhi	r4,2
   2179c:	2115fb04 	addi	r4,r4,22508
   217a0:	00226180 	call	22618 <printf>
{
    // Clear the screen
    printf("\033[2J");
    // Print the current floor config
    for (int i = 0; i < 11; i++) {
        for (int j = 0; j < 11; j++) {
   217a4:	e0bffd17 	ldw	r2,-12(fp)
   217a8:	10800044 	addi	r2,r2,1
   217ac:	e0bffd15 	stw	r2,-12(fp)
   217b0:	e0bffd17 	ldw	r2,-12(fp)
   217b4:	108002d0 	cmplti	r2,r2,11
   217b8:	103fd91e 	bne	r2,zero,21720 <gameover+0xefee7280>
                printf("P,  ");
                continue;
            }
            printf("%d,  ", Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + i * 11 + j]);
        }
        printf("\n");
   217bc:	01000284 	movi	r4,10
   217c0:	002266c0 	call	2266c <putchar>
void Print_All()
{
    // Clear the screen
    printf("\033[2J");
    // Print the current floor config
    for (int i = 0; i < 11; i++) {
   217c4:	e0bffc17 	ldw	r2,-16(fp)
   217c8:	10800044 	addi	r2,r2,1
   217cc:	e0bffc15 	stw	r2,-16(fp)
   217d0:	e0bffc17 	ldw	r2,-16(fp)
   217d4:	108002d0 	cmplti	r2,r2,11
   217d8:	103fcf1e 	bne	r2,zero,21718 <gameover+0xefee7278>
            printf("%d,  ", Game_data_mem_base[PLAYER_STATUS_TYPE + cur_floor * FLOOR_SIZE + i * 11 + j]);
        }
        printf("\n");
    }
    // Print the player status
    printf("Floor: %d\n", cur_floor);
   217dc:	d0a0de17 	ldw	r2,-31880(gp)
   217e0:	100b883a 	mov	r5,r2
   217e4:	010000b4 	movhi	r4,2
   217e8:	2115fd04 	addi	r4,r4,22516
   217ec:	00226180 	call	22618 <printf>
    printf("X: %d\n", cur_posX);
   217f0:	d0a0df17 	ldw	r2,-31876(gp)
   217f4:	100b883a 	mov	r5,r2
   217f8:	010000b4 	movhi	r4,2
   217fc:	21160004 	addi	r4,r4,22528
   21800:	00226180 	call	22618 <printf>
    printf("Y: %d\n", cur_posY);
   21804:	d0a0e117 	ldw	r2,-31868(gp)
   21808:	100b883a 	mov	r5,r2
   2180c:	010000b4 	movhi	r4,2
   21810:	21160204 	addi	r4,r4,22536
   21814:	00226180 	call	22618 <printf>
    printf("Status: %d\n", Game_data_mem_base[Status]);
   21818:	d0a00017 	ldw	r2,-32768(gp)
   2181c:	1080000b 	ldhu	r2,0(r2)
   21820:	10bfffcc 	andi	r2,r2,65535
   21824:	10a0001c 	xori	r2,r2,32768
   21828:	10a00004 	addi	r2,r2,-32768
   2182c:	100b883a 	mov	r5,r2
   21830:	010000b4 	movhi	r4,2
   21834:	21160404 	addi	r4,r4,22544
   21838:	00226180 	call	22618 <printf>
    printf("Health: %d\n", Game_data_mem_base[Health]);
   2183c:	d0a00017 	ldw	r2,-32768(gp)
   21840:	10800084 	addi	r2,r2,2
   21844:	1080000b 	ldhu	r2,0(r2)
   21848:	10bfffcc 	andi	r2,r2,65535
   2184c:	10a0001c 	xori	r2,r2,32768
   21850:	10a00004 	addi	r2,r2,-32768
   21854:	100b883a 	mov	r5,r2
   21858:	010000b4 	movhi	r4,2
   2185c:	21160704 	addi	r4,r4,22556
   21860:	00226180 	call	22618 <printf>
    printf("Attack: %d\n", Game_data_mem_base[Attack]);
   21864:	d0a00017 	ldw	r2,-32768(gp)
   21868:	10800104 	addi	r2,r2,4
   2186c:	1080000b 	ldhu	r2,0(r2)
   21870:	10bfffcc 	andi	r2,r2,65535
   21874:	10a0001c 	xori	r2,r2,32768
   21878:	10a00004 	addi	r2,r2,-32768
   2187c:	100b883a 	mov	r5,r2
   21880:	010000b4 	movhi	r4,2
   21884:	21160a04 	addi	r4,r4,22568
   21888:	00226180 	call	22618 <printf>
    printf("Defense: %d\n", Game_data_mem_base[Defense]);
   2188c:	d0a00017 	ldw	r2,-32768(gp)
   21890:	10800184 	addi	r2,r2,6
   21894:	1080000b 	ldhu	r2,0(r2)
   21898:	10bfffcc 	andi	r2,r2,65535
   2189c:	10a0001c 	xori	r2,r2,32768
   218a0:	10a00004 	addi	r2,r2,-32768
   218a4:	100b883a 	mov	r5,r2
   218a8:	010000b4 	movhi	r4,2
   218ac:	21160d04 	addi	r4,r4,22580
   218b0:	00226180 	call	22618 <printf>
    printf("EXP: %d\n", Game_data_mem_base[EXP]);
   218b4:	d0a00017 	ldw	r2,-32768(gp)
   218b8:	10800204 	addi	r2,r2,8
   218bc:	1080000b 	ldhu	r2,0(r2)
   218c0:	10bfffcc 	andi	r2,r2,65535
   218c4:	10a0001c 	xori	r2,r2,32768
   218c8:	10a00004 	addi	r2,r2,-32768
   218cc:	100b883a 	mov	r5,r2
   218d0:	010000b4 	movhi	r4,2
   218d4:	21161104 	addi	r4,r4,22596
   218d8:	00226180 	call	22618 <printf>
    printf("Yellow_Key: %d\n", Game_data_mem_base[Yellow_Key]);
   218dc:	d0a00017 	ldw	r2,-32768(gp)
   218e0:	10800284 	addi	r2,r2,10
   218e4:	1080000b 	ldhu	r2,0(r2)
   218e8:	10bfffcc 	andi	r2,r2,65535
   218ec:	10a0001c 	xori	r2,r2,32768
   218f0:	10a00004 	addi	r2,r2,-32768
   218f4:	100b883a 	mov	r5,r2
   218f8:	010000b4 	movhi	r4,2
   218fc:	21161404 	addi	r4,r4,22608
   21900:	00226180 	call	22618 <printf>
    printf("Blue_Key: %d\n", Game_data_mem_base[Blue_Key]);
   21904:	d0a00017 	ldw	r2,-32768(gp)
   21908:	10800304 	addi	r2,r2,12
   2190c:	1080000b 	ldhu	r2,0(r2)
   21910:	10bfffcc 	andi	r2,r2,65535
   21914:	10a0001c 	xori	r2,r2,32768
   21918:	10a00004 	addi	r2,r2,-32768
   2191c:	100b883a 	mov	r5,r2
   21920:	010000b4 	movhi	r4,2
   21924:	21161804 	addi	r4,r4,22624
   21928:	00226180 	call	22618 <printf>
    printf("Red_Key: %d\n", Game_data_mem_base[Red_Key]);
   2192c:	d0a00017 	ldw	r2,-32768(gp)
   21930:	10800384 	addi	r2,r2,14
   21934:	1080000b 	ldhu	r2,0(r2)
   21938:	10bfffcc 	andi	r2,r2,65535
   2193c:	10a0001c 	xori	r2,r2,32768
   21940:	10a00004 	addi	r2,r2,-32768
   21944:	100b883a 	mov	r5,r2
   21948:	010000b4 	movhi	r4,2
   2194c:	21161c04 	addi	r4,r4,22640
   21950:	00226180 	call	22618 <printf>
    printf("Coin: %d\n", Game_data_mem_base[Coin]);
   21954:	d0a00017 	ldw	r2,-32768(gp)
   21958:	10800404 	addi	r2,r2,16
   2195c:	1080000b 	ldhu	r2,0(r2)
   21960:	10bfffcc 	andi	r2,r2,65535
   21964:	10a0001c 	xori	r2,r2,32768
   21968:	10a00004 	addi	r2,r2,-32768
   2196c:	100b883a 	mov	r5,r2
   21970:	010000b4 	movhi	r4,2
   21974:	21162004 	addi	r4,r4,22656
   21978:	00226180 	call	22618 <printf>
}
   2197c:	0001883a 	nop
   21980:	e6fffe04 	addi	sp,fp,-8
   21984:	dfc00317 	ldw	ra,12(sp)
   21988:	df000217 	ldw	fp,8(sp)
   2198c:	dc400117 	ldw	r17,4(sp)
   21990:	dc000017 	ldw	r16,0(sp)
   21994:	dec00404 	addi	sp,sp,16
   21998:	f800283a 	ret

0002199c <main>:



// Execution of the Game
int main()
{
   2199c:	defffc04 	addi	sp,sp,-16
   219a0:	dfc00315 	stw	ra,12(sp)
   219a4:	df000215 	stw	fp,8(sp)
   219a8:	df000204 	addi	fp,sp,8
    
    Init_Game();
   219ac:	002087c0 	call	2087c <Init_Game>
    for (int i = 0; i < PLAYER_STATUS_TYPE + TOT_FLOOR_NUMBER * FLOOR_SIZE; i++) {
   219b0:	e03ffe15 	stw	zero,-8(fp)
   219b4:	00001106 	br	219fc <main+0x60>
        Player_controller_base[i] = (int) Game_data_mem_base[i];
   219b8:	d0e0dc17 	ldw	r3,-31888(gp)
   219bc:	e0bffe17 	ldw	r2,-8(fp)
   219c0:	1085883a 	add	r2,r2,r2
   219c4:	1085883a 	add	r2,r2,r2
   219c8:	1887883a 	add	r3,r3,r2
   219cc:	d1200017 	ldw	r4,-32768(gp)
   219d0:	e0bffe17 	ldw	r2,-8(fp)
   219d4:	1085883a 	add	r2,r2,r2
   219d8:	2085883a 	add	r2,r4,r2
   219dc:	1080000b 	ldhu	r2,0(r2)
   219e0:	10bfffcc 	andi	r2,r2,65535
   219e4:	10a0001c 	xori	r2,r2,32768
   219e8:	10a00004 	addi	r2,r2,-32768
   219ec:	18800015 	stw	r2,0(r3)
// Execution of the Game
int main()
{
    
    Init_Game();
    for (int i = 0; i < PLAYER_STATUS_TYPE + TOT_FLOOR_NUMBER * FLOOR_SIZE; i++) {
   219f0:	e0bffe17 	ldw	r2,-8(fp)
   219f4:	10800044 	addi	r2,r2,1
   219f8:	e0bffe15 	stw	r2,-8(fp)
   219fc:	e0bffe17 	ldw	r2,-8(fp)
   21a00:	10807b90 	cmplti	r2,r2,494
   21a04:	103fec1e 	bne	r2,zero,219b8 <gameover+0xefee7518>
        Player_controller_base[i] = (int) Game_data_mem_base[i];
    }
    draw_cover();
   21a08:	00205f00 	call	205f0 <draw_cover>
    printf("Welcome to the Magic Tower!\n");
   21a0c:	010000b4 	movhi	r4,2
   21a10:	21162304 	addi	r4,r4,22668
   21a14:	00227080 	call	22708 <puts>
    printf("Press Enter to move on...\n");
   21a18:	010000b4 	movhi	r4,2
   21a1c:	21162a04 	addi	r4,r4,22696
   21a20:	00227080 	call	22708 <puts>
    while (usb_key != 0x28) {
   21a24:	00000306 	br	21a34 <main+0x98>
    	usb_key = Keycode_mem_base[0];
   21a28:	d0a00117 	ldw	r2,-32764(gp)
   21a2c:	10800003 	ldbu	r2,0(r2)
   21a30:	d0a0e005 	stb	r2,-31872(gp)
        Player_controller_base[i] = (int) Game_data_mem_base[i];
    }
    draw_cover();
    printf("Welcome to the Magic Tower!\n");
    printf("Press Enter to move on...\n");
    while (usb_key != 0x28) {
   21a34:	d0a0e003 	ldbu	r2,-31872(gp)
   21a38:	10803fcc 	andi	r2,r2,255
   21a3c:	10800a18 	cmpnei	r2,r2,40
   21a40:	103ff91e 	bne	r2,zero,21a28 <gameover+0xefee7588>
    	usb_key = Keycode_mem_base[0];
    }
    fb_test();
   21a44:	00225240 	call	22524 <fb_test>
    draw_all_text(cur_floor);
   21a48:	d0a0de17 	ldw	r2,-31880(gp)
   21a4c:	1009883a 	mov	r4,r2
   21a50:	00205ac0 	call	205ac <draw_all_text>
    while(1) {
        
//        Print_All();

        // Transmit all data to the register file
        for (int i = 0; i < PLAYER_STATUS_TYPE + TOT_FLOOR_NUMBER * FLOOR_SIZE; i++) {
   21a54:	e03fff15 	stw	zero,-4(fp)
   21a58:	00001106 	br	21aa0 <main+0x104>
            Player_controller_base[i] = (int) Game_data_mem_base[i];
   21a5c:	d0e0dc17 	ldw	r3,-31888(gp)
   21a60:	e0bfff17 	ldw	r2,-4(fp)
   21a64:	1085883a 	add	r2,r2,r2
   21a68:	1085883a 	add	r2,r2,r2
   21a6c:	1887883a 	add	r3,r3,r2
   21a70:	d1200017 	ldw	r4,-32768(gp)
   21a74:	e0bfff17 	ldw	r2,-4(fp)
   21a78:	1085883a 	add	r2,r2,r2
   21a7c:	2085883a 	add	r2,r4,r2
   21a80:	1080000b 	ldhu	r2,0(r2)
   21a84:	10bfffcc 	andi	r2,r2,65535
   21a88:	10a0001c 	xori	r2,r2,32768
   21a8c:	10a00004 	addi	r2,r2,-32768
   21a90:	18800015 	stw	r2,0(r3)
    while(1) {
        
//        Print_All();

        // Transmit all data to the register file
        for (int i = 0; i < PLAYER_STATUS_TYPE + TOT_FLOOR_NUMBER * FLOOR_SIZE; i++) {
   21a94:	e0bfff17 	ldw	r2,-4(fp)
   21a98:	10800044 	addi	r2,r2,1
   21a9c:	e0bfff15 	stw	r2,-4(fp)
   21aa0:	e0bfff17 	ldw	r2,-4(fp)
   21aa4:	10807b90 	cmplti	r2,r2,494
   21aa8:	103fec1e 	bne	r2,zero,21a5c <gameover+0xefee75bc>
        }

        // for (int i = PLAYER_STATUS_TYPE; i < PLAYER_STATUS_TYPE + FLOOR_SIZE; i++) {
        //     Player_controller_base[i] = (int) Game_data_mem_base[i + cur_floor * FLOOR_SIZE];
        // }
        UpdateMap();
   21aac:	00207d00 	call	207d0 <UpdateMap>
        Player_controller_base[PLAYER_STATUS_TYPE + FLOOR_SIZE]      = cur_posX;
   21ab0:	d0a0dc17 	ldw	r2,-31888(gp)
   21ab4:	10808304 	addi	r2,r2,524
   21ab8:	d0e0df17 	ldw	r3,-31876(gp)
   21abc:	10c00015 	stw	r3,0(r2)
        Player_controller_base[PLAYER_STATUS_TYPE + FLOOR_SIZE + 1]  = cur_posY;
   21ac0:	d0a0dc17 	ldw	r2,-31888(gp)
   21ac4:	10808404 	addi	r2,r2,528
   21ac8:	d0e0e117 	ldw	r3,-31868(gp)
   21acc:	10c00015 	stw	r3,0(r2)

        // Receive the usb_key
        usb_key = 0x00;
   21ad0:	d020e005 	stb	zero,-31872(gp)
        while ( usb_key != 0x1a && usb_key != 0x04 && usb_key != 0x16 && usb_key != 0x07 ) {
   21ad4:	00001006 	br	21b18 <main+0x17c>
            usb_key = Keycode_mem_base[0];
   21ad8:	d0a00117 	ldw	r2,-32764(gp)
   21adc:	10800003 	ldbu	r2,0(r2)
   21ae0:	d0a0e005 	stb	r2,-31872(gp)
            if (usb_key == 0x14) {
   21ae4:	d0a0e003 	ldbu	r2,-31872(gp)
   21ae8:	10803fcc 	andi	r2,r2,255
   21aec:	10800518 	cmpnei	r2,r2,20
   21af0:	1000021e 	bne	r2,zero,21afc <main+0x160>
                return 0;
   21af4:	0005883a 	mov	r2,zero
   21af8:	00008b06 	br	21d28 <main+0x38c>
            }
            while(usb_key == Keycode_mem_base[0]);
   21afc:	0001883a 	nop
   21b00:	d0a00117 	ldw	r2,-32764(gp)
   21b04:	10c00003 	ldbu	r3,0(r2)
   21b08:	d0a0e003 	ldbu	r2,-31872(gp)
   21b0c:	18c03fcc 	andi	r3,r3,255
   21b10:	10803fcc 	andi	r2,r2,255
   21b14:	18bffa26 	beq	r3,r2,21b00 <gameover+0xefee7660>
        Player_controller_base[PLAYER_STATUS_TYPE + FLOOR_SIZE]      = cur_posX;
        Player_controller_base[PLAYER_STATUS_TYPE + FLOOR_SIZE + 1]  = cur_posY;

        // Receive the usb_key
        usb_key = 0x00;
        while ( usb_key != 0x1a && usb_key != 0x04 && usb_key != 0x16 && usb_key != 0x07 ) {
   21b18:	d0a0e003 	ldbu	r2,-31872(gp)
   21b1c:	10803fcc 	andi	r2,r2,255
   21b20:	108006a0 	cmpeqi	r2,r2,26
   21b24:	10000c1e 	bne	r2,zero,21b58 <main+0x1bc>
   21b28:	d0a0e003 	ldbu	r2,-31872(gp)
   21b2c:	10803fcc 	andi	r2,r2,255
   21b30:	10800120 	cmpeqi	r2,r2,4
   21b34:	1000081e 	bne	r2,zero,21b58 <main+0x1bc>
   21b38:	d0a0e003 	ldbu	r2,-31872(gp)
   21b3c:	10803fcc 	andi	r2,r2,255
   21b40:	108005a0 	cmpeqi	r2,r2,22
   21b44:	1000041e 	bne	r2,zero,21b58 <main+0x1bc>
   21b48:	d0a0e003 	ldbu	r2,-31872(gp)
   21b4c:	10803fcc 	andi	r2,r2,255
   21b50:	108001d8 	cmpnei	r2,r2,7
   21b54:	103fe01e 	bne	r2,zero,21ad8 <gameover+0xefee7638>
                return 0;
            }
            while(usb_key == Keycode_mem_base[0]);
        }

        if (0 == Normal_Walk()) {
   21b58:	00209b40 	call	209b4 <Normal_Walk>
   21b5c:	10007026 	beq	r2,zero,21d20 <main+0x384>
            continue;
        }

        encounter = 0;     // Clear the encounter
   21b60:	d020dd15 	stw	zero,-31884(gp)
        encounter = Judge_the_block();
   21b64:	0020a880 	call	20a88 <Judge_the_block>
   21b68:	d0a0dd15 	stw	r2,-31884(gp)

        switch (encounter) {
   21b6c:	d0a0dd17 	ldw	r2,-31884(gp)
   21b70:	10c004e8 	cmpgeui	r3,r2,19
   21b74:	1800591e 	bne	r3,zero,21cdc <main+0x340>
   21b78:	100690ba 	slli	r3,r2,2
   21b7c:	008000b4 	movhi	r2,2
   21b80:	1086e404 	addi	r2,r2,7056
   21b84:	1885883a 	add	r2,r3,r2
   21b88:	10800017 	ldw	r2,0(r2)
   21b8c:	1000683a 	jmp	r2
   21b90:	00021bdc 	xori	zero,zero,2159
   21b94:	00021ce4 	muli	zero,zero,2163
   21b98:	00021be4 	muli	zero,zero,2159
   21b9c:	00021bf8 	rdprs	zero,zero,2159
   21ba0:	00021c0c 	andi	zero,zero,2160
   21ba4:	00021c20 	cmpeqi	zero,zero,2160
   21ba8:	00021c34 	movhi	zero,2160
   21bac:	00021c48 	cmpgei	zero,zero,2161
   21bb0:	00021c5c 	xori	zero,zero,2161
   21bb4:	00021c70 	cmpltui	zero,zero,2161
   21bb8:	00021c84 	movi	zero,2162
   21bbc:	00021c90 	cmplti	zero,zero,2162
   21bc0:	00021c9c 	xori	zero,zero,2162
   21bc4:	00021ca8 	cmpgeui	zero,zero,2162
   21bc8:	00021cb4 	movhi	zero,2162
   21bcc:	00021cbc 	xorhi	zero,zero,2162
   21bd0:	00021cc4 	movi	zero,2163
   21bd4:	00021ccc 	andi	zero,zero,2163
   21bd8:	00021cd4 	movui	zero,2163
            case MOVE:
                Move();
   21bdc:	0020d840 	call	20d84 <Move>
                break;
   21be0:	00004106 	br	21ce8 <main+0x34c>
            case BLOCK:
                break;
            case PICK_RED_GEM:
                Pick_Items();
   21be4:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(Attack, 2);
   21be8:	01400084 	movi	r5,2
   21bec:	01000084 	movi	r4,2
   21bf0:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21bf4:	00003c06 	br	21ce8 <main+0x34c>
            case PICK_BLUE_GEM:
                Pick_Items();
   21bf8:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(Defense, 2);
   21bfc:	01400084 	movi	r5,2
   21c00:	010000c4 	movi	r4,3
   21c04:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21c08:	00003706 	br	21ce8 <main+0x34c>
            case PICK_YELLOW_KEY:
                Pick_Items();
   21c0c:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(Yellow_Key, 1);
   21c10:	01400044 	movi	r5,1
   21c14:	01000144 	movi	r4,5
   21c18:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21c1c:	00003206 	br	21ce8 <main+0x34c>
            case PICK_BLUE_KEY:
                Pick_Items();
   21c20:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(Blue_Key, 1);
   21c24:	01400044 	movi	r5,1
   21c28:	01000184 	movi	r4,6
   21c2c:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21c30:	00002d06 	br	21ce8 <main+0x34c>
            case PICK_RED_KEY:
                Pick_Items();
   21c34:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(Red_Key, 1);
   21c38:	01400044 	movi	r5,1
   21c3c:	010001c4 	movi	r4,7
   21c40:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21c44:	00002806 	br	21ce8 <main+0x34c>
            case PICK_RED_HEALTH:
                Pick_Items();
   21c48:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(Health, 100);
   21c4c:	01401904 	movi	r5,100
   21c50:	01000044 	movi	r4,1
   21c54:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21c58:	00002306 	br	21ce8 <main+0x34c>
            case PICK_BLUE_HEALTH:
                Pick_Items();
   21c5c:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(Health, 200);
   21c60:	01403204 	movi	r5,200
   21c64:	01000044 	movi	r4,1
   21c68:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21c6c:	00001e06 	br	21ce8 <main+0x34c>
            case PICK_EXP:
                Pick_Items();
   21c70:	0020f440 	call	20f44 <Pick_Items>
                Increase_Attribute(EXP, 5);
   21c74:	01400144 	movi	r5,5
   21c78:	01000104 	movi	r4,4
   21c7c:	0020e780 	call	20e78 <Increase_Attribute>
                break;
   21c80:	00001906 	br	21ce8 <main+0x34c>
            case MEET_YELLOW_DOOR:
                Meet_Door(YELLOW);
   21c84:	0009883a 	mov	r4,zero
   21c88:	00210e00 	call	210e0 <Meet_Door>
                break;
   21c8c:	00001606 	br	21ce8 <main+0x34c>
            case MEET_BLUE_DOOR:
                Meet_Door(BLUE);
   21c90:	01000044 	movi	r4,1
   21c94:	00210e00 	call	210e0 <Meet_Door>
                break;
   21c98:	00001306 	br	21ce8 <main+0x34c>
            case MEET_RED_DOOR:
                Meet_Door(RED);
   21c9c:	01000084 	movi	r4,2
   21ca0:	00210e00 	call	210e0 <Meet_Door>
                break;
   21ca4:	00001006 	br	21ce8 <main+0x34c>
            case MEET_HIDDEN_PATH:
                Meet_Door(HIDDEN);
   21ca8:	010000c4 	movi	r4,3
   21cac:	00210e00 	call	210e0 <Meet_Door>
                break;
   21cb0:	00000d06 	br	21ce8 <main+0x34c>
            case MEET_COIN_STORE:
                Meet_Coin_Store();
   21cb4:	00211940 	call	21194 <Meet_Coin_Store>
                break;
   21cb8:	00000b06 	br	21ce8 <main+0x34c>
            case MEET_EXP_STORE:
                Meet_EXP_Store();
   21cbc:	00211b40 	call	211b4 <Meet_EXP_Store>
                break;
   21cc0:	00000906 	br	21ce8 <main+0x34c>
            case GO_UPSTAIRS:
                Go_Upstairs();
   21cc4:	00211d40 	call	211d4 <Go_Upstairs>
                break;
   21cc8:	00000706 	br	21ce8 <main+0x34c>
            case GO_DOWNSTAIRS:
                Go_DownStairs();
   21ccc:	00212280 	call	21228 <Go_DownStairs>
                break;
   21cd0:	00000506 	br	21ce8 <main+0x34c>
            case BATTLE:
                Battle();
   21cd4:	00215080 	call	21508 <Battle>
                break;
   21cd8:	00000306 	br	21ce8 <main+0x34c>
            default: break;
   21cdc:	0001883a 	nop
   21ce0:	00000106 	br	21ce8 <main+0x34c>
        switch (encounter) {
            case MOVE:
                Move();
                break;
            case BLOCK:
                break;
   21ce4:	0001883a 	nop
                break;
            default: break;
        }

        // The player dies
        if (Game_data_mem_base[Health] <= 0) {
   21ce8:	d0a00017 	ldw	r2,-32768(gp)
   21cec:	10800084 	addi	r2,r2,2
   21cf0:	1080000b 	ldhu	r2,0(r2)
   21cf4:	10bfffcc 	andi	r2,r2,65535
   21cf8:	10a0001c 	xori	r2,r2,32768
   21cfc:	10a00004 	addi	r2,r2,-32768
   21d00:	00bf5416 	blt	zero,r2,21a54 <gameover+0xefee75b4>
            printf("YOU DIE, GAME OVER\n");
   21d04:	010000b4 	movhi	r4,2
   21d08:	21163104 	addi	r4,r4,22724
   21d0c:	00227080 	call	22708 <puts>
            draw_gameover_slow();
   21d10:	00207200 	call	20720 <draw_gameover_slow>
            break;
   21d14:	0001883a 	nop
        }
    }

    return 0;
   21d18:	0005883a 	mov	r2,zero
   21d1c:	00000206 	br	21d28 <main+0x38c>
            }
            while(usb_key == Keycode_mem_base[0]);
        }

        if (0 == Normal_Walk()) {
            continue;
   21d20:	0001883a 	nop
        if (Game_data_mem_base[Health] <= 0) {
            printf("YOU DIE, GAME OVER\n");
            draw_gameover_slow();
            break;
        }
    }
   21d24:	003f4b06 	br	21a54 <gameover+0xefee75b4>

    return 0;
}
   21d28:	e037883a 	mov	sp,fp
   21d2c:	dfc00117 	ldw	ra,4(sp)
   21d30:	df000017 	ldw	fp,0(sp)
   21d34:	dec00204 	addi	sp,sp,8
   21d38:	f800283a 	ret

00021d3c <fb_set>:
#include "vga-helper.h"




void fb_set(int x, int y, int width, int height, const uint8_t* src) {
   21d3c:	defff604 	addi	sp,sp,-40
   21d40:	dfc00915 	stw	ra,36(sp)
   21d44:	df000815 	stw	fp,32(sp)
   21d48:	dc000715 	stw	r16,28(sp)
   21d4c:	df000804 	addi	fp,sp,32
   21d50:	e13ffb15 	stw	r4,-20(fp)
   21d54:	e17ffc15 	stw	r5,-16(fp)
   21d58:	e1bffd15 	stw	r6,-12(fp)
   21d5c:	e1fffe15 	stw	r7,-8(fp)
	int y_max = y + height;
   21d60:	e0fffc17 	ldw	r3,-16(fp)
   21d64:	e0bffe17 	ldw	r2,-8(fp)
   21d68:	1885883a 	add	r2,r3,r2
   21d6c:	e0bff915 	stw	r2,-28(fp)
//	int x_max = x + width;
	for(int dy = y; dy < y_max; dy++) {
   21d70:	e0bffc17 	ldw	r2,-16(fp)
   21d74:	e0bff815 	stw	r2,-32(fp)
   21d78:	00001c06 	br	21dec <fb_set+0xb0>
		uint8_t* vga_ptr = ((uint8_t*) FB_BASE) + dy * FB_WIDTH;
   21d7c:	0140a004 	movi	r5,640
   21d80:	e13ff817 	ldw	r4,-32(fp)
   21d84:	00225b40 	call	225b4 <__mulsi3>
   21d88:	1007883a 	mov	r3,r2
   21d8c:	00801034 	movhi	r2,64
   21d90:	1885883a 	add	r2,r3,r2
   21d94:	e0bffa15 	stw	r2,-24(fp)
//		const uint16_t* src_ptr = src + (dy-y) * width;
//		for(int dx = x; dx < x_max; dx++) {
//			vga_ptr[dx] = src[(dy-y) * width + dx-x];
//		}
		memcpy_dma(vga_ptr + x, src + (dy-y) * width, width * sizeof(uint8_t));
   21d98:	e0bffb17 	ldw	r2,-20(fp)
   21d9c:	e0fffa17 	ldw	r3,-24(fp)
   21da0:	18a1883a 	add	r16,r3,r2
   21da4:	e0fff817 	ldw	r3,-32(fp)
   21da8:	e0bffc17 	ldw	r2,-16(fp)
   21dac:	1885c83a 	sub	r2,r3,r2
   21db0:	e17ffd17 	ldw	r5,-12(fp)
   21db4:	1009883a 	mov	r4,r2
   21db8:	00225b40 	call	225b4 <__mulsi3>
   21dbc:	1007883a 	mov	r3,r2
   21dc0:	e0800217 	ldw	r2,8(fp)
   21dc4:	10c7883a 	add	r3,r2,r3
   21dc8:	e0bffd17 	ldw	r2,-12(fp)
   21dcc:	10bfffcc 	andi	r2,r2,65535
   21dd0:	100d883a 	mov	r6,r2
   21dd4:	180b883a 	mov	r5,r3
   21dd8:	8009883a 	mov	r4,r16
   21ddc:	00202ac0 	call	202ac <memcpy_dma>


void fb_set(int x, int y, int width, int height, const uint8_t* src) {
	int y_max = y + height;
//	int x_max = x + width;
	for(int dy = y; dy < y_max; dy++) {
   21de0:	e0bff817 	ldw	r2,-32(fp)
   21de4:	10800044 	addi	r2,r2,1
   21de8:	e0bff815 	stw	r2,-32(fp)
   21dec:	e0fff817 	ldw	r3,-32(fp)
   21df0:	e0bff917 	ldw	r2,-28(fp)
   21df4:	18bfe116 	blt	r3,r2,21d7c <gameover+0xefee78dc>
//		for(int dx = x; dx < x_max; dx++) {
//			vga_ptr[dx] = src[(dy-y) * width + dx-x];
//		}
		memcpy_dma(vga_ptr + x, src + (dy-y) * width, width * sizeof(uint8_t));
	}
}
   21df8:	0001883a 	nop
   21dfc:	e6ffff04 	addi	sp,fp,-4
   21e00:	dfc00217 	ldw	ra,8(sp)
   21e04:	df000117 	ldw	fp,4(sp)
   21e08:	dc000017 	ldw	r16,0(sp)
   21e0c:	dec00304 	addi	sp,sp,12
   21e10:	f800283a 	ret

00021e14 <utf8_to_code>:
//from https://lantian.pub/en/article/modify-computer/cyclone-iv-fpga-development-bugs-resolve.lantian/
uint16_t utf8_to_code(const uint8_t* c) {
   21e14:	defffe04 	addi	sp,sp,-8
   21e18:	df000115 	stw	fp,4(sp)
   21e1c:	df000104 	addi	fp,sp,4
   21e20:	e13fff15 	stw	r4,-4(fp)
	if(!((*c) & UTF8_MASK)) return *c;
   21e24:	e0bfff17 	ldw	r2,-4(fp)
   21e28:	10800003 	ldbu	r2,0(r2)
   21e2c:	10803fcc 	andi	r2,r2,255
   21e30:	1080201c 	xori	r2,r2,128
   21e34:	10bfe004 	addi	r2,r2,-128
   21e38:	10000416 	blt	r2,zero,21e4c <utf8_to_code+0x38>
   21e3c:	e0bfff17 	ldw	r2,-4(fp)
   21e40:	10800003 	ldbu	r2,0(r2)
   21e44:	10803fcc 	andi	r2,r2,255
   21e48:	00003106 	br	21f10 <utf8_to_code+0xfc>

    if(UTF8_3BYTE_MASK == ((*c) & UTF8_3BYTE_MASK)) {
   21e4c:	e0bfff17 	ldw	r2,-4(fp)
   21e50:	10800003 	ldbu	r2,0(r2)
   21e54:	10803fcc 	andi	r2,r2,255
   21e58:	1080380c 	andi	r2,r2,224
   21e5c:	10803818 	cmpnei	r2,r2,224
   21e60:	1000141e 	bne	r2,zero,21eb4 <utf8_to_code+0xa0>
        // Detected the beginning of a 3 byte UTF-8 code
    	return (((*c) & UTF8_DATA_4BITS) << 12)
   21e64:	e0bfff17 	ldw	r2,-4(fp)
   21e68:	10800003 	ldbu	r2,0(r2)
   21e6c:	10803fcc 	andi	r2,r2,255
   21e70:	1004933a 	slli	r2,r2,12
   21e74:	1007883a 	mov	r3,r2
    			| (((*(c+1)) & UTF8_DATA_6BITS) << 6)
   21e78:	e0bfff17 	ldw	r2,-4(fp)
   21e7c:	10800044 	addi	r2,r2,1
   21e80:	10800003 	ldbu	r2,0(r2)
   21e84:	10803fcc 	andi	r2,r2,255
   21e88:	10800fcc 	andi	r2,r2,63
   21e8c:	100491ba 	slli	r2,r2,6
uint16_t utf8_to_code(const uint8_t* c) {
	if(!((*c) & UTF8_MASK)) return *c;

    if(UTF8_3BYTE_MASK == ((*c) & UTF8_3BYTE_MASK)) {
        // Detected the beginning of a 3 byte UTF-8 code
    	return (((*c) & UTF8_DATA_4BITS) << 12)
   21e90:	1884b03a 	or	r2,r3,r2
   21e94:	1007883a 	mov	r3,r2
    			| (((*(c+1)) & UTF8_DATA_6BITS) << 6)
				| ((*(c+2)) & UTF8_DATA_6BITS);
   21e98:	e0bfff17 	ldw	r2,-4(fp)
   21e9c:	10800084 	addi	r2,r2,2
   21ea0:	10800003 	ldbu	r2,0(r2)
uint16_t utf8_to_code(const uint8_t* c) {
	if(!((*c) & UTF8_MASK)) return *c;

    if(UTF8_3BYTE_MASK == ((*c) & UTF8_3BYTE_MASK)) {
        // Detected the beginning of a 3 byte UTF-8 code
    	return (((*c) & UTF8_DATA_4BITS) << 12)
   21ea4:	10803fcc 	andi	r2,r2,255
   21ea8:	10800fcc 	andi	r2,r2,63
   21eac:	1884b03a 	or	r2,r3,r2
   21eb0:	00001706 	br	21f10 <utf8_to_code+0xfc>
    			| (((*(c+1)) & UTF8_DATA_6BITS) << 6)
				| ((*(c+2)) & UTF8_DATA_6BITS);
    } else if(UTF8_2BYTE_MASK == ((*(c+1)) & UTF8_2BYTE_MASK)) {
   21eb4:	e0bfff17 	ldw	r2,-4(fp)
   21eb8:	10800044 	addi	r2,r2,1
   21ebc:	10800003 	ldbu	r2,0(r2)
   21ec0:	10803fcc 	andi	r2,r2,255
   21ec4:	1080300c 	andi	r2,r2,192
   21ec8:	10803018 	cmpnei	r2,r2,192
   21ecc:	10000d1e 	bne	r2,zero,21f04 <utf8_to_code+0xf0>
        // Detected the beginning of a 2 byte UTF-8 code
    	return (((*c) & UTF8_DATA_5BITS) << 6)
   21ed0:	e0bfff17 	ldw	r2,-4(fp)
   21ed4:	10800003 	ldbu	r2,0(r2)
   21ed8:	10803fcc 	andi	r2,r2,255
   21edc:	108007cc 	andi	r2,r2,31
   21ee0:	100491ba 	slli	r2,r2,6
   21ee4:	1007883a 	mov	r3,r2
    			| ((*(c+1)) & UTF8_DATA_6BITS);
   21ee8:	e0bfff17 	ldw	r2,-4(fp)
   21eec:	10800044 	addi	r2,r2,1
   21ef0:	10800003 	ldbu	r2,0(r2)
    	return (((*c) & UTF8_DATA_4BITS) << 12)
    			| (((*(c+1)) & UTF8_DATA_6BITS) << 6)
				| ((*(c+2)) & UTF8_DATA_6BITS);
    } else if(UTF8_2BYTE_MASK == ((*(c+1)) & UTF8_2BYTE_MASK)) {
        // Detected the beginning of a 2 byte UTF-8 code
    	return (((*c) & UTF8_DATA_5BITS) << 6)
   21ef4:	10803fcc 	andi	r2,r2,255
   21ef8:	10800fcc 	andi	r2,r2,63
   21efc:	1884b03a 	or	r2,r3,r2
   21f00:	00000306 	br	21f10 <utf8_to_code+0xfc>
    			| ((*(c+1)) & UTF8_DATA_6BITS);
    } else {
    	return *c;
   21f04:	e0bfff17 	ldw	r2,-4(fp)
   21f08:	10800003 	ldbu	r2,0(r2)
   21f0c:	10803fcc 	andi	r2,r2,255
    }
}
   21f10:	e037883a 	mov	sp,fp
   21f14:	df000017 	ldw	fp,0(sp)
   21f18:	dec00104 	addi	sp,sp,4
   21f1c:	f800283a 	ret

00021f20 <utf8_len>:

uint16_t utf8_len(const uint8_t* c) {
   21f20:	defffe04 	addi	sp,sp,-8
   21f24:	df000115 	stw	fp,4(sp)
   21f28:	df000104 	addi	fp,sp,4
   21f2c:	e13fff15 	stw	r4,-4(fp)
	if(!((*c) & UTF8_MASK)) return 1;
   21f30:	e0bfff17 	ldw	r2,-4(fp)
   21f34:	10800003 	ldbu	r2,0(r2)
   21f38:	10803fcc 	andi	r2,r2,255
   21f3c:	1080201c 	xori	r2,r2,128
   21f40:	10bfe004 	addi	r2,r2,-128
   21f44:	10000216 	blt	r2,zero,21f50 <utf8_len+0x30>
   21f48:	00800044 	movi	r2,1
   21f4c:	00001206 	br	21f98 <utf8_len+0x78>

    if(UTF8_3BYTE_MASK == ((*c) & UTF8_3BYTE_MASK)) {
   21f50:	e0bfff17 	ldw	r2,-4(fp)
   21f54:	10800003 	ldbu	r2,0(r2)
   21f58:	10803fcc 	andi	r2,r2,255
   21f5c:	1080380c 	andi	r2,r2,224
   21f60:	10803818 	cmpnei	r2,r2,224
   21f64:	1000021e 	bne	r2,zero,21f70 <utf8_len+0x50>
        // Detected the beginning of a 3 byte UTF-8 code
    	return 3;
   21f68:	008000c4 	movi	r2,3
   21f6c:	00000a06 	br	21f98 <utf8_len+0x78>
    } else if(UTF8_2BYTE_MASK == ((*(c+1)) & UTF8_2BYTE_MASK)) {
   21f70:	e0bfff17 	ldw	r2,-4(fp)
   21f74:	10800044 	addi	r2,r2,1
   21f78:	10800003 	ldbu	r2,0(r2)
   21f7c:	10803fcc 	andi	r2,r2,255
   21f80:	1080300c 	andi	r2,r2,192
   21f84:	10803018 	cmpnei	r2,r2,192
   21f88:	1000021e 	bne	r2,zero,21f94 <utf8_len+0x74>
        // Detected the beginning of a 2 byte UTF-8 code
    	return 2;
   21f8c:	00800084 	movi	r2,2
   21f90:	00000106 	br	21f98 <utf8_len+0x78>
    } else {
    	return 1;
   21f94:	00800044 	movi	r2,1
    }
}
   21f98:	e037883a 	mov	sp,fp
   21f9c:	df000017 	ldw	fp,0(sp)
   21fa0:	dec00104 	addi	sp,sp,4
   21fa4:	f800283a 	ret

00021fa8 <fb_char_en>:

void fb_char_en(int x, int y, int scaling, int color, uint8_t ch){
   21fa8:	defff204 	addi	sp,sp,-56
   21fac:	dfc00d15 	stw	ra,52(sp)
   21fb0:	df000c15 	stw	fp,48(sp)
   21fb4:	dc000b15 	stw	r16,44(sp)
   21fb8:	df000c04 	addi	fp,sp,48
   21fbc:	e13ffa15 	stw	r4,-24(fp)
   21fc0:	e17ffb15 	stw	r5,-20(fp)
   21fc4:	e1bffc15 	stw	r6,-16(fp)
   21fc8:	e1fffd15 	stw	r7,-12(fp)
   21fcc:	e0800217 	ldw	r2,8(fp)
   21fd0:	e0bffe05 	stb	r2,-8(fp)
    volatile uint8_t* relPos;
    uint8_t  font_data;
    for (int dy = 0; dy < 16; dy++){
   21fd4:	e03ff415 	stw	zero,-48(fp)
   21fd8:	00004b06 	br	22108 <fb_char_en+0x160>
        font_data = font_data_en[ch][dy];
   21fdc:	e0fffe03 	ldbu	r3,-8(fp)
   21fe0:	00840534 	movhi	r2,4116
   21fe4:	10a52804 	addi	r2,r2,-27488
   21fe8:	1806913a 	slli	r3,r3,4
   21fec:	10c7883a 	add	r3,r2,r3
   21ff0:	e0bff417 	ldw	r2,-48(fp)
   21ff4:	1885883a 	add	r2,r3,r2
   21ff8:	10800003 	ldbu	r2,0(r2)
   21ffc:	e0bff805 	stb	r2,-32(fp)
        for (int dx = 0; dx < 8; dx++){
   22000:	e03ff515 	stw	zero,-44(fp)
   22004:	00003a06 	br	220f0 <fb_char_en+0x148>
            for (int j = 0; j < scaling; j++){
   22008:	e03ff615 	stw	zero,-40(fp)
   2200c:	00003206 	br	220d8 <fb_char_en+0x130>
                for (int i = 0; i < scaling; i++){
   22010:	e03ff715 	stw	zero,-36(fp)
   22014:	00002a06 	br	220c0 <fb_char_en+0x118>
                    relPos = FB_BASE + (y + dy * scaling + j) * FB_WIDTH + x + dx * scaling + i;
   22018:	e17ffc17 	ldw	r5,-16(fp)
   2201c:	e13ff417 	ldw	r4,-48(fp)
   22020:	00225b40 	call	225b4 <__mulsi3>
   22024:	1007883a 	mov	r3,r2
   22028:	e0bffb17 	ldw	r2,-20(fp)
   2202c:	1887883a 	add	r3,r3,r2
   22030:	e0bff617 	ldw	r2,-40(fp)
   22034:	1885883a 	add	r2,r3,r2
   22038:	0140a004 	movi	r5,640
   2203c:	1009883a 	mov	r4,r2
   22040:	00225b40 	call	225b4 <__mulsi3>
   22044:	1021883a 	mov	r16,r2
   22048:	e17ffc17 	ldw	r5,-16(fp)
   2204c:	e13ff517 	ldw	r4,-44(fp)
   22050:	00225b40 	call	225b4 <__mulsi3>
   22054:	8087883a 	add	r3,r16,r2
   22058:	e0bffa17 	ldw	r2,-24(fp)
   2205c:	1887883a 	add	r3,r3,r2
   22060:	e0bff717 	ldw	r2,-36(fp)
   22064:	1887883a 	add	r3,r3,r2
   22068:	00801034 	movhi	r2,64
   2206c:	1885883a 	add	r2,r3,r2
   22070:	e0bff915 	stw	r2,-28(fp)
                    if (font_data & (1 << (7 - dx))) {
   22074:	e0fff803 	ldbu	r3,-32(fp)
   22078:	010001c4 	movi	r4,7
   2207c:	e0bff517 	ldw	r2,-44(fp)
   22080:	2085c83a 	sub	r2,r4,r2
   22084:	1885d83a 	sra	r2,r3,r2
   22088:	1080004c 	andi	r2,r2,1
   2208c:	10000926 	beq	r2,zero,220b4 <fb_char_en+0x10c>
                        if (color == 0)  // black
   22090:	e0bffd17 	ldw	r2,-12(fp)
   22094:	1000041e 	bne	r2,zero,220a8 <fb_char_en+0x100>
                            *relPos = 5;
   22098:	e0bff917 	ldw	r2,-28(fp)
   2209c:	00c00144 	movi	r3,5
   220a0:	10c00005 	stb	r3,0(r2)
   220a4:	00000306 	br	220b4 <fb_char_en+0x10c>
                        else            // white 
                            *relPos = 15;
   220a8:	e0bff917 	ldw	r2,-28(fp)
   220ac:	00c003c4 	movi	r3,15
   220b0:	10c00005 	stb	r3,0(r2)
    uint8_t  font_data;
    for (int dy = 0; dy < 16; dy++){
        font_data = font_data_en[ch][dy];
        for (int dx = 0; dx < 8; dx++){
            for (int j = 0; j < scaling; j++){
                for (int i = 0; i < scaling; i++){
   220b4:	e0bff717 	ldw	r2,-36(fp)
   220b8:	10800044 	addi	r2,r2,1
   220bc:	e0bff715 	stw	r2,-36(fp)
   220c0:	e0fff717 	ldw	r3,-36(fp)
   220c4:	e0bffc17 	ldw	r2,-16(fp)
   220c8:	18bfd316 	blt	r3,r2,22018 <gameover+0xefee7b78>
    volatile uint8_t* relPos;
    uint8_t  font_data;
    for (int dy = 0; dy < 16; dy++){
        font_data = font_data_en[ch][dy];
        for (int dx = 0; dx < 8; dx++){
            for (int j = 0; j < scaling; j++){
   220cc:	e0bff617 	ldw	r2,-40(fp)
   220d0:	10800044 	addi	r2,r2,1
   220d4:	e0bff615 	stw	r2,-40(fp)
   220d8:	e0fff617 	ldw	r3,-40(fp)
   220dc:	e0bffc17 	ldw	r2,-16(fp)
   220e0:	18bfcb16 	blt	r3,r2,22010 <gameover+0xefee7b70>
void fb_char_en(int x, int y, int scaling, int color, uint8_t ch){
    volatile uint8_t* relPos;
    uint8_t  font_data;
    for (int dy = 0; dy < 16; dy++){
        font_data = font_data_en[ch][dy];
        for (int dx = 0; dx < 8; dx++){
   220e4:	e0bff517 	ldw	r2,-44(fp)
   220e8:	10800044 	addi	r2,r2,1
   220ec:	e0bff515 	stw	r2,-44(fp)
   220f0:	e0bff517 	ldw	r2,-44(fp)
   220f4:	10800210 	cmplti	r2,r2,8
   220f8:	103fc31e 	bne	r2,zero,22008 <gameover+0xefee7b68>
}

void fb_char_en(int x, int y, int scaling, int color, uint8_t ch){
    volatile uint8_t* relPos;
    uint8_t  font_data;
    for (int dy = 0; dy < 16; dy++){
   220fc:	e0bff417 	ldw	r2,-48(fp)
   22100:	10800044 	addi	r2,r2,1
   22104:	e0bff415 	stw	r2,-48(fp)
   22108:	e0bff417 	ldw	r2,-48(fp)
   2210c:	10800410 	cmplti	r2,r2,16
   22110:	103fb21e 	bne	r2,zero,21fdc <gameover+0xefee7b3c>
                    }
                }
            }
        }
    }
}
   22114:	0001883a 	nop
   22118:	e6ffff04 	addi	sp,fp,-4
   2211c:	dfc00217 	ldw	ra,8(sp)
   22120:	df000117 	ldw	fp,4(sp)
   22124:	dc000017 	ldw	r16,0(sp)
   22128:	dec00304 	addi	sp,sp,12
   2212c:	f800283a 	ret

00022130 <fb_char_zh>:

void fb_char_zh(int x, int y, int scaling, int color, uint8_t* ch){
   22130:	defff104 	addi	sp,sp,-60
   22134:	dfc00e15 	stw	ra,56(sp)
   22138:	df000d15 	stw	fp,52(sp)
   2213c:	dc000c15 	stw	r16,48(sp)
   22140:	df000d04 	addi	fp,sp,52
   22144:	e13ffb15 	stw	r4,-20(fp)
   22148:	e17ffc15 	stw	r5,-16(fp)
   2214c:	e1bffd15 	stw	r6,-12(fp)
   22150:	e1fffe15 	stw	r7,-8(fp)
    volatile uint8_t* relPos;
    uint16_t  font_data;
    int idx;

    uint16_t code = utf8_to_code(ch);
   22154:	e1000217 	ldw	r4,8(fp)
   22158:	0021e140 	call	21e14 <utf8_to_code>
   2215c:	e0bff70d 	sth	r2,-36(fp)
    
	if(code >= CHINESE_ENCODE_START && code <= CHINESE_ENCODE_END) {
   22160:	e0bff70b 	ldhu	r2,-36(fp)
   22164:	10938030 	cmpltui	r2,r2,19968
   22168:	1000621e 	bne	r2,zero,222f4 <fb_char_zh+0x1c4>
   2216c:	e0bff70b 	ldhu	r2,-36(fp)
   22170:	10a7e9a8 	cmpgeui	r2,r2,40870
   22174:	10005f1e 	bne	r2,zero,222f4 <fb_char_zh+0x1c4>
		for(int dy = 0; dy < 16; dy++) {
   22178:	e03ff315 	stw	zero,-52(fp)
   2217c:	00005a06 	br	222e8 <fb_char_zh+0x1b8>
			idx = ((code - CHINESE_ENCODE_START) * 16 + dy) * 2;
   22180:	e0bff70b 	ldhu	r2,-36(fp)
   22184:	10ac8004 	addi	r2,r2,-19968
   22188:	1006913a 	slli	r3,r2,4
   2218c:	e0bff317 	ldw	r2,-52(fp)
   22190:	1885883a 	add	r2,r3,r2
   22194:	1085883a 	add	r2,r2,r2
   22198:	e0bff815 	stw	r2,-32(fp)
			font_data = (((uint16_t) font_data_zh[idx]) << 8) | font_data_zh[idx+1];
   2219c:	00840034 	movhi	r2,4096
   221a0:	10800004 	addi	r2,r2,0
   221a4:	e0fff817 	ldw	r3,-32(fp)
   221a8:	10c5883a 	add	r2,r2,r3
   221ac:	10800003 	ldbu	r2,0(r2)
   221b0:	10803fcc 	andi	r2,r2,255
   221b4:	1004923a 	slli	r2,r2,8
   221b8:	1009883a 	mov	r4,r2
   221bc:	e0bff817 	ldw	r2,-32(fp)
   221c0:	10c00044 	addi	r3,r2,1
   221c4:	00840034 	movhi	r2,4096
   221c8:	10800004 	addi	r2,r2,0
   221cc:	10c5883a 	add	r2,r2,r3
   221d0:	10800003 	ldbu	r2,0(r2)
   221d4:	10803fcc 	andi	r2,r2,255
   221d8:	2084b03a 	or	r2,r4,r2
   221dc:	e0bff90d 	sth	r2,-28(fp)
			for(int dx = 0; dx < 16; dx++) {
   221e0:	e03ff415 	stw	zero,-48(fp)
   221e4:	00003a06 	br	222d0 <fb_char_zh+0x1a0>
                for (int j = 0; j < scaling; j++){
   221e8:	e03ff515 	stw	zero,-44(fp)
   221ec:	00003206 	br	222b8 <fb_char_zh+0x188>
                    for (int i = 0; i < scaling; i++){
   221f0:	e03ff615 	stw	zero,-40(fp)
   221f4:	00002a06 	br	222a0 <fb_char_zh+0x170>
                        relPos = (FB_BASE) + (y + dy * scaling + j) * FB_WIDTH + x + dx * scaling + i;
   221f8:	e17ffd17 	ldw	r5,-12(fp)
   221fc:	e13ff317 	ldw	r4,-52(fp)
   22200:	00225b40 	call	225b4 <__mulsi3>
   22204:	1007883a 	mov	r3,r2
   22208:	e0bffc17 	ldw	r2,-16(fp)
   2220c:	1887883a 	add	r3,r3,r2
   22210:	e0bff517 	ldw	r2,-44(fp)
   22214:	1885883a 	add	r2,r3,r2
   22218:	0140a004 	movi	r5,640
   2221c:	1009883a 	mov	r4,r2
   22220:	00225b40 	call	225b4 <__mulsi3>
   22224:	1021883a 	mov	r16,r2
   22228:	e17ffd17 	ldw	r5,-12(fp)
   2222c:	e13ff417 	ldw	r4,-48(fp)
   22230:	00225b40 	call	225b4 <__mulsi3>
   22234:	8087883a 	add	r3,r16,r2
   22238:	e0bffb17 	ldw	r2,-20(fp)
   2223c:	1887883a 	add	r3,r3,r2
   22240:	e0bff617 	ldw	r2,-40(fp)
   22244:	1887883a 	add	r3,r3,r2
   22248:	00801034 	movhi	r2,64
   2224c:	1885883a 	add	r2,r3,r2
   22250:	e0bffa15 	stw	r2,-24(fp)
                        if(font_data & (1 << (15 - dx))) {
   22254:	e0fff90b 	ldhu	r3,-28(fp)
   22258:	010003c4 	movi	r4,15
   2225c:	e0bff417 	ldw	r2,-48(fp)
   22260:	2085c83a 	sub	r2,r4,r2
   22264:	1885d83a 	sra	r2,r3,r2
   22268:	1080004c 	andi	r2,r2,1
   2226c:	10000926 	beq	r2,zero,22294 <fb_char_zh+0x164>
                            if (color == 0)  // black
   22270:	e0bffe17 	ldw	r2,-8(fp)
   22274:	1000041e 	bne	r2,zero,22288 <fb_char_zh+0x158>
                                *relPos = 5;
   22278:	e0bffa17 	ldw	r2,-24(fp)
   2227c:	00c00144 	movi	r3,5
   22280:	10c00005 	stb	r3,0(r2)
   22284:	00000306 	br	22294 <fb_char_zh+0x164>
                            else            // white 
                                *relPos = 15;
   22288:	e0bffa17 	ldw	r2,-24(fp)
   2228c:	00c003c4 	movi	r3,15
   22290:	10c00005 	stb	r3,0(r2)
		for(int dy = 0; dy < 16; dy++) {
			idx = ((code - CHINESE_ENCODE_START) * 16 + dy) * 2;
			font_data = (((uint16_t) font_data_zh[idx]) << 8) | font_data_zh[idx+1];
			for(int dx = 0; dx < 16; dx++) {
                for (int j = 0; j < scaling; j++){
                    for (int i = 0; i < scaling; i++){
   22294:	e0bff617 	ldw	r2,-40(fp)
   22298:	10800044 	addi	r2,r2,1
   2229c:	e0bff615 	stw	r2,-40(fp)
   222a0:	e0fff617 	ldw	r3,-40(fp)
   222a4:	e0bffd17 	ldw	r2,-12(fp)
   222a8:	18bfd316 	blt	r3,r2,221f8 <gameover+0xefee7d58>
	if(code >= CHINESE_ENCODE_START && code <= CHINESE_ENCODE_END) {
		for(int dy = 0; dy < 16; dy++) {
			idx = ((code - CHINESE_ENCODE_START) * 16 + dy) * 2;
			font_data = (((uint16_t) font_data_zh[idx]) << 8) | font_data_zh[idx+1];
			for(int dx = 0; dx < 16; dx++) {
                for (int j = 0; j < scaling; j++){
   222ac:	e0bff517 	ldw	r2,-44(fp)
   222b0:	10800044 	addi	r2,r2,1
   222b4:	e0bff515 	stw	r2,-44(fp)
   222b8:	e0fff517 	ldw	r3,-44(fp)
   222bc:	e0bffd17 	ldw	r2,-12(fp)
   222c0:	18bfcb16 	blt	r3,r2,221f0 <gameover+0xefee7d50>
    
	if(code >= CHINESE_ENCODE_START && code <= CHINESE_ENCODE_END) {
		for(int dy = 0; dy < 16; dy++) {
			idx = ((code - CHINESE_ENCODE_START) * 16 + dy) * 2;
			font_data = (((uint16_t) font_data_zh[idx]) << 8) | font_data_zh[idx+1];
			for(int dx = 0; dx < 16; dx++) {
   222c4:	e0bff417 	ldw	r2,-48(fp)
   222c8:	10800044 	addi	r2,r2,1
   222cc:	e0bff415 	stw	r2,-48(fp)
   222d0:	e0bff417 	ldw	r2,-48(fp)
   222d4:	10800410 	cmplti	r2,r2,16
   222d8:	103fc31e 	bne	r2,zero,221e8 <gameover+0xefee7d48>
    int idx;

    uint16_t code = utf8_to_code(ch);
    
	if(code >= CHINESE_ENCODE_START && code <= CHINESE_ENCODE_END) {
		for(int dy = 0; dy < 16; dy++) {
   222dc:	e0bff317 	ldw	r2,-52(fp)
   222e0:	10800044 	addi	r2,r2,1
   222e4:	e0bff315 	stw	r2,-52(fp)
   222e8:	e0bff317 	ldw	r2,-52(fp)
   222ec:	10800410 	cmplti	r2,r2,16
   222f0:	103fa31e 	bne	r2,zero,22180 <gameover+0xefee7ce0>
                    }
                }
            }
        }
    }
}
   222f4:	0001883a 	nop
   222f8:	e6ffff04 	addi	sp,fp,-4
   222fc:	dfc00217 	ldw	ra,8(sp)
   22300:	df000117 	ldw	fp,4(sp)
   22304:	dc000017 	ldw	r16,0(sp)
   22308:	dec00304 	addi	sp,sp,12
   2230c:	f800283a 	ret

00022310 <fb_string>:
void fb_string (int x, int y, int scaling, int color, int linebreak, const uint8_t* string){
   22310:	defff404 	addi	sp,sp,-48
   22314:	dfc00b15 	stw	ra,44(sp)
   22318:	df000a15 	stw	fp,40(sp)
   2231c:	dc000915 	stw	r16,36(sp)
   22320:	df000a04 	addi	fp,sp,40
   22324:	e13ffb15 	stw	r4,-20(fp)
   22328:	e17ffc15 	stw	r5,-16(fp)
   2232c:	e1bffd15 	stw	r6,-12(fp)
   22330:	e1fffe15 	stw	r7,-8(fp)
    const uint8_t* ptr = string;
   22334:	e0800317 	ldw	r2,12(fp)
   22338:	e0bff715 	stw	r2,-36(fp)
	int pos_x = 0, pos_y = 0;
   2233c:	e03ff815 	stw	zero,-32(fp)
   22340:	e03ff915 	stw	zero,-28(fp)
	while(*ptr) {
   22344:	00006c06 	br	224f8 <fb_string+0x1e8>
		if(*ptr == '\n') {
   22348:	e0bff717 	ldw	r2,-36(fp)
   2234c:	10800003 	ldbu	r2,0(r2)
   22350:	10803fcc 	andi	r2,r2,255
   22354:	10800298 	cmpnei	r2,r2,10
   22358:	1000081e 	bne	r2,zero,2237c <fb_string+0x6c>
			pos_y++;
   2235c:	e0bff917 	ldw	r2,-28(fp)
   22360:	10800044 	addi	r2,r2,1
   22364:	e0bff915 	stw	r2,-28(fp)
			pos_x = 0;
   22368:	e03ff815 	stw	zero,-32(fp)
			ptr += 1;
   2236c:	e0bff717 	ldw	r2,-36(fp)
   22370:	10800044 	addi	r2,r2,1
   22374:	e0bff715 	stw	r2,-36(fp)
			continue;
   22378:	00005f06 	br	224f8 <fb_string+0x1e8>
        }
		uint16_t len = utf8_len(ptr);
   2237c:	e13ff717 	ldw	r4,-36(fp)
   22380:	0021f200 	call	21f20 <utf8_len>
   22384:	e0bffa0d 	sth	r2,-24(fp)
		if(len > 1) {       // chinese
   22388:	e0bffa0b 	ldhu	r2,-24(fp)
   2238c:	108000b0 	cmpltui	r2,r2,2
   22390:	10002a1e 	bne	r2,zero,2243c <fb_string+0x12c>
			if(x + (pos_x * 8 + 16) * scaling >= linebreak) {      // can set linebreak = FB_WIDTH
   22394:	e0bff817 	ldw	r2,-32(fp)
   22398:	10800084 	addi	r2,r2,2
   2239c:	100490fa 	slli	r2,r2,3
   223a0:	e17ffd17 	ldw	r5,-12(fp)
   223a4:	1009883a 	mov	r4,r2
   223a8:	00225b40 	call	225b4 <__mulsi3>
   223ac:	1007883a 	mov	r3,r2
   223b0:	e0bffb17 	ldw	r2,-20(fp)
   223b4:	1887883a 	add	r3,r3,r2
   223b8:	e0800217 	ldw	r2,8(fp)
   223bc:	18800416 	blt	r3,r2,223d0 <fb_string+0xc0>
				pos_y++;
   223c0:	e0bff917 	ldw	r2,-28(fp)
   223c4:	10800044 	addi	r2,r2,1
   223c8:	e0bff915 	stw	r2,-28(fp)
				pos_x = 0;
   223cc:	e03ff815 	stw	zero,-32(fp)
			}
			fb_char_zh(x + pos_x * 8 * scaling, y + pos_y * 16 * scaling, scaling, color, ptr);
   223d0:	e0bff817 	ldw	r2,-32(fp)
   223d4:	100490fa 	slli	r2,r2,3
   223d8:	e17ffd17 	ldw	r5,-12(fp)
   223dc:	1009883a 	mov	r4,r2
   223e0:	00225b40 	call	225b4 <__mulsi3>
   223e4:	1007883a 	mov	r3,r2
   223e8:	e0bffb17 	ldw	r2,-20(fp)
   223ec:	18a1883a 	add	r16,r3,r2
   223f0:	e0bff917 	ldw	r2,-28(fp)
   223f4:	1004913a 	slli	r2,r2,4
   223f8:	e17ffd17 	ldw	r5,-12(fp)
   223fc:	1009883a 	mov	r4,r2
   22400:	00225b40 	call	225b4 <__mulsi3>
   22404:	1007883a 	mov	r3,r2
   22408:	e0bffc17 	ldw	r2,-16(fp)
   2240c:	1887883a 	add	r3,r3,r2
   22410:	e0bff717 	ldw	r2,-36(fp)
   22414:	d8800015 	stw	r2,0(sp)
   22418:	e1fffe17 	ldw	r7,-8(fp)
   2241c:	e1bffd17 	ldw	r6,-12(fp)
   22420:	180b883a 	mov	r5,r3
   22424:	8009883a 	mov	r4,r16
   22428:	00221300 	call	22130 <fb_char_zh>
			pos_x += 2;
   2242c:	e0bff817 	ldw	r2,-32(fp)
   22430:	10800084 	addi	r2,r2,2
   22434:	e0bff815 	stw	r2,-32(fp)
   22438:	00002b06 	br	224e8 <fb_string+0x1d8>
		} else {            // english
			if(x + (pos_x * 8 + 8) * scaling >= linebreak) {
   2243c:	e0bff817 	ldw	r2,-32(fp)
   22440:	10800044 	addi	r2,r2,1
   22444:	100490fa 	slli	r2,r2,3
   22448:	e17ffd17 	ldw	r5,-12(fp)
   2244c:	1009883a 	mov	r4,r2
   22450:	00225b40 	call	225b4 <__mulsi3>
   22454:	1007883a 	mov	r3,r2
   22458:	e0bffb17 	ldw	r2,-20(fp)
   2245c:	1887883a 	add	r3,r3,r2
   22460:	e0800217 	ldw	r2,8(fp)
   22464:	18800416 	blt	r3,r2,22478 <fb_string+0x168>
				pos_y++;
   22468:	e0bff917 	ldw	r2,-28(fp)
   2246c:	10800044 	addi	r2,r2,1
   22470:	e0bff915 	stw	r2,-28(fp)
				pos_x = 0;
   22474:	e03ff815 	stw	zero,-32(fp)
			}
			fb_char_en(x + pos_x * 8 * scaling, y + pos_y * 16 * scaling, scaling, color, *ptr);
   22478:	e0bff817 	ldw	r2,-32(fp)
   2247c:	100490fa 	slli	r2,r2,3
   22480:	e17ffd17 	ldw	r5,-12(fp)
   22484:	1009883a 	mov	r4,r2
   22488:	00225b40 	call	225b4 <__mulsi3>
   2248c:	1007883a 	mov	r3,r2
   22490:	e0bffb17 	ldw	r2,-20(fp)
   22494:	18a1883a 	add	r16,r3,r2
   22498:	e0bff917 	ldw	r2,-28(fp)
   2249c:	1004913a 	slli	r2,r2,4
   224a0:	e17ffd17 	ldw	r5,-12(fp)
   224a4:	1009883a 	mov	r4,r2
   224a8:	00225b40 	call	225b4 <__mulsi3>
   224ac:	1007883a 	mov	r3,r2
   224b0:	e0bffc17 	ldw	r2,-16(fp)
   224b4:	1887883a 	add	r3,r3,r2
   224b8:	e0bff717 	ldw	r2,-36(fp)
   224bc:	10800003 	ldbu	r2,0(r2)
   224c0:	10803fcc 	andi	r2,r2,255
   224c4:	d8800015 	stw	r2,0(sp)
   224c8:	e1fffe17 	ldw	r7,-8(fp)
   224cc:	e1bffd17 	ldw	r6,-12(fp)
   224d0:	180b883a 	mov	r5,r3
   224d4:	8009883a 	mov	r4,r16
   224d8:	0021fa80 	call	21fa8 <fb_char_en>
			pos_x += 1;
   224dc:	e0bff817 	ldw	r2,-32(fp)
   224e0:	10800044 	addi	r2,r2,1
   224e4:	e0bff815 	stw	r2,-32(fp)
		}
		ptr += len;
   224e8:	e0bffa0b 	ldhu	r2,-24(fp)
   224ec:	e0fff717 	ldw	r3,-36(fp)
   224f0:	1885883a 	add	r2,r3,r2
   224f4:	e0bff715 	stw	r2,-36(fp)
    }
}
void fb_string (int x, int y, int scaling, int color, int linebreak, const uint8_t* string){
    const uint8_t* ptr = string;
	int pos_x = 0, pos_y = 0;
	while(*ptr) {
   224f8:	e0bff717 	ldw	r2,-36(fp)
   224fc:	10800003 	ldbu	r2,0(r2)
   22500:	10803fcc 	andi	r2,r2,255
   22504:	103f901e 	bne	r2,zero,22348 <gameover+0xefee7ea8>
			fb_char_en(x + pos_x * 8 * scaling, y + pos_y * 16 * scaling, scaling, color, *ptr);
			pos_x += 1;
		}
		ptr += len;
	}
}
   22508:	0001883a 	nop
   2250c:	e6ffff04 	addi	sp,fp,-4
   22510:	dfc00217 	ldw	ra,8(sp)
   22514:	df000117 	ldw	fp,4(sp)
   22518:	dc000017 	ldw	r16,0(sp)
   2251c:	dec00304 	addi	sp,sp,12
   22520:	f800283a 	ret

00022524 <fb_test>:

void fb_test() {
   22524:	defffc04 	addi	sp,sp,-16
   22528:	dfc00315 	stw	ra,12(sp)
   2252c:	df000215 	stw	fp,8(sp)
   22530:	df000204 	addi	fp,sp,8
	for (int y = 0; y <= 479; y++) {
   22534:	e03ffe15 	stw	zero,-8(fp)
   22538:	00001506 	br	22590 <fb_test+0x6c>
		for (int x = 0; x <= 639; x++) {
   2253c:	e03fff15 	stw	zero,-4(fp)
   22540:	00000d06 	br	22578 <fb_test+0x54>
			FB_BASE[y * 640 + x] = 0; // transparent
   22544:	0140a004 	movi	r5,640
   22548:	e13ffe17 	ldw	r4,-8(fp)
   2254c:	00225b40 	call	225b4 <__mulsi3>
   22550:	1007883a 	mov	r3,r2
   22554:	e0bfff17 	ldw	r2,-4(fp)
   22558:	1885883a 	add	r2,r3,r2
   2255c:	1007883a 	mov	r3,r2
   22560:	00801034 	movhi	r2,64
   22564:	1885883a 	add	r2,r3,r2
   22568:	10000005 	stb	zero,0(r2)
	}
}

void fb_test() {
	for (int y = 0; y <= 479; y++) {
		for (int x = 0; x <= 639; x++) {
   2256c:	e0bfff17 	ldw	r2,-4(fp)
   22570:	10800044 	addi	r2,r2,1
   22574:	e0bfff15 	stw	r2,-4(fp)
   22578:	e0bfff17 	ldw	r2,-4(fp)
   2257c:	1080a010 	cmplti	r2,r2,640
   22580:	103ff01e 	bne	r2,zero,22544 <gameover+0xefee80a4>
		ptr += len;
	}
}

void fb_test() {
	for (int y = 0; y <= 479; y++) {
   22584:	e0bffe17 	ldw	r2,-8(fp)
   22588:	10800044 	addi	r2,r2,1
   2258c:	e0bffe15 	stw	r2,-8(fp)
   22590:	e0bffe17 	ldw	r2,-8(fp)
   22594:	10807810 	cmplti	r2,r2,480
   22598:	103fe81e 	bne	r2,zero,2253c <gameover+0xefee809c>
		for (int x = 0; x <= 639; x++) {
			FB_BASE[y * 640 + x] = 0; // transparent
		}
	}
   2259c:	0001883a 	nop
   225a0:	e037883a 	mov	sp,fp
   225a4:	dfc00117 	ldw	ra,4(sp)
   225a8:	df000017 	ldw	fp,0(sp)
   225ac:	dec00204 	addi	sp,sp,8
   225b0:	f800283a 	ret

000225b4 <__mulsi3>:
   225b4:	0005883a 	mov	r2,zero
   225b8:	20000726 	beq	r4,zero,225d8 <__mulsi3+0x24>
   225bc:	20c0004c 	andi	r3,r4,1
   225c0:	2008d07a 	srli	r4,r4,1
   225c4:	18000126 	beq	r3,zero,225cc <__mulsi3+0x18>
   225c8:	1145883a 	add	r2,r2,r5
   225cc:	294b883a 	add	r5,r5,r5
   225d0:	203ffa1e 	bne	r4,zero,225bc <gameover+0xefee811c>
   225d4:	f800283a 	ret
   225d8:	f800283a 	ret

000225dc <_printf_r>:
   225dc:	defffd04 	addi	sp,sp,-12
   225e0:	dfc00015 	stw	ra,0(sp)
   225e4:	d9800115 	stw	r6,4(sp)
   225e8:	d9c00215 	stw	r7,8(sp)
   225ec:	20c00217 	ldw	r3,8(r4)
   225f0:	018000b4 	movhi	r6,2
   225f4:	318b3b04 	addi	r6,r6,11500
   225f8:	19800115 	stw	r6,4(r3)
   225fc:	280d883a 	mov	r6,r5
   22600:	21400217 	ldw	r5,8(r4)
   22604:	d9c00104 	addi	r7,sp,4
   22608:	00227a40 	call	227a4 <___vfprintf_internal_r>
   2260c:	dfc00017 	ldw	ra,0(sp)
   22610:	dec00304 	addi	sp,sp,12
   22614:	f800283a 	ret

00022618 <printf>:
   22618:	defffc04 	addi	sp,sp,-16
   2261c:	dfc00015 	stw	ra,0(sp)
   22620:	d9400115 	stw	r5,4(sp)
   22624:	d9800215 	stw	r6,8(sp)
   22628:	d9c00315 	stw	r7,12(sp)
   2262c:	008000b4 	movhi	r2,2
   22630:	10970c04 	addi	r2,r2,23600
   22634:	10800017 	ldw	r2,0(r2)
   22638:	014000b4 	movhi	r5,2
   2263c:	294b3b04 	addi	r5,r5,11500
   22640:	10c00217 	ldw	r3,8(r2)
   22644:	d9800104 	addi	r6,sp,4
   22648:	19400115 	stw	r5,4(r3)
   2264c:	200b883a 	mov	r5,r4
   22650:	11000217 	ldw	r4,8(r2)
   22654:	0022cd00 	call	22cd0 <__vfprintf_internal>
   22658:	dfc00017 	ldw	ra,0(sp)
   2265c:	dec00404 	addi	sp,sp,16
   22660:	f800283a 	ret

00022664 <_putchar_r>:
   22664:	21800217 	ldw	r6,8(r4)
   22668:	0022df81 	jmpi	22df8 <_putc_r>

0002266c <putchar>:
   2266c:	008000b4 	movhi	r2,2
   22670:	10970c04 	addi	r2,r2,23600
   22674:	10800017 	ldw	r2,0(r2)
   22678:	200b883a 	mov	r5,r4
   2267c:	11800217 	ldw	r6,8(r2)
   22680:	1009883a 	mov	r4,r2
   22684:	0022df81 	jmpi	22df8 <_putc_r>

00022688 <_puts_r>:
   22688:	defffd04 	addi	sp,sp,-12
   2268c:	dc000015 	stw	r16,0(sp)
   22690:	2021883a 	mov	r16,r4
   22694:	2809883a 	mov	r4,r5
   22698:	dfc00215 	stw	ra,8(sp)
   2269c:	dc400115 	stw	r17,4(sp)
   226a0:	2823883a 	mov	r17,r5
   226a4:	002271c0 	call	2271c <strlen>
   226a8:	81400217 	ldw	r5,8(r16)
   226ac:	010000b4 	movhi	r4,2
   226b0:	210b3b04 	addi	r4,r4,11500
   226b4:	29000115 	stw	r4,4(r5)
   226b8:	100f883a 	mov	r7,r2
   226bc:	880d883a 	mov	r6,r17
   226c0:	8009883a 	mov	r4,r16
   226c4:	0022cec0 	call	22cec <__sfvwrite_small_dev>
   226c8:	00ffffc4 	movi	r3,-1
   226cc:	10c00926 	beq	r2,r3,226f4 <_puts_r+0x6c>
   226d0:	81400217 	ldw	r5,8(r16)
   226d4:	018000b4 	movhi	r6,2
   226d8:	01c00044 	movi	r7,1
   226dc:	28800117 	ldw	r2,4(r5)
   226e0:	31963604 	addi	r6,r6,22744
   226e4:	8009883a 	mov	r4,r16
   226e8:	103ee83a 	callr	r2
   226ec:	10bfffe0 	cmpeqi	r2,r2,-1
   226f0:	0085c83a 	sub	r2,zero,r2
   226f4:	dfc00217 	ldw	ra,8(sp)
   226f8:	dc400117 	ldw	r17,4(sp)
   226fc:	dc000017 	ldw	r16,0(sp)
   22700:	dec00304 	addi	sp,sp,12
   22704:	f800283a 	ret

00022708 <puts>:
   22708:	008000b4 	movhi	r2,2
   2270c:	10970c04 	addi	r2,r2,23600
   22710:	200b883a 	mov	r5,r4
   22714:	11000017 	ldw	r4,0(r2)
   22718:	00226881 	jmpi	22688 <_puts_r>

0002271c <strlen>:
   2271c:	2005883a 	mov	r2,r4
   22720:	10c00007 	ldb	r3,0(r2)
   22724:	18000226 	beq	r3,zero,22730 <strlen+0x14>
   22728:	10800044 	addi	r2,r2,1
   2272c:	003ffc06 	br	22720 <gameover+0xefee8280>
   22730:	1105c83a 	sub	r2,r2,r4
   22734:	f800283a 	ret

00022738 <print_repeat>:
   22738:	defffb04 	addi	sp,sp,-20
   2273c:	dc800315 	stw	r18,12(sp)
   22740:	dc400215 	stw	r17,8(sp)
   22744:	dc000115 	stw	r16,4(sp)
   22748:	dfc00415 	stw	ra,16(sp)
   2274c:	2025883a 	mov	r18,r4
   22750:	2823883a 	mov	r17,r5
   22754:	d9800005 	stb	r6,0(sp)
   22758:	3821883a 	mov	r16,r7
   2275c:	04000a0e 	bge	zero,r16,22788 <print_repeat+0x50>
   22760:	88800117 	ldw	r2,4(r17)
   22764:	01c00044 	movi	r7,1
   22768:	d80d883a 	mov	r6,sp
   2276c:	880b883a 	mov	r5,r17
   22770:	9009883a 	mov	r4,r18
   22774:	103ee83a 	callr	r2
   22778:	843fffc4 	addi	r16,r16,-1
   2277c:	103ff726 	beq	r2,zero,2275c <gameover+0xefee82bc>
   22780:	00bfffc4 	movi	r2,-1
   22784:	00000106 	br	2278c <print_repeat+0x54>
   22788:	0005883a 	mov	r2,zero
   2278c:	dfc00417 	ldw	ra,16(sp)
   22790:	dc800317 	ldw	r18,12(sp)
   22794:	dc400217 	ldw	r17,8(sp)
   22798:	dc000117 	ldw	r16,4(sp)
   2279c:	dec00504 	addi	sp,sp,20
   227a0:	f800283a 	ret

000227a4 <___vfprintf_internal_r>:
   227a4:	deffe504 	addi	sp,sp,-108
   227a8:	d8c00804 	addi	r3,sp,32
   227ac:	ddc01815 	stw	r23,96(sp)
   227b0:	dd801715 	stw	r22,92(sp)
   227b4:	dd401615 	stw	r21,88(sp)
   227b8:	dd001515 	stw	r20,84(sp)
   227bc:	dcc01415 	stw	r19,80(sp)
   227c0:	dc801315 	stw	r18,76(sp)
   227c4:	dc401215 	stw	r17,72(sp)
   227c8:	dc001115 	stw	r16,68(sp)
   227cc:	dfc01a15 	stw	ra,104(sp)
   227d0:	df001915 	stw	fp,100(sp)
   227d4:	2029883a 	mov	r20,r4
   227d8:	2823883a 	mov	r17,r5
   227dc:	382d883a 	mov	r22,r7
   227e0:	d9800f15 	stw	r6,60(sp)
   227e4:	0021883a 	mov	r16,zero
   227e8:	d8000e15 	stw	zero,56(sp)
   227ec:	d8000a15 	stw	zero,40(sp)
   227f0:	002b883a 	mov	r21,zero
   227f4:	0027883a 	mov	r19,zero
   227f8:	0025883a 	mov	r18,zero
   227fc:	d8000c15 	stw	zero,48(sp)
   22800:	d8000b15 	stw	zero,44(sp)
   22804:	002f883a 	mov	r23,zero
   22808:	d8c00915 	stw	r3,36(sp)
   2280c:	d8c00f17 	ldw	r3,60(sp)
   22810:	19000003 	ldbu	r4,0(r3)
   22814:	20803fcc 	andi	r2,r4,255
   22818:	1080201c 	xori	r2,r2,128
   2281c:	10bfe004 	addi	r2,r2,-128
   22820:	10011e26 	beq	r2,zero,22c9c <___vfprintf_internal_r+0x4f8>
   22824:	00c00044 	movi	r3,1
   22828:	b8c01426 	beq	r23,r3,2287c <___vfprintf_internal_r+0xd8>
   2282c:	1dc00216 	blt	r3,r23,22838 <___vfprintf_internal_r+0x94>
   22830:	b8000626 	beq	r23,zero,2284c <___vfprintf_internal_r+0xa8>
   22834:	00011506 	br	22c8c <___vfprintf_internal_r+0x4e8>
   22838:	01400084 	movi	r5,2
   2283c:	b9401d26 	beq	r23,r5,228b4 <___vfprintf_internal_r+0x110>
   22840:	014000c4 	movi	r5,3
   22844:	b9402b26 	beq	r23,r5,228f4 <___vfprintf_internal_r+0x150>
   22848:	00011006 	br	22c8c <___vfprintf_internal_r+0x4e8>
   2284c:	01400944 	movi	r5,37
   22850:	1140fc26 	beq	r2,r5,22c44 <___vfprintf_internal_r+0x4a0>
   22854:	88800117 	ldw	r2,4(r17)
   22858:	d9000005 	stb	r4,0(sp)
   2285c:	01c00044 	movi	r7,1
   22860:	d80d883a 	mov	r6,sp
   22864:	880b883a 	mov	r5,r17
   22868:	a009883a 	mov	r4,r20
   2286c:	103ee83a 	callr	r2
   22870:	1000d81e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22874:	84000044 	addi	r16,r16,1
   22878:	00010406 	br	22c8c <___vfprintf_internal_r+0x4e8>
   2287c:	01400c04 	movi	r5,48
   22880:	1140fa26 	beq	r2,r5,22c6c <___vfprintf_internal_r+0x4c8>
   22884:	01400944 	movi	r5,37
   22888:	11400a1e 	bne	r2,r5,228b4 <___vfprintf_internal_r+0x110>
   2288c:	d8800005 	stb	r2,0(sp)
   22890:	88800117 	ldw	r2,4(r17)
   22894:	b80f883a 	mov	r7,r23
   22898:	d80d883a 	mov	r6,sp
   2289c:	880b883a 	mov	r5,r17
   228a0:	a009883a 	mov	r4,r20
   228a4:	103ee83a 	callr	r2
   228a8:	1000ca1e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   228ac:	84000044 	addi	r16,r16,1
   228b0:	0000f506 	br	22c88 <___vfprintf_internal_r+0x4e4>
   228b4:	25fff404 	addi	r23,r4,-48
   228b8:	bdc03fcc 	andi	r23,r23,255
   228bc:	00c00244 	movi	r3,9
   228c0:	1dc00936 	bltu	r3,r23,228e8 <___vfprintf_internal_r+0x144>
   228c4:	00bfffc4 	movi	r2,-1
   228c8:	90800426 	beq	r18,r2,228dc <___vfprintf_internal_r+0x138>
   228cc:	01400284 	movi	r5,10
   228d0:	9009883a 	mov	r4,r18
   228d4:	00225b40 	call	225b4 <__mulsi3>
   228d8:	00000106 	br	228e0 <___vfprintf_internal_r+0x13c>
   228dc:	0005883a 	mov	r2,zero
   228e0:	b8a5883a 	add	r18,r23,r2
   228e4:	0000e206 	br	22c70 <___vfprintf_internal_r+0x4cc>
   228e8:	01400b84 	movi	r5,46
   228ec:	1140e426 	beq	r2,r5,22c80 <___vfprintf_internal_r+0x4dc>
   228f0:	05c00084 	movi	r23,2
   228f4:	213ff404 	addi	r4,r4,-48
   228f8:	27003fcc 	andi	fp,r4,255
   228fc:	00c00244 	movi	r3,9
   22900:	1f000936 	bltu	r3,fp,22928 <___vfprintf_internal_r+0x184>
   22904:	00bfffc4 	movi	r2,-1
   22908:	98800426 	beq	r19,r2,2291c <___vfprintf_internal_r+0x178>
   2290c:	01400284 	movi	r5,10
   22910:	9809883a 	mov	r4,r19
   22914:	00225b40 	call	225b4 <__mulsi3>
   22918:	00000106 	br	22920 <___vfprintf_internal_r+0x17c>
   2291c:	0005883a 	mov	r2,zero
   22920:	e0a7883a 	add	r19,fp,r2
   22924:	0000d906 	br	22c8c <___vfprintf_internal_r+0x4e8>
   22928:	00c01b04 	movi	r3,108
   2292c:	10c0d226 	beq	r2,r3,22c78 <___vfprintf_internal_r+0x4d4>
   22930:	013fffc4 	movi	r4,-1
   22934:	99000226 	beq	r19,r4,22940 <___vfprintf_internal_r+0x19c>
   22938:	d8000b15 	stw	zero,44(sp)
   2293c:	00000106 	br	22944 <___vfprintf_internal_r+0x1a0>
   22940:	04c00044 	movi	r19,1
   22944:	01001a44 	movi	r4,105
   22948:	11001626 	beq	r2,r4,229a4 <___vfprintf_internal_r+0x200>
   2294c:	20800916 	blt	r4,r2,22974 <___vfprintf_internal_r+0x1d0>
   22950:	010018c4 	movi	r4,99
   22954:	11008826 	beq	r2,r4,22b78 <___vfprintf_internal_r+0x3d4>
   22958:	01001904 	movi	r4,100
   2295c:	11001126 	beq	r2,r4,229a4 <___vfprintf_internal_r+0x200>
   22960:	01001604 	movi	r4,88
   22964:	1100c81e 	bne	r2,r4,22c88 <___vfprintf_internal_r+0x4e4>
   22968:	00c00044 	movi	r3,1
   2296c:	d8c00e15 	stw	r3,56(sp)
   22970:	00001506 	br	229c8 <___vfprintf_internal_r+0x224>
   22974:	01001cc4 	movi	r4,115
   22978:	11009826 	beq	r2,r4,22bdc <___vfprintf_internal_r+0x438>
   2297c:	20800416 	blt	r4,r2,22990 <___vfprintf_internal_r+0x1ec>
   22980:	01001bc4 	movi	r4,111
   22984:	1100c01e 	bne	r2,r4,22c88 <___vfprintf_internal_r+0x4e4>
   22988:	05400204 	movi	r21,8
   2298c:	00000f06 	br	229cc <___vfprintf_internal_r+0x228>
   22990:	01001d44 	movi	r4,117
   22994:	11000d26 	beq	r2,r4,229cc <___vfprintf_internal_r+0x228>
   22998:	01001e04 	movi	r4,120
   2299c:	11000a26 	beq	r2,r4,229c8 <___vfprintf_internal_r+0x224>
   229a0:	0000b906 	br	22c88 <___vfprintf_internal_r+0x4e4>
   229a4:	d8c00a17 	ldw	r3,40(sp)
   229a8:	b7000104 	addi	fp,r22,4
   229ac:	18000726 	beq	r3,zero,229cc <___vfprintf_internal_r+0x228>
   229b0:	df000d15 	stw	fp,52(sp)
   229b4:	b5c00017 	ldw	r23,0(r22)
   229b8:	b800080e 	bge	r23,zero,229dc <___vfprintf_internal_r+0x238>
   229bc:	05efc83a 	sub	r23,zero,r23
   229c0:	02400044 	movi	r9,1
   229c4:	00000606 	br	229e0 <___vfprintf_internal_r+0x23c>
   229c8:	05400404 	movi	r21,16
   229cc:	b0c00104 	addi	r3,r22,4
   229d0:	d8c00d15 	stw	r3,52(sp)
   229d4:	b5c00017 	ldw	r23,0(r22)
   229d8:	d8000a15 	stw	zero,40(sp)
   229dc:	0013883a 	mov	r9,zero
   229e0:	d839883a 	mov	fp,sp
   229e4:	b8001726 	beq	r23,zero,22a44 <___vfprintf_internal_r+0x2a0>
   229e8:	a80b883a 	mov	r5,r21
   229ec:	b809883a 	mov	r4,r23
   229f0:	da401015 	stw	r9,64(sp)
   229f4:	0022fa00 	call	22fa0 <__udivsi3>
   229f8:	a80b883a 	mov	r5,r21
   229fc:	1009883a 	mov	r4,r2
   22a00:	102d883a 	mov	r22,r2
   22a04:	00225b40 	call	225b4 <__mulsi3>
   22a08:	b885c83a 	sub	r2,r23,r2
   22a0c:	00c00244 	movi	r3,9
   22a10:	da401017 	ldw	r9,64(sp)
   22a14:	18800216 	blt	r3,r2,22a20 <___vfprintf_internal_r+0x27c>
   22a18:	10800c04 	addi	r2,r2,48
   22a1c:	00000506 	br	22a34 <___vfprintf_internal_r+0x290>
   22a20:	d8c00e17 	ldw	r3,56(sp)
   22a24:	18000226 	beq	r3,zero,22a30 <___vfprintf_internal_r+0x28c>
   22a28:	10800dc4 	addi	r2,r2,55
   22a2c:	00000106 	br	22a34 <___vfprintf_internal_r+0x290>
   22a30:	108015c4 	addi	r2,r2,87
   22a34:	e0800005 	stb	r2,0(fp)
   22a38:	b02f883a 	mov	r23,r22
   22a3c:	e7000044 	addi	fp,fp,1
   22a40:	003fe806 	br	229e4 <gameover+0xefee8544>
   22a44:	e6efc83a 	sub	r23,fp,sp
   22a48:	9dc5c83a 	sub	r2,r19,r23
   22a4c:	0080090e 	bge	zero,r2,22a74 <___vfprintf_internal_r+0x2d0>
   22a50:	e085883a 	add	r2,fp,r2
   22a54:	01400c04 	movi	r5,48
   22a58:	d8c00917 	ldw	r3,36(sp)
   22a5c:	e009883a 	mov	r4,fp
   22a60:	e0c0032e 	bgeu	fp,r3,22a70 <___vfprintf_internal_r+0x2cc>
   22a64:	e7000044 	addi	fp,fp,1
   22a68:	21400005 	stb	r5,0(r4)
   22a6c:	e0bffa1e 	bne	fp,r2,22a58 <gameover+0xefee85b8>
   22a70:	e6efc83a 	sub	r23,fp,sp
   22a74:	d8c00b17 	ldw	r3,44(sp)
   22a78:	4dd1883a 	add	r8,r9,r23
   22a7c:	922dc83a 	sub	r22,r18,r8
   22a80:	18001626 	beq	r3,zero,22adc <___vfprintf_internal_r+0x338>
   22a84:	48000a26 	beq	r9,zero,22ab0 <___vfprintf_internal_r+0x30c>
   22a88:	00800b44 	movi	r2,45
   22a8c:	d8800805 	stb	r2,32(sp)
   22a90:	88800117 	ldw	r2,4(r17)
   22a94:	01c00044 	movi	r7,1
   22a98:	d9800804 	addi	r6,sp,32
   22a9c:	880b883a 	mov	r5,r17
   22aa0:	a009883a 	mov	r4,r20
   22aa4:	103ee83a 	callr	r2
   22aa8:	10004a1e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22aac:	84000044 	addi	r16,r16,1
   22ab0:	0580070e 	bge	zero,r22,22ad0 <___vfprintf_internal_r+0x32c>
   22ab4:	b00f883a 	mov	r7,r22
   22ab8:	01800c04 	movi	r6,48
   22abc:	880b883a 	mov	r5,r17
   22ac0:	a009883a 	mov	r4,r20
   22ac4:	00227380 	call	22738 <print_repeat>
   22ac8:	1000421e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22acc:	85a1883a 	add	r16,r16,r22
   22ad0:	e02d883a 	mov	r22,fp
   22ad4:	bf2fc83a 	sub	r23,r23,fp
   22ad8:	00002006 	br	22b5c <___vfprintf_internal_r+0x3b8>
   22adc:	0580090e 	bge	zero,r22,22b04 <___vfprintf_internal_r+0x360>
   22ae0:	b00f883a 	mov	r7,r22
   22ae4:	01800804 	movi	r6,32
   22ae8:	880b883a 	mov	r5,r17
   22aec:	a009883a 	mov	r4,r20
   22af0:	da401015 	stw	r9,64(sp)
   22af4:	00227380 	call	22738 <print_repeat>
   22af8:	da401017 	ldw	r9,64(sp)
   22afc:	1000351e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22b00:	85a1883a 	add	r16,r16,r22
   22b04:	483ff226 	beq	r9,zero,22ad0 <gameover+0xefee8630>
   22b08:	00800b44 	movi	r2,45
   22b0c:	d8800805 	stb	r2,32(sp)
   22b10:	88800117 	ldw	r2,4(r17)
   22b14:	01c00044 	movi	r7,1
   22b18:	d9800804 	addi	r6,sp,32
   22b1c:	880b883a 	mov	r5,r17
   22b20:	a009883a 	mov	r4,r20
   22b24:	103ee83a 	callr	r2
   22b28:	10002a1e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22b2c:	84000044 	addi	r16,r16,1
   22b30:	003fe706 	br	22ad0 <gameover+0xefee8630>
   22b34:	b5bfffc4 	addi	r22,r22,-1
   22b38:	b0800003 	ldbu	r2,0(r22)
   22b3c:	01c00044 	movi	r7,1
   22b40:	d9800804 	addi	r6,sp,32
   22b44:	d8800805 	stb	r2,32(sp)
   22b48:	88800117 	ldw	r2,4(r17)
   22b4c:	880b883a 	mov	r5,r17
   22b50:	a009883a 	mov	r4,r20
   22b54:	103ee83a 	callr	r2
   22b58:	10001e1e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22b5c:	8585c83a 	sub	r2,r16,r22
   22b60:	b5c9883a 	add	r4,r22,r23
   22b64:	e085883a 	add	r2,fp,r2
   22b68:	013ff216 	blt	zero,r4,22b34 <gameover+0xefee8694>
   22b6c:	1021883a 	mov	r16,r2
   22b70:	dd800d17 	ldw	r22,52(sp)
   22b74:	00004406 	br	22c88 <___vfprintf_internal_r+0x4e4>
   22b78:	00800044 	movi	r2,1
   22b7c:	1480080e 	bge	r2,r18,22ba0 <___vfprintf_internal_r+0x3fc>
   22b80:	95ffffc4 	addi	r23,r18,-1
   22b84:	b80f883a 	mov	r7,r23
   22b88:	01800804 	movi	r6,32
   22b8c:	880b883a 	mov	r5,r17
   22b90:	a009883a 	mov	r4,r20
   22b94:	00227380 	call	22738 <print_repeat>
   22b98:	10000e1e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22b9c:	85e1883a 	add	r16,r16,r23
   22ba0:	b0800017 	ldw	r2,0(r22)
   22ba4:	01c00044 	movi	r7,1
   22ba8:	d80d883a 	mov	r6,sp
   22bac:	d8800005 	stb	r2,0(sp)
   22bb0:	88800117 	ldw	r2,4(r17)
   22bb4:	880b883a 	mov	r5,r17
   22bb8:	a009883a 	mov	r4,r20
   22bbc:	b5c00104 	addi	r23,r22,4
   22bc0:	103ee83a 	callr	r2
   22bc4:	1000031e 	bne	r2,zero,22bd4 <___vfprintf_internal_r+0x430>
   22bc8:	84000044 	addi	r16,r16,1
   22bcc:	b82d883a 	mov	r22,r23
   22bd0:	00002d06 	br	22c88 <___vfprintf_internal_r+0x4e4>
   22bd4:	00bfffc4 	movi	r2,-1
   22bd8:	00003106 	br	22ca0 <___vfprintf_internal_r+0x4fc>
   22bdc:	b5c00017 	ldw	r23,0(r22)
   22be0:	b7000104 	addi	fp,r22,4
   22be4:	b809883a 	mov	r4,r23
   22be8:	002271c0 	call	2271c <strlen>
   22bec:	9091c83a 	sub	r8,r18,r2
   22bf0:	102d883a 	mov	r22,r2
   22bf4:	0200090e 	bge	zero,r8,22c1c <___vfprintf_internal_r+0x478>
   22bf8:	400f883a 	mov	r7,r8
   22bfc:	01800804 	movi	r6,32
   22c00:	880b883a 	mov	r5,r17
   22c04:	a009883a 	mov	r4,r20
   22c08:	da001015 	stw	r8,64(sp)
   22c0c:	00227380 	call	22738 <print_repeat>
   22c10:	da001017 	ldw	r8,64(sp)
   22c14:	103fef1e 	bne	r2,zero,22bd4 <gameover+0xefee8734>
   22c18:	8221883a 	add	r16,r16,r8
   22c1c:	88800117 	ldw	r2,4(r17)
   22c20:	b00f883a 	mov	r7,r22
   22c24:	b80d883a 	mov	r6,r23
   22c28:	880b883a 	mov	r5,r17
   22c2c:	a009883a 	mov	r4,r20
   22c30:	103ee83a 	callr	r2
   22c34:	103fe71e 	bne	r2,zero,22bd4 <gameover+0xefee8734>
   22c38:	85a1883a 	add	r16,r16,r22
   22c3c:	e02d883a 	mov	r22,fp
   22c40:	00001106 	br	22c88 <___vfprintf_internal_r+0x4e4>
   22c44:	00c00044 	movi	r3,1
   22c48:	04ffffc4 	movi	r19,-1
   22c4c:	d8000e15 	stw	zero,56(sp)
   22c50:	d8c00a15 	stw	r3,40(sp)
   22c54:	05400284 	movi	r21,10
   22c58:	9825883a 	mov	r18,r19
   22c5c:	d8000c15 	stw	zero,48(sp)
   22c60:	d8000b15 	stw	zero,44(sp)
   22c64:	182f883a 	mov	r23,r3
   22c68:	00000806 	br	22c8c <___vfprintf_internal_r+0x4e8>
   22c6c:	ddc00b15 	stw	r23,44(sp)
   22c70:	05c00084 	movi	r23,2
   22c74:	00000506 	br	22c8c <___vfprintf_internal_r+0x4e8>
   22c78:	00c00044 	movi	r3,1
   22c7c:	d8c00c15 	stw	r3,48(sp)
   22c80:	05c000c4 	movi	r23,3
   22c84:	00000106 	br	22c8c <___vfprintf_internal_r+0x4e8>
   22c88:	002f883a 	mov	r23,zero
   22c8c:	d8c00f17 	ldw	r3,60(sp)
   22c90:	18c00044 	addi	r3,r3,1
   22c94:	d8c00f15 	stw	r3,60(sp)
   22c98:	003edc06 	br	2280c <gameover+0xefee836c>
   22c9c:	8005883a 	mov	r2,r16
   22ca0:	dfc01a17 	ldw	ra,104(sp)
   22ca4:	df001917 	ldw	fp,100(sp)
   22ca8:	ddc01817 	ldw	r23,96(sp)
   22cac:	dd801717 	ldw	r22,92(sp)
   22cb0:	dd401617 	ldw	r21,88(sp)
   22cb4:	dd001517 	ldw	r20,84(sp)
   22cb8:	dcc01417 	ldw	r19,80(sp)
   22cbc:	dc801317 	ldw	r18,76(sp)
   22cc0:	dc401217 	ldw	r17,72(sp)
   22cc4:	dc001117 	ldw	r16,68(sp)
   22cc8:	dec01b04 	addi	sp,sp,108
   22ccc:	f800283a 	ret

00022cd0 <__vfprintf_internal>:
   22cd0:	008000b4 	movhi	r2,2
   22cd4:	10970c04 	addi	r2,r2,23600
   22cd8:	300f883a 	mov	r7,r6
   22cdc:	280d883a 	mov	r6,r5
   22ce0:	200b883a 	mov	r5,r4
   22ce4:	11000017 	ldw	r4,0(r2)
   22ce8:	00227a41 	jmpi	227a4 <___vfprintf_internal_r>

00022cec <__sfvwrite_small_dev>:
   22cec:	2880000b 	ldhu	r2,0(r5)
   22cf0:	1080020c 	andi	r2,r2,8
   22cf4:	10002126 	beq	r2,zero,22d7c <__sfvwrite_small_dev+0x90>
   22cf8:	2880008f 	ldh	r2,2(r5)
   22cfc:	defffa04 	addi	sp,sp,-24
   22d00:	dc000015 	stw	r16,0(sp)
   22d04:	dfc00515 	stw	ra,20(sp)
   22d08:	dd000415 	stw	r20,16(sp)
   22d0c:	dcc00315 	stw	r19,12(sp)
   22d10:	dc800215 	stw	r18,8(sp)
   22d14:	dc400115 	stw	r17,4(sp)
   22d18:	2821883a 	mov	r16,r5
   22d1c:	10001216 	blt	r2,zero,22d68 <__sfvwrite_small_dev+0x7c>
   22d20:	2027883a 	mov	r19,r4
   22d24:	3025883a 	mov	r18,r6
   22d28:	3823883a 	mov	r17,r7
   22d2c:	05010004 	movi	r20,1024
   22d30:	04400b0e 	bge	zero,r17,22d60 <__sfvwrite_small_dev+0x74>
   22d34:	880f883a 	mov	r7,r17
   22d38:	a440010e 	bge	r20,r17,22d40 <__sfvwrite_small_dev+0x54>
   22d3c:	01c10004 	movi	r7,1024
   22d40:	8140008f 	ldh	r5,2(r16)
   22d44:	900d883a 	mov	r6,r18
   22d48:	9809883a 	mov	r4,r19
   22d4c:	0022e500 	call	22e50 <_write_r>
   22d50:	0080050e 	bge	zero,r2,22d68 <__sfvwrite_small_dev+0x7c>
   22d54:	88a3c83a 	sub	r17,r17,r2
   22d58:	90a5883a 	add	r18,r18,r2
   22d5c:	003ff406 	br	22d30 <gameover+0xefee8890>
   22d60:	0005883a 	mov	r2,zero
   22d64:	00000706 	br	22d84 <__sfvwrite_small_dev+0x98>
   22d68:	8080000b 	ldhu	r2,0(r16)
   22d6c:	10801014 	ori	r2,r2,64
   22d70:	8080000d 	sth	r2,0(r16)
   22d74:	00bfffc4 	movi	r2,-1
   22d78:	00000206 	br	22d84 <__sfvwrite_small_dev+0x98>
   22d7c:	00bfffc4 	movi	r2,-1
   22d80:	f800283a 	ret
   22d84:	dfc00517 	ldw	ra,20(sp)
   22d88:	dd000417 	ldw	r20,16(sp)
   22d8c:	dcc00317 	ldw	r19,12(sp)
   22d90:	dc800217 	ldw	r18,8(sp)
   22d94:	dc400117 	ldw	r17,4(sp)
   22d98:	dc000017 	ldw	r16,0(sp)
   22d9c:	dec00604 	addi	sp,sp,24
   22da0:	f800283a 	ret

00022da4 <putc>:
   22da4:	defffd04 	addi	sp,sp,-12
   22da8:	008000b4 	movhi	r2,2
   22dac:	dc000115 	stw	r16,4(sp)
   22db0:	dfc00215 	stw	ra,8(sp)
   22db4:	108b3b04 	addi	r2,r2,11500
   22db8:	28800115 	stw	r2,4(r5)
   22dbc:	008000b4 	movhi	r2,2
   22dc0:	10970c04 	addi	r2,r2,23600
   22dc4:	d9000005 	stb	r4,0(sp)
   22dc8:	2021883a 	mov	r16,r4
   22dcc:	11000017 	ldw	r4,0(r2)
   22dd0:	01c00044 	movi	r7,1
   22dd4:	d80d883a 	mov	r6,sp
   22dd8:	0022cec0 	call	22cec <__sfvwrite_small_dev>
   22ddc:	00ffffc4 	movi	r3,-1
   22de0:	10c00126 	beq	r2,r3,22de8 <putc+0x44>
   22de4:	8005883a 	mov	r2,r16
   22de8:	dfc00217 	ldw	ra,8(sp)
   22dec:	dc000117 	ldw	r16,4(sp)
   22df0:	dec00304 	addi	sp,sp,12
   22df4:	f800283a 	ret

00022df8 <_putc_r>:
   22df8:	defffd04 	addi	sp,sp,-12
   22dfc:	008000b4 	movhi	r2,2
   22e00:	dc000115 	stw	r16,4(sp)
   22e04:	dfc00215 	stw	ra,8(sp)
   22e08:	108b3b04 	addi	r2,r2,11500
   22e0c:	30800115 	stw	r2,4(r6)
   22e10:	008000b4 	movhi	r2,2
   22e14:	10970c04 	addi	r2,r2,23600
   22e18:	11000017 	ldw	r4,0(r2)
   22e1c:	2821883a 	mov	r16,r5
   22e20:	01c00044 	movi	r7,1
   22e24:	300b883a 	mov	r5,r6
   22e28:	d80d883a 	mov	r6,sp
   22e2c:	dc000005 	stb	r16,0(sp)
   22e30:	0022cec0 	call	22cec <__sfvwrite_small_dev>
   22e34:	00ffffc4 	movi	r3,-1
   22e38:	10c00126 	beq	r2,r3,22e40 <_putc_r+0x48>
   22e3c:	8005883a 	mov	r2,r16
   22e40:	dfc00217 	ldw	ra,8(sp)
   22e44:	dc000117 	ldw	r16,4(sp)
   22e48:	dec00304 	addi	sp,sp,12
   22e4c:	f800283a 	ret

00022e50 <_write_r>:
   22e50:	defffd04 	addi	sp,sp,-12
   22e54:	dc000015 	stw	r16,0(sp)
   22e58:	040000b4 	movhi	r16,2
   22e5c:	dc400115 	stw	r17,4(sp)
   22e60:	8417eb04 	addi	r16,r16,24492
   22e64:	2023883a 	mov	r17,r4
   22e68:	2809883a 	mov	r4,r5
   22e6c:	300b883a 	mov	r5,r6
   22e70:	380d883a 	mov	r6,r7
   22e74:	dfc00215 	stw	ra,8(sp)
   22e78:	80000015 	stw	zero,0(r16)
   22e7c:	00231f00 	call	231f0 <write>
   22e80:	00ffffc4 	movi	r3,-1
   22e84:	10c0031e 	bne	r2,r3,22e94 <_write_r+0x44>
   22e88:	80c00017 	ldw	r3,0(r16)
   22e8c:	18000126 	beq	r3,zero,22e94 <_write_r+0x44>
   22e90:	88c00015 	stw	r3,0(r17)
   22e94:	dfc00217 	ldw	ra,8(sp)
   22e98:	dc400117 	ldw	r17,4(sp)
   22e9c:	dc000017 	ldw	r16,0(sp)
   22ea0:	dec00304 	addi	sp,sp,12
   22ea4:	f800283a 	ret

00022ea8 <__divsi3>:
   22ea8:	20001b16 	blt	r4,zero,22f18 <__divsi3+0x70>
   22eac:	000f883a 	mov	r7,zero
   22eb0:	28001616 	blt	r5,zero,22f0c <__divsi3+0x64>
   22eb4:	200d883a 	mov	r6,r4
   22eb8:	29001a2e 	bgeu	r5,r4,22f24 <__divsi3+0x7c>
   22ebc:	00800804 	movi	r2,32
   22ec0:	00c00044 	movi	r3,1
   22ec4:	00000106 	br	22ecc <__divsi3+0x24>
   22ec8:	10000d26 	beq	r2,zero,22f00 <__divsi3+0x58>
   22ecc:	294b883a 	add	r5,r5,r5
   22ed0:	10bfffc4 	addi	r2,r2,-1
   22ed4:	18c7883a 	add	r3,r3,r3
   22ed8:	293ffb36 	bltu	r5,r4,22ec8 <gameover+0xefee8a28>
   22edc:	0005883a 	mov	r2,zero
   22ee0:	18000726 	beq	r3,zero,22f00 <__divsi3+0x58>
   22ee4:	0005883a 	mov	r2,zero
   22ee8:	31400236 	bltu	r6,r5,22ef4 <__divsi3+0x4c>
   22eec:	314dc83a 	sub	r6,r6,r5
   22ef0:	10c4b03a 	or	r2,r2,r3
   22ef4:	1806d07a 	srli	r3,r3,1
   22ef8:	280ad07a 	srli	r5,r5,1
   22efc:	183ffa1e 	bne	r3,zero,22ee8 <gameover+0xefee8a48>
   22f00:	38000126 	beq	r7,zero,22f08 <__divsi3+0x60>
   22f04:	0085c83a 	sub	r2,zero,r2
   22f08:	f800283a 	ret
   22f0c:	014bc83a 	sub	r5,zero,r5
   22f10:	39c0005c 	xori	r7,r7,1
   22f14:	003fe706 	br	22eb4 <gameover+0xefee8a14>
   22f18:	0109c83a 	sub	r4,zero,r4
   22f1c:	01c00044 	movi	r7,1
   22f20:	003fe306 	br	22eb0 <gameover+0xefee8a10>
   22f24:	00c00044 	movi	r3,1
   22f28:	003fee06 	br	22ee4 <gameover+0xefee8a44>

00022f2c <__modsi3>:
   22f2c:	20001716 	blt	r4,zero,22f8c <__modsi3+0x60>
   22f30:	000f883a 	mov	r7,zero
   22f34:	2005883a 	mov	r2,r4
   22f38:	28001216 	blt	r5,zero,22f84 <__modsi3+0x58>
   22f3c:	2900162e 	bgeu	r5,r4,22f98 <__modsi3+0x6c>
   22f40:	01800804 	movi	r6,32
   22f44:	00c00044 	movi	r3,1
   22f48:	00000106 	br	22f50 <__modsi3+0x24>
   22f4c:	30000a26 	beq	r6,zero,22f78 <__modsi3+0x4c>
   22f50:	294b883a 	add	r5,r5,r5
   22f54:	31bfffc4 	addi	r6,r6,-1
   22f58:	18c7883a 	add	r3,r3,r3
   22f5c:	293ffb36 	bltu	r5,r4,22f4c <gameover+0xefee8aac>
   22f60:	18000526 	beq	r3,zero,22f78 <__modsi3+0x4c>
   22f64:	1806d07a 	srli	r3,r3,1
   22f68:	11400136 	bltu	r2,r5,22f70 <__modsi3+0x44>
   22f6c:	1145c83a 	sub	r2,r2,r5
   22f70:	280ad07a 	srli	r5,r5,1
   22f74:	183ffb1e 	bne	r3,zero,22f64 <gameover+0xefee8ac4>
   22f78:	38000126 	beq	r7,zero,22f80 <__modsi3+0x54>
   22f7c:	0085c83a 	sub	r2,zero,r2
   22f80:	f800283a 	ret
   22f84:	014bc83a 	sub	r5,zero,r5
   22f88:	003fec06 	br	22f3c <gameover+0xefee8a9c>
   22f8c:	0109c83a 	sub	r4,zero,r4
   22f90:	01c00044 	movi	r7,1
   22f94:	003fe706 	br	22f34 <gameover+0xefee8a94>
   22f98:	00c00044 	movi	r3,1
   22f9c:	003ff106 	br	22f64 <gameover+0xefee8ac4>

00022fa0 <__udivsi3>:
   22fa0:	200d883a 	mov	r6,r4
   22fa4:	2900152e 	bgeu	r5,r4,22ffc <__udivsi3+0x5c>
   22fa8:	28001416 	blt	r5,zero,22ffc <__udivsi3+0x5c>
   22fac:	00800804 	movi	r2,32
   22fb0:	00c00044 	movi	r3,1
   22fb4:	00000206 	br	22fc0 <__udivsi3+0x20>
   22fb8:	10000e26 	beq	r2,zero,22ff4 <__udivsi3+0x54>
   22fbc:	28000516 	blt	r5,zero,22fd4 <__udivsi3+0x34>
   22fc0:	294b883a 	add	r5,r5,r5
   22fc4:	10bfffc4 	addi	r2,r2,-1
   22fc8:	18c7883a 	add	r3,r3,r3
   22fcc:	293ffa36 	bltu	r5,r4,22fb8 <gameover+0xefee8b18>
   22fd0:	18000826 	beq	r3,zero,22ff4 <__udivsi3+0x54>
   22fd4:	0005883a 	mov	r2,zero
   22fd8:	31400236 	bltu	r6,r5,22fe4 <__udivsi3+0x44>
   22fdc:	314dc83a 	sub	r6,r6,r5
   22fe0:	10c4b03a 	or	r2,r2,r3
   22fe4:	1806d07a 	srli	r3,r3,1
   22fe8:	280ad07a 	srli	r5,r5,1
   22fec:	183ffa1e 	bne	r3,zero,22fd8 <gameover+0xefee8b38>
   22ff0:	f800283a 	ret
   22ff4:	0005883a 	mov	r2,zero
   22ff8:	f800283a 	ret
   22ffc:	00c00044 	movi	r3,1
   23000:	003ff406 	br	22fd4 <gameover+0xefee8b34>

00023004 <__umodsi3>:
   23004:	2005883a 	mov	r2,r4
   23008:	2900122e 	bgeu	r5,r4,23054 <__umodsi3+0x50>
   2300c:	28001116 	blt	r5,zero,23054 <__umodsi3+0x50>
   23010:	01800804 	movi	r6,32
   23014:	00c00044 	movi	r3,1
   23018:	00000206 	br	23024 <__umodsi3+0x20>
   2301c:	30000c26 	beq	r6,zero,23050 <__umodsi3+0x4c>
   23020:	28000516 	blt	r5,zero,23038 <__umodsi3+0x34>
   23024:	294b883a 	add	r5,r5,r5
   23028:	31bfffc4 	addi	r6,r6,-1
   2302c:	18c7883a 	add	r3,r3,r3
   23030:	293ffa36 	bltu	r5,r4,2301c <gameover+0xefee8b7c>
   23034:	18000626 	beq	r3,zero,23050 <__umodsi3+0x4c>
   23038:	1806d07a 	srli	r3,r3,1
   2303c:	11400136 	bltu	r2,r5,23044 <__umodsi3+0x40>
   23040:	1145c83a 	sub	r2,r2,r5
   23044:	280ad07a 	srli	r5,r5,1
   23048:	183ffb1e 	bne	r3,zero,23038 <gameover+0xefee8b98>
   2304c:	f800283a 	ret
   23050:	f800283a 	ret
   23054:	00c00044 	movi	r3,1
   23058:	003ff706 	br	23038 <gameover+0xefee8b98>

0002305c <alt_load_section>:
   2305c:	defffc04 	addi	sp,sp,-16
   23060:	df000315 	stw	fp,12(sp)
   23064:	df000304 	addi	fp,sp,12
   23068:	e13ffd15 	stw	r4,-12(fp)
   2306c:	e17ffe15 	stw	r5,-8(fp)
   23070:	e1bfff15 	stw	r6,-4(fp)
   23074:	e0fffe17 	ldw	r3,-8(fp)
   23078:	e0bffd17 	ldw	r2,-12(fp)
   2307c:	18800c26 	beq	r3,r2,230b0 <alt_load_section+0x54>
   23080:	00000806 	br	230a4 <alt_load_section+0x48>
   23084:	e0bffe17 	ldw	r2,-8(fp)
   23088:	10c00104 	addi	r3,r2,4
   2308c:	e0fffe15 	stw	r3,-8(fp)
   23090:	e0fffd17 	ldw	r3,-12(fp)
   23094:	19000104 	addi	r4,r3,4
   23098:	e13ffd15 	stw	r4,-12(fp)
   2309c:	18c00017 	ldw	r3,0(r3)
   230a0:	10c00015 	stw	r3,0(r2)
   230a4:	e0fffe17 	ldw	r3,-8(fp)
   230a8:	e0bfff17 	ldw	r2,-4(fp)
   230ac:	18bff51e 	bne	r3,r2,23084 <gameover+0xefee8be4>
   230b0:	0001883a 	nop
   230b4:	e037883a 	mov	sp,fp
   230b8:	df000017 	ldw	fp,0(sp)
   230bc:	dec00104 	addi	sp,sp,4
   230c0:	f800283a 	ret

000230c4 <alt_load>:
   230c4:	defffe04 	addi	sp,sp,-8
   230c8:	dfc00115 	stw	ra,4(sp)
   230cc:	df000015 	stw	fp,0(sp)
   230d0:	d839883a 	mov	fp,sp
   230d4:	018000b4 	movhi	r6,2
   230d8:	31971604 	addi	r6,r6,23640
   230dc:	014000b4 	movhi	r5,2
   230e0:	29564804 	addi	r5,r5,22816
   230e4:	010000b4 	movhi	r4,2
   230e8:	21171604 	addi	r4,r4,23640
   230ec:	002305c0 	call	2305c <alt_load_section>
   230f0:	018000b4 	movhi	r6,2
   230f4:	31808c04 	addi	r6,r6,560
   230f8:	014000b4 	movhi	r5,2
   230fc:	29400804 	addi	r5,r5,32
   23100:	010000b4 	movhi	r4,2
   23104:	21000804 	addi	r4,r4,32
   23108:	002305c0 	call	2305c <alt_load_section>
   2310c:	018000b4 	movhi	r6,2
   23110:	31964804 	addi	r6,r6,22816
   23114:	014000b4 	movhi	r5,2
   23118:	29548f04 	addi	r5,r5,21052
   2311c:	010000b4 	movhi	r4,2
   23120:	21148f04 	addi	r4,r4,21052
   23124:	002305c0 	call	2305c <alt_load_section>
   23128:	00244b80 	call	244b8 <alt_dcache_flush_all>
   2312c:	00246740 	call	24674 <alt_icache_flush_all>
   23130:	0001883a 	nop
   23134:	e037883a 	mov	sp,fp
   23138:	dfc00117 	ldw	ra,4(sp)
   2313c:	df000017 	ldw	fp,0(sp)
   23140:	dec00204 	addi	sp,sp,8
   23144:	f800283a 	ret

00023148 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23148:	defffd04 	addi	sp,sp,-12
   2314c:	dfc00215 	stw	ra,8(sp)
   23150:	df000115 	stw	fp,4(sp)
   23154:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23158:	0009883a 	mov	r4,zero
   2315c:	00233240 	call	23324 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23160:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23164:	002335c0 	call	2335c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23168:	018000b4 	movhi	r6,2
   2316c:	31963704 	addi	r6,r6,22748
   23170:	014000b4 	movhi	r5,2
   23174:	29563704 	addi	r5,r5,22748
   23178:	010000b4 	movhi	r4,2
   2317c:	21163704 	addi	r4,r4,22748
   23180:	0024a180 	call	24a18 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23184:	d0a0e317 	ldw	r2,-31860(gp)
   23188:	d0e0e417 	ldw	r3,-31856(gp)
   2318c:	d120e517 	ldw	r4,-31852(gp)
   23190:	200d883a 	mov	r6,r4
   23194:	180b883a 	mov	r5,r3
   23198:	1009883a 	mov	r4,r2
   2319c:	002199c0 	call	2199c <main>
   231a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   231a4:	01000044 	movi	r4,1
   231a8:	00243b80 	call	243b8 <close>
  exit (result);
   231ac:	e13fff17 	ldw	r4,-4(fp)
   231b0:	00250280 	call	25028 <exit>

000231b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231b4:	defffe04 	addi	sp,sp,-8
   231b8:	dfc00115 	stw	ra,4(sp)
   231bc:	df000015 	stw	fp,0(sp)
   231c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231c4:	d0a00b17 	ldw	r2,-32724(gp)
   231c8:	10000326 	beq	r2,zero,231d8 <alt_get_errno+0x24>
   231cc:	d0a00b17 	ldw	r2,-32724(gp)
   231d0:	103ee83a 	callr	r2
   231d4:	00000106 	br	231dc <alt_get_errno+0x28>
   231d8:	d0a0e204 	addi	r2,gp,-31864
}
   231dc:	e037883a 	mov	sp,fp
   231e0:	dfc00117 	ldw	ra,4(sp)
   231e4:	df000017 	ldw	fp,0(sp)
   231e8:	dec00204 	addi	sp,sp,8
   231ec:	f800283a 	ret

000231f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   231f0:	defff904 	addi	sp,sp,-28
   231f4:	dfc00615 	stw	ra,24(sp)
   231f8:	df000515 	stw	fp,20(sp)
   231fc:	df000504 	addi	fp,sp,20
   23200:	e13ffd15 	stw	r4,-12(fp)
   23204:	e17ffe15 	stw	r5,-8(fp)
   23208:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2320c:	e0bffd17 	ldw	r2,-12(fp)
   23210:	10000816 	blt	r2,zero,23234 <write+0x44>
   23214:	01400304 	movi	r5,12
   23218:	e13ffd17 	ldw	r4,-12(fp)
   2321c:	00225b40 	call	225b4 <__mulsi3>
   23220:	1007883a 	mov	r3,r2
   23224:	008000b4 	movhi	r2,2
   23228:	1096a904 	addi	r2,r2,23204
   2322c:	1885883a 	add	r2,r3,r2
   23230:	00000106 	br	23238 <write+0x48>
   23234:	0005883a 	mov	r2,zero
   23238:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2323c:	e0bffb17 	ldw	r2,-20(fp)
   23240:	10002126 	beq	r2,zero,232c8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23244:	e0bffb17 	ldw	r2,-20(fp)
   23248:	10800217 	ldw	r2,8(r2)
   2324c:	108000cc 	andi	r2,r2,3
   23250:	10001826 	beq	r2,zero,232b4 <write+0xc4>
   23254:	e0bffb17 	ldw	r2,-20(fp)
   23258:	10800017 	ldw	r2,0(r2)
   2325c:	10800617 	ldw	r2,24(r2)
   23260:	10001426 	beq	r2,zero,232b4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23264:	e0bffb17 	ldw	r2,-20(fp)
   23268:	10800017 	ldw	r2,0(r2)
   2326c:	10800617 	ldw	r2,24(r2)
   23270:	e0ffff17 	ldw	r3,-4(fp)
   23274:	180d883a 	mov	r6,r3
   23278:	e17ffe17 	ldw	r5,-8(fp)
   2327c:	e13ffb17 	ldw	r4,-20(fp)
   23280:	103ee83a 	callr	r2
   23284:	e0bffc15 	stw	r2,-16(fp)
   23288:	e0bffc17 	ldw	r2,-16(fp)
   2328c:	1000070e 	bge	r2,zero,232ac <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23290:	00231b40 	call	231b4 <alt_get_errno>
   23294:	1007883a 	mov	r3,r2
   23298:	e0bffc17 	ldw	r2,-16(fp)
   2329c:	0085c83a 	sub	r2,zero,r2
   232a0:	18800015 	stw	r2,0(r3)
        return -1;
   232a4:	00bfffc4 	movi	r2,-1
   232a8:	00000c06 	br	232dc <write+0xec>
      }
      return rval;
   232ac:	e0bffc17 	ldw	r2,-16(fp)
   232b0:	00000a06 	br	232dc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   232b4:	00231b40 	call	231b4 <alt_get_errno>
   232b8:	1007883a 	mov	r3,r2
   232bc:	00800344 	movi	r2,13
   232c0:	18800015 	stw	r2,0(r3)
   232c4:	00000406 	br	232d8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   232c8:	00231b40 	call	231b4 <alt_get_errno>
   232cc:	1007883a 	mov	r3,r2
   232d0:	00801444 	movi	r2,81
   232d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   232d8:	00bfffc4 	movi	r2,-1
}
   232dc:	e037883a 	mov	sp,fp
   232e0:	dfc00117 	ldw	ra,4(sp)
   232e4:	df000017 	ldw	fp,0(sp)
   232e8:	dec00204 	addi	sp,sp,8
   232ec:	f800283a 	ret

000232f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   232f0:	defffd04 	addi	sp,sp,-12
   232f4:	dfc00215 	stw	ra,8(sp)
   232f8:	df000115 	stw	fp,4(sp)
   232fc:	df000104 	addi	fp,sp,4
   23300:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23304:	d1600804 	addi	r5,gp,-32736
   23308:	e13fff17 	ldw	r4,-4(fp)
   2330c:	00245400 	call	24540 <alt_dev_llist_insert>
}
   23310:	e037883a 	mov	sp,fp
   23314:	dfc00117 	ldw	ra,4(sp)
   23318:	df000017 	ldw	fp,0(sp)
   2331c:	dec00204 	addi	sp,sp,8
   23320:	f800283a 	ret

00023324 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23324:	defffd04 	addi	sp,sp,-12
   23328:	dfc00215 	stw	ra,8(sp)
   2332c:	df000115 	stw	fp,4(sp)
   23330:	df000104 	addi	fp,sp,4
   23334:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MAIN_SOC, Main_Soc);
   23338:	0024d9c0 	call	24d9c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2333c:	00800044 	movi	r2,1
   23340:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23344:	0001883a 	nop
   23348:	e037883a 	mov	sp,fp
   2334c:	dfc00117 	ldw	ra,4(sp)
   23350:	df000017 	ldw	fp,0(sp)
   23354:	dec00204 	addi	sp,sp,8
   23358:	f800283a 	ret

0002335c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2335c:	defffe04 	addi	sp,sp,-8
   23360:	dfc00115 	stw	ra,4(sp)
   23364:	df000015 	stw	fp,0(sp)
   23368:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( MAIN_JTAG_UART, Main_jtag_uart);
   2336c:	010000b4 	movhi	r4,2
   23370:	21168804 	addi	r4,r4,23072
   23374:	00232f00 	call	232f0 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_0, sgdma_0);
   23378:	000d883a 	mov	r6,zero
   2337c:	000b883a 	mov	r5,zero
   23380:	010000b4 	movhi	r4,2
   23384:	21169304 	addi	r4,r4,23116
   23388:	00242d40 	call	242d4 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( MAIN_SYS_ID, Main_sys_id);
   2338c:	0001883a 	nop
}
   23390:	0001883a 	nop
   23394:	e037883a 	mov	sp,fp
   23398:	dfc00117 	ldw	ra,4(sp)
   2339c:	df000017 	ldw	fp,0(sp)
   233a0:	dec00204 	addi	sp,sp,8
   233a4:	f800283a 	ret

000233a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   233a8:	defffa04 	addi	sp,sp,-24
   233ac:	dfc00515 	stw	ra,20(sp)
   233b0:	df000415 	stw	fp,16(sp)
   233b4:	df000404 	addi	fp,sp,16
   233b8:	e13ffd15 	stw	r4,-12(fp)
   233bc:	e17ffe15 	stw	r5,-8(fp)
   233c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   233c4:	e0bffd17 	ldw	r2,-12(fp)
   233c8:	10800017 	ldw	r2,0(r2)
   233cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   233d0:	e0bffc17 	ldw	r2,-16(fp)
   233d4:	10c00a04 	addi	r3,r2,40
   233d8:	e0bffd17 	ldw	r2,-12(fp)
   233dc:	10800217 	ldw	r2,8(r2)
   233e0:	100f883a 	mov	r7,r2
   233e4:	e1bfff17 	ldw	r6,-4(fp)
   233e8:	e17ffe17 	ldw	r5,-8(fp)
   233ec:	1809883a 	mov	r4,r3
   233f0:	00234680 	call	23468 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   233f4:	e037883a 	mov	sp,fp
   233f8:	dfc00117 	ldw	ra,4(sp)
   233fc:	df000017 	ldw	fp,0(sp)
   23400:	dec00204 	addi	sp,sp,8
   23404:	f800283a 	ret

00023408 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23408:	defffa04 	addi	sp,sp,-24
   2340c:	dfc00515 	stw	ra,20(sp)
   23410:	df000415 	stw	fp,16(sp)
   23414:	df000404 	addi	fp,sp,16
   23418:	e13ffd15 	stw	r4,-12(fp)
   2341c:	e17ffe15 	stw	r5,-8(fp)
   23420:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23424:	e0bffd17 	ldw	r2,-12(fp)
   23428:	10800017 	ldw	r2,0(r2)
   2342c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23430:	e0bffc17 	ldw	r2,-16(fp)
   23434:	10c00a04 	addi	r3,r2,40
   23438:	e0bffd17 	ldw	r2,-12(fp)
   2343c:	10800217 	ldw	r2,8(r2)
   23440:	100f883a 	mov	r7,r2
   23444:	e1bfff17 	ldw	r6,-4(fp)
   23448:	e17ffe17 	ldw	r5,-8(fp)
   2344c:	1809883a 	mov	r4,r3
   23450:	00235540 	call	23554 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23454:	e037883a 	mov	sp,fp
   23458:	dfc00117 	ldw	ra,4(sp)
   2345c:	df000017 	ldw	fp,0(sp)
   23460:	dec00204 	addi	sp,sp,8
   23464:	f800283a 	ret

00023468 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23468:	defff704 	addi	sp,sp,-36
   2346c:	df000815 	stw	fp,32(sp)
   23470:	df000804 	addi	fp,sp,32
   23474:	e13ffc15 	stw	r4,-16(fp)
   23478:	e17ffd15 	stw	r5,-12(fp)
   2347c:	e1bffe15 	stw	r6,-8(fp)
   23480:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23484:	e0bffc17 	ldw	r2,-16(fp)
   23488:	10800017 	ldw	r2,0(r2)
   2348c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23490:	e0bffd17 	ldw	r2,-12(fp)
   23494:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23498:	e0bffe17 	ldw	r2,-8(fp)
   2349c:	e0fffd17 	ldw	r3,-12(fp)
   234a0:	1885883a 	add	r2,r3,r2
   234a4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   234a8:	00001206 	br	234f4 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   234ac:	e0bff917 	ldw	r2,-28(fp)
   234b0:	10800037 	ldwio	r2,0(r2)
   234b4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   234b8:	e0bffb17 	ldw	r2,-20(fp)
   234bc:	10a0000c 	andi	r2,r2,32768
   234c0:	10000626 	beq	r2,zero,234dc <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   234c4:	e0bff817 	ldw	r2,-32(fp)
   234c8:	10c00044 	addi	r3,r2,1
   234cc:	e0fff815 	stw	r3,-32(fp)
   234d0:	e0fffb17 	ldw	r3,-20(fp)
   234d4:	10c00005 	stb	r3,0(r2)
   234d8:	00000606 	br	234f4 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   234dc:	e0fff817 	ldw	r3,-32(fp)
   234e0:	e0bffd17 	ldw	r2,-12(fp)
   234e4:	1880071e 	bne	r3,r2,23504 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   234e8:	e0bfff17 	ldw	r2,-4(fp)
   234ec:	1090000c 	andi	r2,r2,16384
   234f0:	1000061e 	bne	r2,zero,2350c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   234f4:	e0fff817 	ldw	r3,-32(fp)
   234f8:	e0bffa17 	ldw	r2,-24(fp)
   234fc:	18bfeb36 	bltu	r3,r2,234ac <gameover+0xefee900c>
   23500:	00000306 	br	23510 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23504:	0001883a 	nop
   23508:	00000106 	br	23510 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   2350c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23510:	e0fff817 	ldw	r3,-32(fp)
   23514:	e0bffd17 	ldw	r2,-12(fp)
   23518:	18800426 	beq	r3,r2,2352c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   2351c:	e0fff817 	ldw	r3,-32(fp)
   23520:	e0bffd17 	ldw	r2,-12(fp)
   23524:	1885c83a 	sub	r2,r3,r2
   23528:	00000606 	br	23544 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   2352c:	e0bfff17 	ldw	r2,-4(fp)
   23530:	1090000c 	andi	r2,r2,16384
   23534:	10000226 	beq	r2,zero,23540 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23538:	00bffd44 	movi	r2,-11
   2353c:	00000106 	br	23544 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23540:	00bffec4 	movi	r2,-5
}
   23544:	e037883a 	mov	sp,fp
   23548:	df000017 	ldw	fp,0(sp)
   2354c:	dec00104 	addi	sp,sp,4
   23550:	f800283a 	ret

00023554 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23554:	defff904 	addi	sp,sp,-28
   23558:	df000615 	stw	fp,24(sp)
   2355c:	df000604 	addi	fp,sp,24
   23560:	e13ffc15 	stw	r4,-16(fp)
   23564:	e17ffd15 	stw	r5,-12(fp)
   23568:	e1bffe15 	stw	r6,-8(fp)
   2356c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23570:	e0bffc17 	ldw	r2,-16(fp)
   23574:	10800017 	ldw	r2,0(r2)
   23578:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   2357c:	e0bffe17 	ldw	r2,-8(fp)
   23580:	e0fffd17 	ldw	r3,-12(fp)
   23584:	1885883a 	add	r2,r3,r2
   23588:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   2358c:	00000e06 	br	235c8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   23590:	e0bffa17 	ldw	r2,-24(fp)
   23594:	10800104 	addi	r2,r2,4
   23598:	10800037 	ldwio	r2,0(r2)
   2359c:	10bfffec 	andhi	r2,r2,65535
   235a0:	10000926 	beq	r2,zero,235c8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   235a4:	e0fffa17 	ldw	r3,-24(fp)
   235a8:	e0bffd17 	ldw	r2,-12(fp)
   235ac:	11000044 	addi	r4,r2,1
   235b0:	e13ffd15 	stw	r4,-12(fp)
   235b4:	10800003 	ldbu	r2,0(r2)
   235b8:	10803fcc 	andi	r2,r2,255
   235bc:	1080201c 	xori	r2,r2,128
   235c0:	10bfe004 	addi	r2,r2,-128
   235c4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   235c8:	e0fffd17 	ldw	r3,-12(fp)
   235cc:	e0bffb17 	ldw	r2,-20(fp)
   235d0:	18bfef36 	bltu	r3,r2,23590 <gameover+0xefee90f0>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   235d4:	e0bffe17 	ldw	r2,-8(fp)
}
   235d8:	e037883a 	mov	sp,fp
   235dc:	df000017 	ldw	fp,0(sp)
   235e0:	dec00104 	addi	sp,sp,4
   235e4:	f800283a 	ret

000235e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235e8:	defffe04 	addi	sp,sp,-8
   235ec:	dfc00115 	stw	ra,4(sp)
   235f0:	df000015 	stw	fp,0(sp)
   235f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235f8:	d0a00b17 	ldw	r2,-32724(gp)
   235fc:	10000326 	beq	r2,zero,2360c <alt_get_errno+0x24>
   23600:	d0a00b17 	ldw	r2,-32724(gp)
   23604:	103ee83a 	callr	r2
   23608:	00000106 	br	23610 <alt_get_errno+0x28>
   2360c:	d0a0e204 	addi	r2,gp,-31864
}
   23610:	e037883a 	mov	sp,fp
   23614:	dfc00117 	ldw	ra,4(sp)
   23618:	df000017 	ldw	fp,0(sp)
   2361c:	dec00204 	addi	sp,sp,8
   23620:	f800283a 	ret

00023624 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   23624:	defffc04 	addi	sp,sp,-16
   23628:	df000315 	stw	fp,12(sp)
   2362c:	df000304 	addi	fp,sp,12
   23630:	e13ffe15 	stw	r4,-8(fp)
   23634:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   23638:	e0bffe17 	ldw	r2,-8(fp)
   2363c:	10800317 	ldw	r2,12(r2)
   23640:	10800037 	ldwio	r2,0(r2)
   23644:	1080040c 	andi	r2,r2,16
   23648:	10000226 	beq	r2,zero,23654 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   2364c:	00bffc04 	movi	r2,-16
   23650:	00003906 	br	23738 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   23654:	e0bffe17 	ldw	r2,-8(fp)
   23658:	10800317 	ldw	r2,12(r2)
   2365c:	10800404 	addi	r2,r2,16
   23660:	e0fffe17 	ldw	r3,-8(fp)
   23664:	18c00317 	ldw	r3,12(r3)
   23668:	18c00404 	addi	r3,r3,16
   2366c:	19000037 	ldwio	r4,0(r3)
   23670:	00fff7c4 	movi	r3,-33
   23674:	20c6703a 	and	r3,r4,r3
   23678:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   2367c:	e0bffe17 	ldw	r2,-8(fp)
   23680:	10800317 	ldw	r2,12(r2)
   23684:	00c03fc4 	movi	r3,255
   23688:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   2368c:	e0bffe17 	ldw	r2,-8(fp)
   23690:	10800317 	ldw	r2,12(r2)
   23694:	10800804 	addi	r2,r2,32
   23698:	e0ffff17 	ldw	r3,-4(fp)
   2369c:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   236a0:	e0bffe17 	ldw	r2,-8(fp)
   236a4:	10800917 	ldw	r2,36(r2)
   236a8:	10001126 	beq	r2,zero,236f0 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   236ac:	e0bffe17 	ldw	r2,-8(fp)
   236b0:	10800317 	ldw	r2,12(r2)
   236b4:	10800404 	addi	r2,r2,16
   236b8:	10800037 	ldwio	r2,0(r2)
   236bc:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   236c0:	e0bffe17 	ldw	r2,-8(fp)
   236c4:	10c00b17 	ldw	r3,44(r2)
   236c8:	e0bffd17 	ldw	r2,-12(fp)
   236cc:	1884b03a 	or	r2,r3,r2
   236d0:	10801814 	ori	r2,r2,96
   236d4:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   236d8:	e0bffe17 	ldw	r2,-8(fp)
   236dc:	10800317 	ldw	r2,12(r2)
   236e0:	10800404 	addi	r2,r2,16
   236e4:	e0fffd17 	ldw	r3,-12(fp)
   236e8:	10c00035 	stwio	r3,0(r2)
   236ec:	00001106 	br	23734 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   236f0:	e0bffe17 	ldw	r2,-8(fp)
   236f4:	10800317 	ldw	r2,12(r2)
   236f8:	10800404 	addi	r2,r2,16
   236fc:	10800037 	ldwio	r2,0(r2)
   23700:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   23704:	e0bffd17 	ldw	r2,-12(fp)
   23708:	10801814 	ori	r2,r2,96
   2370c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   23710:	e0fffd17 	ldw	r3,-12(fp)
   23714:	00bffbc4 	movi	r2,-17
   23718:	1884703a 	and	r2,r3,r2
   2371c:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   23720:	e0bffe17 	ldw	r2,-8(fp)
   23724:	10800317 	ldw	r2,12(r2)
   23728:	10800404 	addi	r2,r2,16
   2372c:	e0fffd17 	ldw	r3,-12(fp)
   23730:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   23734:	0005883a 	mov	r2,zero
}
   23738:	e037883a 	mov	sp,fp
   2373c:	df000017 	ldw	fp,0(sp)
   23740:	dec00104 	addi	sp,sp,4
   23744:	f800283a 	ret

00023748 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   23748:	defffc04 	addi	sp,sp,-16
   2374c:	df000315 	stw	fp,12(sp)
   23750:	df000304 	addi	fp,sp,12
   23754:	e13ffe15 	stw	r4,-8(fp)
   23758:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   2375c:	0001883a 	nop
   23760:	e0bffe17 	ldw	r2,-8(fp)
   23764:	10800317 	ldw	r2,12(r2)
   23768:	10800037 	ldwio	r2,0(r2)
   2376c:	1080040c 	andi	r2,r2,16
   23770:	103ffb1e 	bne	r2,zero,23760 <gameover+0xefee92c0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   23774:	e0bffe17 	ldw	r2,-8(fp)
   23778:	10800317 	ldw	r2,12(r2)
   2377c:	10800404 	addi	r2,r2,16
   23780:	e0fffe17 	ldw	r3,-8(fp)
   23784:	18c00317 	ldw	r3,12(r3)
   23788:	18c00404 	addi	r3,r3,16
   2378c:	19000037 	ldwio	r4,0(r3)
   23790:	00fff7c4 	movi	r3,-33
   23794:	20c6703a 	and	r3,r4,r3
   23798:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   2379c:	e0bffe17 	ldw	r2,-8(fp)
   237a0:	10800317 	ldw	r2,12(r2)
   237a4:	00c03fc4 	movi	r3,255
   237a8:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   237ac:	e0bffe17 	ldw	r2,-8(fp)
   237b0:	10800317 	ldw	r2,12(r2)
   237b4:	10800804 	addi	r2,r2,32
   237b8:	e0ffff17 	ldw	r3,-4(fp)
   237bc:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   237c0:	e0bffe17 	ldw	r2,-8(fp)
   237c4:	10800317 	ldw	r2,12(r2)
   237c8:	10800404 	addi	r2,r2,16
   237cc:	e0fffe17 	ldw	r3,-8(fp)
   237d0:	18c00317 	ldw	r3,12(r3)
   237d4:	18c00404 	addi	r3,r3,16
   237d8:	18c00037 	ldwio	r3,0(r3)
   237dc:	18c01814 	ori	r3,r3,96
   237e0:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   237e4:	0001883a 	nop
   237e8:	e0bffe17 	ldw	r2,-8(fp)
   237ec:	10800317 	ldw	r2,12(r2)
   237f0:	10800037 	ldwio	r2,0(r2)
   237f4:	1080040c 	andi	r2,r2,16
   237f8:	103ffb1e 	bne	r2,zero,237e8 <gameover+0xefee9348>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   237fc:	e0bffe17 	ldw	r2,-8(fp)
   23800:	10800317 	ldw	r2,12(r2)
   23804:	10800404 	addi	r2,r2,16
   23808:	e0fffe17 	ldw	r3,-8(fp)
   2380c:	18c00317 	ldw	r3,12(r3)
   23810:	18c00404 	addi	r3,r3,16
   23814:	19000037 	ldwio	r4,0(r3)
   23818:	00fff7c4 	movi	r3,-33
   2381c:	20c6703a 	and	r3,r4,r3
   23820:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   23824:	e0bffe17 	ldw	r2,-8(fp)
   23828:	10800317 	ldw	r2,12(r2)
   2382c:	10800037 	ldwio	r2,0(r2)
   23830:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   23834:	e0bffe17 	ldw	r2,-8(fp)
   23838:	10800317 	ldw	r2,12(r2)
   2383c:	00c03fc4 	movi	r3,255
   23840:	10c00035 	stwio	r3,0(r2)

  return status;
   23844:	e0bffd03 	ldbu	r2,-12(fp)
}
   23848:	e037883a 	mov	sp,fp
   2384c:	df000017 	ldw	fp,0(sp)
   23850:	dec00104 	addi	sp,sp,4
   23854:	f800283a 	ret

00023858 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   23858:	defff404 	addi	sp,sp,-48
   2385c:	dfc00b15 	stw	ra,44(sp)
   23860:	df000a15 	stw	fp,40(sp)
   23864:	df000a04 	addi	fp,sp,40
   23868:	e13ffb15 	stw	r4,-20(fp)
   2386c:	e17ffc15 	stw	r5,-16(fp)
   23870:	e1bffd15 	stw	r6,-12(fp)
   23874:	e1fffe15 	stw	r7,-8(fp)
   23878:	e0800217 	ldw	r2,8(fp)
   2387c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   23880:	e0bfff0b 	ldhu	r2,-4(fp)
   23884:	d8000415 	stw	zero,16(sp)
   23888:	d8000315 	stw	zero,12(sp)
   2388c:	e0c00417 	ldw	r3,16(fp)
   23890:	d8c00215 	stw	r3,8(sp)
   23894:	e0c00317 	ldw	r3,12(fp)
   23898:	d8c00115 	stw	r3,4(sp)
   2389c:	d8800015 	stw	r2,0(sp)
   238a0:	e1fffe17 	ldw	r7,-8(fp)
   238a4:	e1bffd17 	ldw	r6,-12(fp)
   238a8:	e17ffc17 	ldw	r5,-16(fp)
   238ac:	e13ffb17 	ldw	r4,-20(fp)
   238b0:	00238cc0 	call	238cc <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   238b4:	0001883a 	nop
   238b8:	e037883a 	mov	sp,fp
   238bc:	dfc00117 	ldw	ra,4(sp)
   238c0:	df000017 	ldw	fp,0(sp)
   238c4:	dec00204 	addi	sp,sp,8
   238c8:	f800283a 	ret

000238cc <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   238cc:	defff204 	addi	sp,sp,-56
   238d0:	dfc00d15 	stw	ra,52(sp)
   238d4:	df000c15 	stw	fp,48(sp)
   238d8:	df000c04 	addi	fp,sp,48
   238dc:	e13ffb15 	stw	r4,-20(fp)
   238e0:	e17ffc15 	stw	r5,-16(fp)
   238e4:	e1bffd15 	stw	r6,-12(fp)
   238e8:	e1fffe15 	stw	r7,-8(fp)
   238ec:	e0800217 	ldw	r2,8(fp)
   238f0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   238f4:	e0bfff0b 	ldhu	r2,-4(fp)
   238f8:	d8000615 	stw	zero,24(sp)
   238fc:	e0c00617 	ldw	r3,24(fp)
   23900:	d8c00515 	stw	r3,20(sp)
   23904:	e0c00517 	ldw	r3,20(fp)
   23908:	d8c00415 	stw	r3,16(sp)
   2390c:	e0c00417 	ldw	r3,16(fp)
   23910:	d8c00315 	stw	r3,12(sp)
   23914:	e0c00317 	ldw	r3,12(fp)
   23918:	d8c00215 	stw	r3,8(sp)
   2391c:	d8000115 	stw	zero,4(sp)
   23920:	d8800015 	stw	r2,0(sp)
   23924:	e1fffe17 	ldw	r7,-8(fp)
   23928:	e1bffd17 	ldw	r6,-12(fp)
   2392c:	e17ffc17 	ldw	r5,-16(fp)
   23930:	e13ffb17 	ldw	r4,-20(fp)
   23934:	0023e600 	call	23e60 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   23938:	0001883a 	nop
   2393c:	e037883a 	mov	sp,fp
   23940:	dfc00117 	ldw	ra,4(sp)
   23944:	df000017 	ldw	fp,0(sp)
   23948:	dec00204 	addi	sp,sp,8
   2394c:	f800283a 	ret

00023950 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   23950:	defff804 	addi	sp,sp,-32
   23954:	dfc00715 	stw	ra,28(sp)
   23958:	df000615 	stw	fp,24(sp)
   2395c:	df000604 	addi	fp,sp,24
   23960:	e13ffc15 	stw	r4,-16(fp)
   23964:	e17ffd15 	stw	r5,-12(fp)
   23968:	e1bffe15 	stw	r6,-8(fp)
   2396c:	3805883a 	mov	r2,r7
   23970:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   23974:	e0ffff0b 	ldhu	r3,-4(fp)
   23978:	d8000115 	stw	zero,4(sp)
   2397c:	e0800217 	ldw	r2,8(fp)
   23980:	d8800015 	stw	r2,0(sp)
   23984:	180f883a 	mov	r7,r3
   23988:	e1bffe17 	ldw	r6,-8(fp)
   2398c:	e17ffd17 	ldw	r5,-12(fp)
   23990:	e13ffc17 	ldw	r4,-16(fp)
   23994:	00239b00 	call	239b0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   23998:	0001883a 	nop
   2399c:	e037883a 	mov	sp,fp
   239a0:	dfc00117 	ldw	ra,4(sp)
   239a4:	df000017 	ldw	fp,0(sp)
   239a8:	dec00204 	addi	sp,sp,8
   239ac:	f800283a 	ret

000239b0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   239b0:	defff304 	addi	sp,sp,-52
   239b4:	dfc00c15 	stw	ra,48(sp)
   239b8:	df000b15 	stw	fp,44(sp)
   239bc:	df000b04 	addi	fp,sp,44
   239c0:	e13ffc15 	stw	r4,-16(fp)
   239c4:	e17ffd15 	stw	r5,-12(fp)
   239c8:	e1bffe15 	stw	r6,-8(fp)
   239cc:	3805883a 	mov	r2,r7
   239d0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   239d4:	e0bfff0b 	ldhu	r2,-4(fp)
   239d8:	d8000615 	stw	zero,24(sp)
   239dc:	e0c00317 	ldw	r3,12(fp)
   239e0:	d8c00515 	stw	r3,20(sp)
   239e4:	d8000415 	stw	zero,16(sp)
   239e8:	e0c00217 	ldw	r3,8(fp)
   239ec:	d8c00315 	stw	r3,12(sp)
   239f0:	d8000215 	stw	zero,8(sp)
   239f4:	d8000115 	stw	zero,4(sp)
   239f8:	d8800015 	stw	r2,0(sp)
   239fc:	e1fffe17 	ldw	r7,-8(fp)
   23a00:	000d883a 	mov	r6,zero
   23a04:	e17ffd17 	ldw	r5,-12(fp)
   23a08:	e13ffc17 	ldw	r4,-16(fp)
   23a0c:	0023e600 	call	23e60 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   23a10:	0001883a 	nop
   23a14:	e037883a 	mov	sp,fp
   23a18:	dfc00117 	ldw	ra,4(sp)
   23a1c:	df000017 	ldw	fp,0(sp)
   23a20:	dec00204 	addi	sp,sp,8
   23a24:	f800283a 	ret

00023a28 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   23a28:	defff404 	addi	sp,sp,-48
   23a2c:	dfc00b15 	stw	ra,44(sp)
   23a30:	df000a15 	stw	fp,40(sp)
   23a34:	df000a04 	addi	fp,sp,40
   23a38:	e13ffb15 	stw	r4,-20(fp)
   23a3c:	e17ffc15 	stw	r5,-16(fp)
   23a40:	e1bffd15 	stw	r6,-12(fp)
   23a44:	3807883a 	mov	r3,r7
   23a48:	e0800517 	ldw	r2,20(fp)
   23a4c:	e0fffe0d 	sth	r3,-8(fp)
   23a50:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   23a54:	e0fffe0b 	ldhu	r3,-8(fp)
   23a58:	e0bfff03 	ldbu	r2,-4(fp)
   23a5c:	d8800415 	stw	r2,16(sp)
   23a60:	d8000315 	stw	zero,12(sp)
   23a64:	e0800417 	ldw	r2,16(fp)
   23a68:	d8800215 	stw	r2,8(sp)
   23a6c:	e0800317 	ldw	r2,12(fp)
   23a70:	d8800115 	stw	r2,4(sp)
   23a74:	e0800217 	ldw	r2,8(fp)
   23a78:	d8800015 	stw	r2,0(sp)
   23a7c:	180f883a 	mov	r7,r3
   23a80:	e1bffd17 	ldw	r6,-12(fp)
   23a84:	e17ffc17 	ldw	r5,-16(fp)
   23a88:	e13ffb17 	ldw	r4,-20(fp)
   23a8c:	0023aa80 	call	23aa8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   23a90:	0001883a 	nop
   23a94:	e037883a 	mov	sp,fp
   23a98:	dfc00117 	ldw	ra,4(sp)
   23a9c:	df000017 	ldw	fp,0(sp)
   23aa0:	dec00204 	addi	sp,sp,8
   23aa4:	f800283a 	ret

00023aa8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   23aa8:	defff204 	addi	sp,sp,-56
   23aac:	dfc00d15 	stw	ra,52(sp)
   23ab0:	df000c15 	stw	fp,48(sp)
   23ab4:	df000c04 	addi	fp,sp,48
   23ab8:	e13ffb15 	stw	r4,-20(fp)
   23abc:	e17ffc15 	stw	r5,-16(fp)
   23ac0:	e1bffd15 	stw	r6,-12(fp)
   23ac4:	3807883a 	mov	r3,r7
   23ac8:	e0800617 	ldw	r2,24(fp)
   23acc:	e0fffe0d 	sth	r3,-8(fp)
   23ad0:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   23ad4:	e0bffe0b 	ldhu	r2,-8(fp)
   23ad8:	e0ffff03 	ldbu	r3,-4(fp)
   23adc:	d8c00615 	stw	r3,24(sp)
   23ae0:	d8000515 	stw	zero,20(sp)
   23ae4:	e0c00517 	ldw	r3,20(fp)
   23ae8:	d8c00415 	stw	r3,16(sp)
   23aec:	e0c00317 	ldw	r3,12(fp)
   23af0:	d8c00315 	stw	r3,12(sp)
   23af4:	e0c00217 	ldw	r3,8(fp)
   23af8:	d8c00215 	stw	r3,8(sp)
   23afc:	e0c00417 	ldw	r3,16(fp)
   23b00:	d8c00115 	stw	r3,4(sp)
   23b04:	d8800015 	stw	r2,0(sp)
   23b08:	000f883a 	mov	r7,zero
   23b0c:	e1bffd17 	ldw	r6,-12(fp)
   23b10:	e17ffc17 	ldw	r5,-16(fp)
   23b14:	e13ffb17 	ldw	r4,-20(fp)
   23b18:	0023e600 	call	23e60 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   23b1c:	0001883a 	nop
   23b20:	e037883a 	mov	sp,fp
   23b24:	dfc00117 	ldw	ra,4(sp)
   23b28:	df000017 	ldw	fp,0(sp)
   23b2c:	dec00204 	addi	sp,sp,8
   23b30:	f800283a 	ret

00023b34 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   23b34:	defffb04 	addi	sp,sp,-20
   23b38:	df000415 	stw	fp,16(sp)
   23b3c:	df000404 	addi	fp,sp,16
   23b40:	e13ffc15 	stw	r4,-16(fp)
   23b44:	e17ffd15 	stw	r5,-12(fp)
   23b48:	e1bffe15 	stw	r6,-8(fp)
   23b4c:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   23b50:	e0bffc17 	ldw	r2,-16(fp)
   23b54:	e0fffd17 	ldw	r3,-12(fp)
   23b58:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   23b5c:	e0bffc17 	ldw	r2,-16(fp)
   23b60:	e0ffff17 	ldw	r3,-4(fp)
   23b64:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   23b68:	e0bffc17 	ldw	r2,-16(fp)
   23b6c:	e0fffe17 	ldw	r3,-8(fp)
   23b70:	10c00b15 	stw	r3,44(r2)
}
   23b74:	0001883a 	nop
   23b78:	e037883a 	mov	sp,fp
   23b7c:	df000017 	ldw	fp,0(sp)
   23b80:	dec00104 	addi	sp,sp,4
   23b84:	f800283a 	ret

00023b88 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   23b88:	defffd04 	addi	sp,sp,-12
   23b8c:	df000215 	stw	fp,8(sp)
   23b90:	df000204 	addi	fp,sp,8
   23b94:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   23b98:	e0bfff17 	ldw	r2,-4(fp)
   23b9c:	10800317 	ldw	r2,12(r2)
   23ba0:	10800404 	addi	r2,r2,16
   23ba4:	10800037 	ldwio	r2,0(r2)
   23ba8:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   23bac:	e0bffe17 	ldw	r2,-8(fp)
   23bb0:	10800814 	ori	r2,r2,32
   23bb4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   23bb8:	e0bfff17 	ldw	r2,-4(fp)
   23bbc:	10800317 	ldw	r2,12(r2)
   23bc0:	10800404 	addi	r2,r2,16
   23bc4:	e0fffe17 	ldw	r3,-8(fp)
   23bc8:	10c00035 	stwio	r3,0(r2)
}
   23bcc:	0001883a 	nop
   23bd0:	e037883a 	mov	sp,fp
   23bd4:	df000017 	ldw	fp,0(sp)
   23bd8:	dec00104 	addi	sp,sp,4
   23bdc:	f800283a 	ret

00023be0 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   23be0:	defffd04 	addi	sp,sp,-12
   23be4:	df000215 	stw	fp,8(sp)
   23be8:	df000204 	addi	fp,sp,8
   23bec:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   23bf0:	e0bfff17 	ldw	r2,-4(fp)
   23bf4:	10800317 	ldw	r2,12(r2)
   23bf8:	10800404 	addi	r2,r2,16
   23bfc:	10800037 	ldwio	r2,0(r2)
   23c00:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   23c04:	e0fffe17 	ldw	r3,-8(fp)
   23c08:	00bff7c4 	movi	r2,-33
   23c0c:	1884703a 	and	r2,r3,r2
   23c10:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   23c14:	e0bfff17 	ldw	r2,-4(fp)
   23c18:	10800317 	ldw	r2,12(r2)
   23c1c:	10800404 	addi	r2,r2,16
   23c20:	e0fffe17 	ldw	r3,-8(fp)
   23c24:	10c00035 	stwio	r3,0(r2)
}
   23c28:	0001883a 	nop
   23c2c:	e037883a 	mov	sp,fp
   23c30:	df000017 	ldw	fp,0(sp)
   23c34:	dec00104 	addi	sp,sp,4
   23c38:	f800283a 	ret

00023c3c <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   23c3c:	defffe04 	addi	sp,sp,-8
   23c40:	df000115 	stw	fp,4(sp)
   23c44:	df000104 	addi	fp,sp,4
   23c48:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   23c4c:	e0bfff17 	ldw	r2,-4(fp)
   23c50:	10800784 	addi	r2,r2,30
   23c54:	10800023 	ldbuio	r2,0(r2)
   23c58:	10803fcc 	andi	r2,r2,255
   23c5c:	10801fcc 	andi	r2,r2,127
   23c60:	10000226 	beq	r2,zero,23c6c <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   23c64:	00bffec4 	movi	r2,-5
   23c68:	00000906 	br	23c90 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   23c6c:	e0bfff17 	ldw	r2,-4(fp)
   23c70:	108007c4 	addi	r2,r2,31
   23c74:	10800023 	ldbuio	r2,0(r2)
   23c78:	10803fcc 	andi	r2,r2,255
   23c7c:	1080200c 	andi	r2,r2,128
   23c80:	10000226 	beq	r2,zero,23c8c <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   23c84:	00bfe244 	movi	r2,-119
   23c88:	00000106 	br	23c90 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   23c8c:	0005883a 	mov	r2,zero
}
   23c90:	e037883a 	mov	sp,fp
   23c94:	df000017 	ldw	fp,0(sp)
   23c98:	dec00104 	addi	sp,sp,4
   23c9c:	f800283a 	ret

00023ca0 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   23ca0:	defffc04 	addi	sp,sp,-16
   23ca4:	dfc00315 	stw	ra,12(sp)
   23ca8:	df000215 	stw	fp,8(sp)
   23cac:	df000204 	addi	fp,sp,8
   23cb0:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   23cb4:	d1600404 	addi	r5,gp,-32752
   23cb8:	e13fff17 	ldw	r4,-4(fp)
   23cbc:	00245e40 	call	245e4 <alt_find_dev>
   23cc0:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   23cc4:	e0bffe17 	ldw	r2,-8(fp)
   23cc8:	1000041e 	bne	r2,zero,23cdc <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   23ccc:	00235e80 	call	235e8 <alt_get_errno>
   23cd0:	1007883a 	mov	r3,r2
   23cd4:	008004c4 	movi	r2,19
   23cd8:	18800015 	stw	r2,0(r3)
  }

  return dev;
   23cdc:	e0bffe17 	ldw	r2,-8(fp)
}
   23ce0:	e037883a 	mov	sp,fp
   23ce4:	dfc00117 	ldw	ra,4(sp)
   23ce8:	df000017 	ldw	fp,0(sp)
   23cec:	dec00204 	addi	sp,sp,8
   23cf0:	f800283a 	ret

00023cf4 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   23cf4:	defff104 	addi	sp,sp,-60
   23cf8:	dfc00e15 	stw	ra,56(sp)
   23cfc:	df000d15 	stw	fp,52(sp)
   23d00:	df000d04 	addi	fp,sp,52
   23d04:	e13ffa15 	stw	r4,-24(fp)
   23d08:	e17ffb15 	stw	r5,-20(fp)
   23d0c:	e1bffc15 	stw	r6,-16(fp)
   23d10:	e1fffd15 	stw	r7,-12(fp)
   23d14:	e0c00217 	ldw	r3,8(fp)
   23d18:	e0800617 	ldw	r2,24(fp)
   23d1c:	e0fffe0d 	sth	r3,-8(fp)
   23d20:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   23d24:	e0bffe0b 	ldhu	r2,-8(fp)
   23d28:	e0ffff03 	ldbu	r3,-4(fp)
   23d2c:	d8c00615 	stw	r3,24(sp)
   23d30:	d8000515 	stw	zero,20(sp)
   23d34:	d8000415 	stw	zero,16(sp)
   23d38:	e0c00517 	ldw	r3,20(fp)
   23d3c:	d8c00315 	stw	r3,12(sp)
   23d40:	e0c00417 	ldw	r3,16(fp)
   23d44:	d8c00215 	stw	r3,8(sp)
   23d48:	e0c00317 	ldw	r3,12(fp)
   23d4c:	d8c00115 	stw	r3,4(sp)
   23d50:	d8800015 	stw	r2,0(sp)
   23d54:	e1fffd17 	ldw	r7,-12(fp)
   23d58:	e1bffc17 	ldw	r6,-16(fp)
   23d5c:	e17ffb17 	ldw	r5,-20(fp)
   23d60:	e13ffa17 	ldw	r4,-24(fp)
   23d64:	0023e600 	call	23e60 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   23d68:	0001883a 	nop
   23d6c:	e037883a 	mov	sp,fp
   23d70:	dfc00117 	ldw	ra,4(sp)
   23d74:	df000017 	ldw	fp,0(sp)
   23d78:	dec00204 	addi	sp,sp,8
   23d7c:	f800283a 	ret

00023d80 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   23d80:	defffc04 	addi	sp,sp,-16
   23d84:	df000315 	stw	fp,12(sp)
   23d88:	df000304 	addi	fp,sp,12
   23d8c:	e13ffe15 	stw	r4,-8(fp)
   23d90:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   23d94:	e0bffe17 	ldw	r2,-8(fp)
   23d98:	10800317 	ldw	r2,12(r2)
   23d9c:	10800404 	addi	r2,r2,16
   23da0:	10800037 	ldwio	r2,0(r2)
   23da4:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   23da8:	e0fffd17 	ldw	r3,-12(fp)
   23dac:	00a00434 	movhi	r2,32784
   23db0:	10bfffc4 	addi	r2,r2,-1
   23db4:	1884703a 	and	r2,r3,r2
   23db8:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   23dbc:	e0bfff17 	ldw	r2,-4(fp)
   23dc0:	1004953a 	slli	r2,r2,20
   23dc4:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   23dc8:	e0bffd17 	ldw	r2,-12(fp)
   23dcc:	1884b03a 	or	r2,r3,r2
   23dd0:	10800134 	orhi	r2,r2,4
   23dd4:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   23dd8:	e0bffe17 	ldw	r2,-8(fp)
   23ddc:	10800317 	ldw	r2,12(r2)
   23de0:	10800404 	addi	r2,r2,16
   23de4:	e0fffd17 	ldw	r3,-12(fp)
   23de8:	10c00035 	stwio	r3,0(r2)
  
  return;
   23dec:	0001883a 	nop
}
   23df0:	e037883a 	mov	sp,fp
   23df4:	df000017 	ldw	fp,0(sp)
   23df8:	dec00104 	addi	sp,sp,4
   23dfc:	f800283a 	ret

00023e00 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   23e00:	defffd04 	addi	sp,sp,-12
   23e04:	df000215 	stw	fp,8(sp)
   23e08:	df000204 	addi	fp,sp,8
   23e0c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   23e10:	e0bfff17 	ldw	r2,-4(fp)
   23e14:	10800317 	ldw	r2,12(r2)
   23e18:	10800404 	addi	r2,r2,16
   23e1c:	10800037 	ldwio	r2,0(r2)
   23e20:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   23e24:	e0fffe17 	ldw	r3,-8(fp)
   23e28:	00bfff34 	movhi	r2,65532
   23e2c:	10bfffc4 	addi	r2,r2,-1
   23e30:	1884703a 	and	r2,r3,r2
   23e34:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   23e38:	e0bfff17 	ldw	r2,-4(fp)
   23e3c:	10800317 	ldw	r2,12(r2)
   23e40:	10800404 	addi	r2,r2,16
   23e44:	e0fffe17 	ldw	r3,-8(fp)
   23e48:	10c00035 	stwio	r3,0(r2)
  
  return;
   23e4c:	0001883a 	nop
}
   23e50:	e037883a 	mov	sp,fp
   23e54:	df000017 	ldw	fp,0(sp)
   23e58:	dec00104 	addi	sp,sp,4
   23e5c:	f800283a 	ret

00023e60 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   23e60:	defff804 	addi	sp,sp,-32
   23e64:	dfc00715 	stw	ra,28(sp)
   23e68:	df000615 	stw	fp,24(sp)
   23e6c:	df000604 	addi	fp,sp,24
   23e70:	e13ffa15 	stw	r4,-24(fp)
   23e74:	e17ffb15 	stw	r5,-20(fp)
   23e78:	e1bffc15 	stw	r6,-16(fp)
   23e7c:	e1fffd15 	stw	r7,-12(fp)
   23e80:	e0c00217 	ldw	r3,8(fp)
   23e84:	e0800817 	ldw	r2,32(fp)
   23e88:	e0fffe0d 	sth	r3,-8(fp)
   23e8c:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   23e90:	e0bffb17 	ldw	r2,-20(fp)
   23e94:	108007c4 	addi	r2,r2,31
   23e98:	e0fffb17 	ldw	r3,-20(fp)
   23e9c:	18c007c3 	ldbu	r3,31(r3)
   23ea0:	19003fcc 	andi	r4,r3,255
   23ea4:	00ffdfc4 	movi	r3,-129
   23ea8:	20c6703a 	and	r3,r4,r3
   23eac:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   23eb0:	e0bffa17 	ldw	r2,-24(fp)
   23eb4:	e0fffc17 	ldw	r3,-16(fp)
   23eb8:	19403fcc 	andi	r5,r3,255
   23ebc:	10c00003 	ldbu	r3,0(r2)
   23ec0:	1806703a 	and	r3,r3,zero
   23ec4:	1809883a 	mov	r4,r3
   23ec8:	2807883a 	mov	r3,r5
   23ecc:	20c6b03a 	or	r3,r4,r3
   23ed0:	10c00005 	stb	r3,0(r2)
   23ed4:	e0fffc17 	ldw	r3,-16(fp)
   23ed8:	1806d23a 	srli	r3,r3,8
   23edc:	19403fcc 	andi	r5,r3,255
   23ee0:	10c00043 	ldbu	r3,1(r2)
   23ee4:	1806703a 	and	r3,r3,zero
   23ee8:	1809883a 	mov	r4,r3
   23eec:	2807883a 	mov	r3,r5
   23ef0:	20c6b03a 	or	r3,r4,r3
   23ef4:	10c00045 	stb	r3,1(r2)
   23ef8:	e0fffc17 	ldw	r3,-16(fp)
   23efc:	1806d43a 	srli	r3,r3,16
   23f00:	19403fcc 	andi	r5,r3,255
   23f04:	10c00083 	ldbu	r3,2(r2)
   23f08:	1806703a 	and	r3,r3,zero
   23f0c:	1809883a 	mov	r4,r3
   23f10:	2807883a 	mov	r3,r5
   23f14:	20c6b03a 	or	r3,r4,r3
   23f18:	10c00085 	stb	r3,2(r2)
   23f1c:	e0fffc17 	ldw	r3,-16(fp)
   23f20:	180ad63a 	srli	r5,r3,24
   23f24:	10c000c3 	ldbu	r3,3(r2)
   23f28:	1806703a 	and	r3,r3,zero
   23f2c:	1809883a 	mov	r4,r3
   23f30:	2807883a 	mov	r3,r5
   23f34:	20c6b03a 	or	r3,r4,r3
   23f38:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   23f3c:	e0bffa17 	ldw	r2,-24(fp)
   23f40:	e0fffd17 	ldw	r3,-12(fp)
   23f44:	19403fcc 	andi	r5,r3,255
   23f48:	10c00203 	ldbu	r3,8(r2)
   23f4c:	1806703a 	and	r3,r3,zero
   23f50:	1809883a 	mov	r4,r3
   23f54:	2807883a 	mov	r3,r5
   23f58:	20c6b03a 	or	r3,r4,r3
   23f5c:	10c00205 	stb	r3,8(r2)
   23f60:	e0fffd17 	ldw	r3,-12(fp)
   23f64:	1806d23a 	srli	r3,r3,8
   23f68:	19403fcc 	andi	r5,r3,255
   23f6c:	10c00243 	ldbu	r3,9(r2)
   23f70:	1806703a 	and	r3,r3,zero
   23f74:	1809883a 	mov	r4,r3
   23f78:	2807883a 	mov	r3,r5
   23f7c:	20c6b03a 	or	r3,r4,r3
   23f80:	10c00245 	stb	r3,9(r2)
   23f84:	e0fffd17 	ldw	r3,-12(fp)
   23f88:	1806d43a 	srli	r3,r3,16
   23f8c:	19403fcc 	andi	r5,r3,255
   23f90:	10c00283 	ldbu	r3,10(r2)
   23f94:	1806703a 	and	r3,r3,zero
   23f98:	1809883a 	mov	r4,r3
   23f9c:	2807883a 	mov	r3,r5
   23fa0:	20c6b03a 	or	r3,r4,r3
   23fa4:	10c00285 	stb	r3,10(r2)
   23fa8:	e0fffd17 	ldw	r3,-12(fp)
   23fac:	180ad63a 	srli	r5,r3,24
   23fb0:	10c002c3 	ldbu	r3,11(r2)
   23fb4:	1806703a 	and	r3,r3,zero
   23fb8:	1809883a 	mov	r4,r3
   23fbc:	2807883a 	mov	r3,r5
   23fc0:	20c6b03a 	or	r3,r4,r3
   23fc4:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   23fc8:	e0bffa17 	ldw	r2,-24(fp)
   23fcc:	e0fffb17 	ldw	r3,-20(fp)
   23fd0:	19403fcc 	andi	r5,r3,255
   23fd4:	10c00403 	ldbu	r3,16(r2)
   23fd8:	1806703a 	and	r3,r3,zero
   23fdc:	1809883a 	mov	r4,r3
   23fe0:	2807883a 	mov	r3,r5
   23fe4:	20c6b03a 	or	r3,r4,r3
   23fe8:	10c00405 	stb	r3,16(r2)
   23fec:	e0fffb17 	ldw	r3,-20(fp)
   23ff0:	1806d23a 	srli	r3,r3,8
   23ff4:	19403fcc 	andi	r5,r3,255
   23ff8:	10c00443 	ldbu	r3,17(r2)
   23ffc:	1806703a 	and	r3,r3,zero
   24000:	1809883a 	mov	r4,r3
   24004:	2807883a 	mov	r3,r5
   24008:	20c6b03a 	or	r3,r4,r3
   2400c:	10c00445 	stb	r3,17(r2)
   24010:	e0fffb17 	ldw	r3,-20(fp)
   24014:	1806d43a 	srli	r3,r3,16
   24018:	19403fcc 	andi	r5,r3,255
   2401c:	10c00483 	ldbu	r3,18(r2)
   24020:	1806703a 	and	r3,r3,zero
   24024:	1809883a 	mov	r4,r3
   24028:	2807883a 	mov	r3,r5
   2402c:	20c6b03a 	or	r3,r4,r3
   24030:	10c00485 	stb	r3,18(r2)
   24034:	e0fffb17 	ldw	r3,-20(fp)
   24038:	180ad63a 	srli	r5,r3,24
   2403c:	10c004c3 	ldbu	r3,19(r2)
   24040:	1806703a 	and	r3,r3,zero
   24044:	1809883a 	mov	r4,r3
   24048:	2807883a 	mov	r3,r5
   2404c:	20c6b03a 	or	r3,r4,r3
   24050:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   24054:	e0bffa17 	ldw	r2,-24(fp)
   24058:	10c00103 	ldbu	r3,4(r2)
   2405c:	1806703a 	and	r3,r3,zero
   24060:	10c00105 	stb	r3,4(r2)
   24064:	10c00143 	ldbu	r3,5(r2)
   24068:	1806703a 	and	r3,r3,zero
   2406c:	10c00145 	stb	r3,5(r2)
   24070:	10c00183 	ldbu	r3,6(r2)
   24074:	1806703a 	and	r3,r3,zero
   24078:	10c00185 	stb	r3,6(r2)
   2407c:	10c001c3 	ldbu	r3,7(r2)
   24080:	1806703a 	and	r3,r3,zero
   24084:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   24088:	e0bffa17 	ldw	r2,-24(fp)
   2408c:	10c00303 	ldbu	r3,12(r2)
   24090:	1806703a 	and	r3,r3,zero
   24094:	10c00305 	stb	r3,12(r2)
   24098:	10c00343 	ldbu	r3,13(r2)
   2409c:	1806703a 	and	r3,r3,zero
   240a0:	10c00345 	stb	r3,13(r2)
   240a4:	10c00383 	ldbu	r3,14(r2)
   240a8:	1806703a 	and	r3,r3,zero
   240ac:	10c00385 	stb	r3,14(r2)
   240b0:	10c003c3 	ldbu	r3,15(r2)
   240b4:	1806703a 	and	r3,r3,zero
   240b8:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   240bc:	e0bffa17 	ldw	r2,-24(fp)
   240c0:	10c00503 	ldbu	r3,20(r2)
   240c4:	1806703a 	and	r3,r3,zero
   240c8:	10c00505 	stb	r3,20(r2)
   240cc:	10c00543 	ldbu	r3,21(r2)
   240d0:	1806703a 	and	r3,r3,zero
   240d4:	10c00545 	stb	r3,21(r2)
   240d8:	10c00583 	ldbu	r3,22(r2)
   240dc:	1806703a 	and	r3,r3,zero
   240e0:	10c00585 	stb	r3,22(r2)
   240e4:	10c005c3 	ldbu	r3,23(r2)
   240e8:	1806703a 	and	r3,r3,zero
   240ec:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   240f0:	e0bffa17 	ldw	r2,-24(fp)
   240f4:	e0fffe17 	ldw	r3,-8(fp)
   240f8:	19403fcc 	andi	r5,r3,255
   240fc:	10c00603 	ldbu	r3,24(r2)
   24100:	1806703a 	and	r3,r3,zero
   24104:	1809883a 	mov	r4,r3
   24108:	2807883a 	mov	r3,r5
   2410c:	20c6b03a 	or	r3,r4,r3
   24110:	10c00605 	stb	r3,24(r2)
   24114:	e0fffe17 	ldw	r3,-8(fp)
   24118:	1806d23a 	srli	r3,r3,8
   2411c:	19403fcc 	andi	r5,r3,255
   24120:	10c00643 	ldbu	r3,25(r2)
   24124:	1806703a 	and	r3,r3,zero
   24128:	1809883a 	mov	r4,r3
   2412c:	2807883a 	mov	r3,r5
   24130:	20c6b03a 	or	r3,r4,r3
   24134:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   24138:	e0bffa17 	ldw	r2,-24(fp)
   2413c:	10c00703 	ldbu	r3,28(r2)
   24140:	1806703a 	and	r3,r3,zero
   24144:	10c00705 	stb	r3,28(r2)
   24148:	10c00743 	ldbu	r3,29(r2)
   2414c:	1806703a 	and	r3,r3,zero
   24150:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   24154:	e0bffa17 	ldw	r2,-24(fp)
   24158:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   2415c:	e0800617 	ldw	r2,24(fp)
   24160:	1007883a 	mov	r3,r2
   24164:	e0bffa17 	ldw	r2,-24(fp)
   24168:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   2416c:	e0800717 	ldw	r2,28(fp)
   24170:	1007883a 	mov	r3,r2
   24174:	e0bffa17 	ldw	r2,-24(fp)
   24178:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   2417c:	e0800317 	ldw	r2,12(fp)
   24180:	10000226 	beq	r2,zero,2418c <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   24184:	00bfe044 	movi	r2,-127
   24188:	00000106 	br	24190 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   2418c:	00bfe004 	movi	r2,-128
   24190:	e0c00417 	ldw	r3,16(fp)
   24194:	18000226 	beq	r3,zero,241a0 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   24198:	00c00084 	movi	r3,2
   2419c:	00000106 	br	241a4 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   241a0:	0007883a 	mov	r3,zero
   241a4:	10c4b03a 	or	r2,r2,r3
   241a8:	1007883a 	mov	r3,r2
   241ac:	e0800517 	ldw	r2,20(fp)
   241b0:	10000226 	beq	r2,zero,241bc <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   241b4:	00800104 	movi	r2,4
   241b8:	00000106 	br	241c0 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   241bc:	0005883a 	mov	r2,zero
   241c0:	1884b03a 	or	r2,r3,r2
   241c4:	1007883a 	mov	r3,r2
   241c8:	e0bfff03 	ldbu	r2,-4(fp)
   241cc:	10000426 	beq	r2,zero,241e0 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   241d0:	e0bfff03 	ldbu	r2,-4(fp)
   241d4:	108003cc 	andi	r2,r2,15
   241d8:	100490fa 	slli	r2,r2,3
   241dc:	00000106 	br	241e4 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   241e0:	0005883a 	mov	r2,zero
   241e4:	1884b03a 	or	r2,r3,r2
   241e8:	1007883a 	mov	r3,r2
   241ec:	e0bffa17 	ldw	r2,-24(fp)
   241f0:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   241f4:	01400804 	movi	r5,32
   241f8:	e13ffa17 	ldw	r4,-24(fp)
   241fc:	00244900 	call	24490 <alt_dcache_flush>
}
   24200:	0001883a 	nop
   24204:	e037883a 	mov	sp,fp
   24208:	dfc00117 	ldw	ra,4(sp)
   2420c:	df000017 	ldw	fp,0(sp)
   24210:	dec00204 	addi	sp,sp,8
   24214:	f800283a 	ret

00024218 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   24218:	defff904 	addi	sp,sp,-28
   2421c:	dfc00615 	stw	ra,24(sp)
   24220:	df000515 	stw	fp,20(sp)
   24224:	df000504 	addi	fp,sp,20
   24228:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   2422c:	e0bfff17 	ldw	r2,-4(fp)
   24230:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   24234:	e0bffb17 	ldw	r2,-20(fp)
   24238:	10800317 	ldw	r2,12(r2)
   2423c:	10800404 	addi	r2,r2,16
   24240:	e0fffb17 	ldw	r3,-20(fp)
   24244:	18c00317 	ldw	r3,12(r3)
   24248:	18c00404 	addi	r3,r3,16
   2424c:	18c00037 	ldwio	r3,0(r3)
   24250:	18e00034 	orhi	r3,r3,32768
   24254:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   24258:	e0bffb17 	ldw	r2,-20(fp)
   2425c:	10800317 	ldw	r2,12(r2)
   24260:	10800404 	addi	r2,r2,16
   24264:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   24268:	e0bffb17 	ldw	r2,-20(fp)
   2426c:	10800917 	ldw	r2,36(r2)
   24270:	10001226 	beq	r2,zero,242bc <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24274:	0005303a 	rdctl	r2,status
   24278:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2427c:	e0fffd17 	ldw	r3,-12(fp)
   24280:	00bfff84 	movi	r2,-2
   24284:	1884703a 	and	r2,r3,r2
   24288:	1001703a 	wrctl	status,r2
  
  return context;
   2428c:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   24290:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   24294:	e0bffb17 	ldw	r2,-20(fp)
   24298:	10800917 	ldw	r2,36(r2)
   2429c:	e0fffb17 	ldw	r3,-20(fp)
   242a0:	18c00a17 	ldw	r3,40(r3)
   242a4:	1809883a 	mov	r4,r3
   242a8:	103ee83a 	callr	r2
   242ac:	e0bffc17 	ldw	r2,-16(fp)
   242b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242b4:	e0bffe17 	ldw	r2,-8(fp)
   242b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   242bc:	0001883a 	nop
   242c0:	e037883a 	mov	sp,fp
   242c4:	dfc00117 	ldw	ra,4(sp)
   242c8:	df000017 	ldw	fp,0(sp)
   242cc:	dec00204 	addi	sp,sp,8
   242d0:	f800283a 	ret

000242d4 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   242d4:	defffa04 	addi	sp,sp,-24
   242d8:	dfc00515 	stw	ra,20(sp)
   242dc:	df000415 	stw	fp,16(sp)
   242e0:	df000404 	addi	fp,sp,16
   242e4:	e13ffd15 	stw	r4,-12(fp)
   242e8:	e17ffe15 	stw	r5,-8(fp)
   242ec:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   242f0:	e0bffd17 	ldw	r2,-12(fp)
   242f4:	10800317 	ldw	r2,12(r2)
   242f8:	10800404 	addi	r2,r2,16
   242fc:	00c00074 	movhi	r3,1
   24300:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   24304:	e0bffd17 	ldw	r2,-12(fp)
   24308:	10800317 	ldw	r2,12(r2)
   2430c:	10800404 	addi	r2,r2,16
   24310:	00c00074 	movhi	r3,1
   24314:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   24318:	e0bffd17 	ldw	r2,-12(fp)
   2431c:	10800317 	ldw	r2,12(r2)
   24320:	10800404 	addi	r2,r2,16
   24324:	0007883a 	mov	r3,zero
   24328:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   2432c:	e0bffd17 	ldw	r2,-12(fp)
   24330:	10800317 	ldw	r2,12(r2)
   24334:	00c03fc4 	movi	r3,255
   24338:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   2433c:	d1600404 	addi	r5,gp,-32752
   24340:	e13ffd17 	ldw	r4,-12(fp)
   24344:	00245400 	call	24540 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   24348:	d8000015 	stw	zero,0(sp)
   2434c:	e1fffd17 	ldw	r7,-12(fp)
   24350:	018000b4 	movhi	r6,2
   24354:	31908604 	addi	r6,r6,16920
   24358:	e17fff17 	ldw	r5,-4(fp)
   2435c:	e13ffe17 	ldw	r4,-8(fp)
   24360:	00246940 	call	24694 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   24364:	0001883a 	nop
   24368:	e037883a 	mov	sp,fp
   2436c:	dfc00117 	ldw	ra,4(sp)
   24370:	df000017 	ldw	fp,0(sp)
   24374:	dec00204 	addi	sp,sp,8
   24378:	f800283a 	ret

0002437c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2437c:	defffe04 	addi	sp,sp,-8
   24380:	dfc00115 	stw	ra,4(sp)
   24384:	df000015 	stw	fp,0(sp)
   24388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2438c:	d0a00b17 	ldw	r2,-32724(gp)
   24390:	10000326 	beq	r2,zero,243a0 <alt_get_errno+0x24>
   24394:	d0a00b17 	ldw	r2,-32724(gp)
   24398:	103ee83a 	callr	r2
   2439c:	00000106 	br	243a4 <alt_get_errno+0x28>
   243a0:	d0a0e204 	addi	r2,gp,-31864
}
   243a4:	e037883a 	mov	sp,fp
   243a8:	dfc00117 	ldw	ra,4(sp)
   243ac:	df000017 	ldw	fp,0(sp)
   243b0:	dec00204 	addi	sp,sp,8
   243b4:	f800283a 	ret

000243b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   243b8:	defffb04 	addi	sp,sp,-20
   243bc:	dfc00415 	stw	ra,16(sp)
   243c0:	df000315 	stw	fp,12(sp)
   243c4:	df000304 	addi	fp,sp,12
   243c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   243cc:	e0bfff17 	ldw	r2,-4(fp)
   243d0:	10000816 	blt	r2,zero,243f4 <close+0x3c>
   243d4:	01400304 	movi	r5,12
   243d8:	e13fff17 	ldw	r4,-4(fp)
   243dc:	00225b40 	call	225b4 <__mulsi3>
   243e0:	1007883a 	mov	r3,r2
   243e4:	008000b4 	movhi	r2,2
   243e8:	1096a904 	addi	r2,r2,23204
   243ec:	1885883a 	add	r2,r3,r2
   243f0:	00000106 	br	243f8 <close+0x40>
   243f4:	0005883a 	mov	r2,zero
   243f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   243fc:	e0bffd17 	ldw	r2,-12(fp)
   24400:	10001926 	beq	r2,zero,24468 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   24404:	e0bffd17 	ldw	r2,-12(fp)
   24408:	10800017 	ldw	r2,0(r2)
   2440c:	10800417 	ldw	r2,16(r2)
   24410:	10000626 	beq	r2,zero,2442c <close+0x74>
   24414:	e0bffd17 	ldw	r2,-12(fp)
   24418:	10800017 	ldw	r2,0(r2)
   2441c:	10800417 	ldw	r2,16(r2)
   24420:	e13ffd17 	ldw	r4,-12(fp)
   24424:	103ee83a 	callr	r2
   24428:	00000106 	br	24430 <close+0x78>
   2442c:	0005883a 	mov	r2,zero
   24430:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24434:	e13fff17 	ldw	r4,-4(fp)
   24438:	0024d180 	call	24d18 <alt_release_fd>
    if (rval < 0)
   2443c:	e0bffe17 	ldw	r2,-8(fp)
   24440:	1000070e 	bge	r2,zero,24460 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   24444:	002437c0 	call	2437c <alt_get_errno>
   24448:	1007883a 	mov	r3,r2
   2444c:	e0bffe17 	ldw	r2,-8(fp)
   24450:	0085c83a 	sub	r2,zero,r2
   24454:	18800015 	stw	r2,0(r3)
      return -1;
   24458:	00bfffc4 	movi	r2,-1
   2445c:	00000706 	br	2447c <close+0xc4>
    }
    return 0;
   24460:	0005883a 	mov	r2,zero
   24464:	00000506 	br	2447c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24468:	002437c0 	call	2437c <alt_get_errno>
   2446c:	1007883a 	mov	r3,r2
   24470:	00801444 	movi	r2,81
   24474:	18800015 	stw	r2,0(r3)
    return -1;
   24478:	00bfffc4 	movi	r2,-1
  }
}
   2447c:	e037883a 	mov	sp,fp
   24480:	dfc00117 	ldw	ra,4(sp)
   24484:	df000017 	ldw	fp,0(sp)
   24488:	dec00204 	addi	sp,sp,8
   2448c:	f800283a 	ret

00024490 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   24490:	defffd04 	addi	sp,sp,-12
   24494:	df000215 	stw	fp,8(sp)
   24498:	df000204 	addi	fp,sp,8
   2449c:	e13ffe15 	stw	r4,-8(fp)
   244a0:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   244a4:	0001883a 	nop
   244a8:	e037883a 	mov	sp,fp
   244ac:	df000017 	ldw	fp,0(sp)
   244b0:	dec00104 	addi	sp,sp,4
   244b4:	f800283a 	ret

000244b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   244b8:	deffff04 	addi	sp,sp,-4
   244bc:	df000015 	stw	fp,0(sp)
   244c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   244c4:	0001883a 	nop
   244c8:	e037883a 	mov	sp,fp
   244cc:	df000017 	ldw	fp,0(sp)
   244d0:	dec00104 	addi	sp,sp,4
   244d4:	f800283a 	ret

000244d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   244d8:	defffc04 	addi	sp,sp,-16
   244dc:	df000315 	stw	fp,12(sp)
   244e0:	df000304 	addi	fp,sp,12
   244e4:	e13ffd15 	stw	r4,-12(fp)
   244e8:	e17ffe15 	stw	r5,-8(fp)
   244ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   244f0:	e0bfff17 	ldw	r2,-4(fp)
}
   244f4:	e037883a 	mov	sp,fp
   244f8:	df000017 	ldw	fp,0(sp)
   244fc:	dec00104 	addi	sp,sp,4
   24500:	f800283a 	ret

00024504 <alt_get_errno>:
   24504:	defffe04 	addi	sp,sp,-8
   24508:	dfc00115 	stw	ra,4(sp)
   2450c:	df000015 	stw	fp,0(sp)
   24510:	d839883a 	mov	fp,sp
   24514:	d0a00b17 	ldw	r2,-32724(gp)
   24518:	10000326 	beq	r2,zero,24528 <alt_get_errno+0x24>
   2451c:	d0a00b17 	ldw	r2,-32724(gp)
   24520:	103ee83a 	callr	r2
   24524:	00000106 	br	2452c <alt_get_errno+0x28>
   24528:	d0a0e204 	addi	r2,gp,-31864
   2452c:	e037883a 	mov	sp,fp
   24530:	dfc00117 	ldw	ra,4(sp)
   24534:	df000017 	ldw	fp,0(sp)
   24538:	dec00204 	addi	sp,sp,8
   2453c:	f800283a 	ret

00024540 <alt_dev_llist_insert>:
   24540:	defffa04 	addi	sp,sp,-24
   24544:	dfc00515 	stw	ra,20(sp)
   24548:	df000415 	stw	fp,16(sp)
   2454c:	df000404 	addi	fp,sp,16
   24550:	e13ffe15 	stw	r4,-8(fp)
   24554:	e17fff15 	stw	r5,-4(fp)
   24558:	e0bffe17 	ldw	r2,-8(fp)
   2455c:	10000326 	beq	r2,zero,2456c <alt_dev_llist_insert+0x2c>
   24560:	e0bffe17 	ldw	r2,-8(fp)
   24564:	10800217 	ldw	r2,8(r2)
   24568:	1000061e 	bne	r2,zero,24584 <alt_dev_llist_insert+0x44>
   2456c:	00245040 	call	24504 <alt_get_errno>
   24570:	1007883a 	mov	r3,r2
   24574:	00800584 	movi	r2,22
   24578:	18800015 	stw	r2,0(r3)
   2457c:	00bffa84 	movi	r2,-22
   24580:	00001306 	br	245d0 <alt_dev_llist_insert+0x90>
   24584:	e0bffe17 	ldw	r2,-8(fp)
   24588:	e0ffff17 	ldw	r3,-4(fp)
   2458c:	e0fffc15 	stw	r3,-16(fp)
   24590:	e0bffd15 	stw	r2,-12(fp)
   24594:	e0bffd17 	ldw	r2,-12(fp)
   24598:	e0fffc17 	ldw	r3,-16(fp)
   2459c:	10c00115 	stw	r3,4(r2)
   245a0:	e0bffc17 	ldw	r2,-16(fp)
   245a4:	10c00017 	ldw	r3,0(r2)
   245a8:	e0bffd17 	ldw	r2,-12(fp)
   245ac:	10c00015 	stw	r3,0(r2)
   245b0:	e0bffc17 	ldw	r2,-16(fp)
   245b4:	10800017 	ldw	r2,0(r2)
   245b8:	e0fffd17 	ldw	r3,-12(fp)
   245bc:	10c00115 	stw	r3,4(r2)
   245c0:	e0bffc17 	ldw	r2,-16(fp)
   245c4:	e0fffd17 	ldw	r3,-12(fp)
   245c8:	10c00015 	stw	r3,0(r2)
   245cc:	0005883a 	mov	r2,zero
   245d0:	e037883a 	mov	sp,fp
   245d4:	dfc00117 	ldw	ra,4(sp)
   245d8:	df000017 	ldw	fp,0(sp)
   245dc:	dec00204 	addi	sp,sp,8
   245e0:	f800283a 	ret

000245e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   245e4:	defffa04 	addi	sp,sp,-24
   245e8:	dfc00515 	stw	ra,20(sp)
   245ec:	df000415 	stw	fp,16(sp)
   245f0:	df000404 	addi	fp,sp,16
   245f4:	e13ffe15 	stw	r4,-8(fp)
   245f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   245fc:	e0bfff17 	ldw	r2,-4(fp)
   24600:	10800017 	ldw	r2,0(r2)
   24604:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24608:	e13ffe17 	ldw	r4,-8(fp)
   2460c:	002271c0 	call	2271c <strlen>
   24610:	10800044 	addi	r2,r2,1
   24614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24618:	00000d06 	br	24650 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2461c:	e0bffc17 	ldw	r2,-16(fp)
   24620:	10800217 	ldw	r2,8(r2)
   24624:	e0fffd17 	ldw	r3,-12(fp)
   24628:	180d883a 	mov	r6,r3
   2462c:	e17ffe17 	ldw	r5,-8(fp)
   24630:	1009883a 	mov	r4,r2
   24634:	00250480 	call	25048 <memcmp>
   24638:	1000021e 	bne	r2,zero,24644 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2463c:	e0bffc17 	ldw	r2,-16(fp)
   24640:	00000706 	br	24660 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24644:	e0bffc17 	ldw	r2,-16(fp)
   24648:	10800017 	ldw	r2,0(r2)
   2464c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24650:	e0fffc17 	ldw	r3,-16(fp)
   24654:	e0bfff17 	ldw	r2,-4(fp)
   24658:	18bff01e 	bne	r3,r2,2461c <gameover+0xefeea17c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2465c:	0005883a 	mov	r2,zero
}
   24660:	e037883a 	mov	sp,fp
   24664:	dfc00117 	ldw	ra,4(sp)
   24668:	df000017 	ldw	fp,0(sp)
   2466c:	dec00204 	addi	sp,sp,8
   24670:	f800283a 	ret

00024674 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24674:	deffff04 	addi	sp,sp,-4
   24678:	df000015 	stw	fp,0(sp)
   2467c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24680:	0001883a 	nop
   24684:	e037883a 	mov	sp,fp
   24688:	df000017 	ldw	fp,0(sp)
   2468c:	dec00104 	addi	sp,sp,4
   24690:	f800283a 	ret

00024694 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24694:	defff904 	addi	sp,sp,-28
   24698:	dfc00615 	stw	ra,24(sp)
   2469c:	df000515 	stw	fp,20(sp)
   246a0:	df000504 	addi	fp,sp,20
   246a4:	e13ffc15 	stw	r4,-16(fp)
   246a8:	e17ffd15 	stw	r5,-12(fp)
   246ac:	e1bffe15 	stw	r6,-8(fp)
   246b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   246b4:	e0800217 	ldw	r2,8(fp)
   246b8:	d8800015 	stw	r2,0(sp)
   246bc:	e1ffff17 	ldw	r7,-4(fp)
   246c0:	e1bffe17 	ldw	r6,-8(fp)
   246c4:	e17ffd17 	ldw	r5,-12(fp)
   246c8:	e13ffc17 	ldw	r4,-16(fp)
   246cc:	00248440 	call	24844 <alt_iic_isr_register>
}  
   246d0:	e037883a 	mov	sp,fp
   246d4:	dfc00117 	ldw	ra,4(sp)
   246d8:	df000017 	ldw	fp,0(sp)
   246dc:	dec00204 	addi	sp,sp,8
   246e0:	f800283a 	ret

000246e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   246e4:	defff904 	addi	sp,sp,-28
   246e8:	df000615 	stw	fp,24(sp)
   246ec:	df000604 	addi	fp,sp,24
   246f0:	e13ffe15 	stw	r4,-8(fp)
   246f4:	e17fff15 	stw	r5,-4(fp)
   246f8:	e0bfff17 	ldw	r2,-4(fp)
   246fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24700:	0005303a 	rdctl	r2,status
   24704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24708:	e0fffb17 	ldw	r3,-20(fp)
   2470c:	00bfff84 	movi	r2,-2
   24710:	1884703a 	and	r2,r3,r2
   24714:	1001703a 	wrctl	status,r2
  
  return context;
   24718:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2471c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   24720:	00c00044 	movi	r3,1
   24724:	e0bffa17 	ldw	r2,-24(fp)
   24728:	1884983a 	sll	r2,r3,r2
   2472c:	1007883a 	mov	r3,r2
   24730:	d0a0e617 	ldw	r2,-31848(gp)
   24734:	1884b03a 	or	r2,r3,r2
   24738:	d0a0e615 	stw	r2,-31848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2473c:	d0a0e617 	ldw	r2,-31848(gp)
   24740:	100170fa 	wrctl	ienable,r2
   24744:	e0bffc17 	ldw	r2,-16(fp)
   24748:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2474c:	e0bffd17 	ldw	r2,-12(fp)
   24750:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24754:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   24758:	0001883a 	nop
}
   2475c:	e037883a 	mov	sp,fp
   24760:	df000017 	ldw	fp,0(sp)
   24764:	dec00104 	addi	sp,sp,4
   24768:	f800283a 	ret

0002476c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2476c:	defff904 	addi	sp,sp,-28
   24770:	df000615 	stw	fp,24(sp)
   24774:	df000604 	addi	fp,sp,24
   24778:	e13ffe15 	stw	r4,-8(fp)
   2477c:	e17fff15 	stw	r5,-4(fp)
   24780:	e0bfff17 	ldw	r2,-4(fp)
   24784:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24788:	0005303a 	rdctl	r2,status
   2478c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24790:	e0fffb17 	ldw	r3,-20(fp)
   24794:	00bfff84 	movi	r2,-2
   24798:	1884703a 	and	r2,r3,r2
   2479c:	1001703a 	wrctl	status,r2
  
  return context;
   247a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   247a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   247a8:	00c00044 	movi	r3,1
   247ac:	e0bffa17 	ldw	r2,-24(fp)
   247b0:	1884983a 	sll	r2,r3,r2
   247b4:	0084303a 	nor	r2,zero,r2
   247b8:	1007883a 	mov	r3,r2
   247bc:	d0a0e617 	ldw	r2,-31848(gp)
   247c0:	1884703a 	and	r2,r3,r2
   247c4:	d0a0e615 	stw	r2,-31848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   247c8:	d0a0e617 	ldw	r2,-31848(gp)
   247cc:	100170fa 	wrctl	ienable,r2
   247d0:	e0bffc17 	ldw	r2,-16(fp)
   247d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   247d8:	e0bffd17 	ldw	r2,-12(fp)
   247dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   247e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   247e4:	0001883a 	nop
}
   247e8:	e037883a 	mov	sp,fp
   247ec:	df000017 	ldw	fp,0(sp)
   247f0:	dec00104 	addi	sp,sp,4
   247f4:	f800283a 	ret

000247f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   247f8:	defffc04 	addi	sp,sp,-16
   247fc:	df000315 	stw	fp,12(sp)
   24800:	df000304 	addi	fp,sp,12
   24804:	e13ffe15 	stw	r4,-8(fp)
   24808:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2480c:	000530fa 	rdctl	r2,ienable
   24810:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24814:	00c00044 	movi	r3,1
   24818:	e0bfff17 	ldw	r2,-4(fp)
   2481c:	1884983a 	sll	r2,r3,r2
   24820:	1007883a 	mov	r3,r2
   24824:	e0bffd17 	ldw	r2,-12(fp)
   24828:	1884703a 	and	r2,r3,r2
   2482c:	1004c03a 	cmpne	r2,r2,zero
   24830:	10803fcc 	andi	r2,r2,255
}
   24834:	e037883a 	mov	sp,fp
   24838:	df000017 	ldw	fp,0(sp)
   2483c:	dec00104 	addi	sp,sp,4
   24840:	f800283a 	ret

00024844 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24844:	defff504 	addi	sp,sp,-44
   24848:	dfc00a15 	stw	ra,40(sp)
   2484c:	df000915 	stw	fp,36(sp)
   24850:	df000904 	addi	fp,sp,36
   24854:	e13ffc15 	stw	r4,-16(fp)
   24858:	e17ffd15 	stw	r5,-12(fp)
   2485c:	e1bffe15 	stw	r6,-8(fp)
   24860:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   24864:	00bffa84 	movi	r2,-22
   24868:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2486c:	e0bffd17 	ldw	r2,-12(fp)
   24870:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24874:	e0bff817 	ldw	r2,-32(fp)
   24878:	10800808 	cmpgei	r2,r2,32
   2487c:	1000271e 	bne	r2,zero,2491c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24880:	0005303a 	rdctl	r2,status
   24884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24888:	e0fffb17 	ldw	r3,-20(fp)
   2488c:	00bfff84 	movi	r2,-2
   24890:	1884703a 	and	r2,r3,r2
   24894:	1001703a 	wrctl	status,r2
  
  return context;
   24898:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2489c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   248a0:	008000b4 	movhi	r2,2
   248a4:	1097f104 	addi	r2,r2,24516
   248a8:	e0fff817 	ldw	r3,-32(fp)
   248ac:	180690fa 	slli	r3,r3,3
   248b0:	10c5883a 	add	r2,r2,r3
   248b4:	e0fffe17 	ldw	r3,-8(fp)
   248b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   248bc:	008000b4 	movhi	r2,2
   248c0:	1097f104 	addi	r2,r2,24516
   248c4:	e0fff817 	ldw	r3,-32(fp)
   248c8:	180690fa 	slli	r3,r3,3
   248cc:	10c5883a 	add	r2,r2,r3
   248d0:	10800104 	addi	r2,r2,4
   248d4:	e0ffff17 	ldw	r3,-4(fp)
   248d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   248dc:	e0bffe17 	ldw	r2,-8(fp)
   248e0:	10000526 	beq	r2,zero,248f8 <alt_iic_isr_register+0xb4>
   248e4:	e0bff817 	ldw	r2,-32(fp)
   248e8:	100b883a 	mov	r5,r2
   248ec:	e13ffc17 	ldw	r4,-16(fp)
   248f0:	00246e40 	call	246e4 <alt_ic_irq_enable>
   248f4:	00000406 	br	24908 <alt_iic_isr_register+0xc4>
   248f8:	e0bff817 	ldw	r2,-32(fp)
   248fc:	100b883a 	mov	r5,r2
   24900:	e13ffc17 	ldw	r4,-16(fp)
   24904:	002476c0 	call	2476c <alt_ic_irq_disable>
   24908:	e0bff715 	stw	r2,-36(fp)
   2490c:	e0bffa17 	ldw	r2,-24(fp)
   24910:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24914:	e0bff917 	ldw	r2,-28(fp)
   24918:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2491c:	e0bff717 	ldw	r2,-36(fp)
}
   24920:	e037883a 	mov	sp,fp
   24924:	dfc00117 	ldw	ra,4(sp)
   24928:	df000017 	ldw	fp,0(sp)
   2492c:	dec00204 	addi	sp,sp,8
   24930:	f800283a 	ret

00024934 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24934:	defff804 	addi	sp,sp,-32
   24938:	dfc00715 	stw	ra,28(sp)
   2493c:	df000615 	stw	fp,24(sp)
   24940:	dc000515 	stw	r16,20(sp)
   24944:	df000604 	addi	fp,sp,24
   24948:	e13ffb15 	stw	r4,-20(fp)
   2494c:	e17ffc15 	stw	r5,-16(fp)
   24950:	e1bffd15 	stw	r6,-12(fp)
   24954:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   24958:	e1bffe17 	ldw	r6,-8(fp)
   2495c:	e17ffd17 	ldw	r5,-12(fp)
   24960:	e13ffc17 	ldw	r4,-16(fp)
   24964:	0024bbc0 	call	24bbc <open>
   24968:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   2496c:	e0bffa17 	ldw	r2,-24(fp)
   24970:	10002216 	blt	r2,zero,249fc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   24974:	040000b4 	movhi	r16,2
   24978:	8416a904 	addi	r16,r16,23204
   2497c:	e0bffa17 	ldw	r2,-24(fp)
   24980:	01400304 	movi	r5,12
   24984:	1009883a 	mov	r4,r2
   24988:	00225b40 	call	225b4 <__mulsi3>
   2498c:	8085883a 	add	r2,r16,r2
   24990:	10c00017 	ldw	r3,0(r2)
   24994:	e0bffb17 	ldw	r2,-20(fp)
   24998:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2499c:	040000b4 	movhi	r16,2
   249a0:	8416a904 	addi	r16,r16,23204
   249a4:	e0bffa17 	ldw	r2,-24(fp)
   249a8:	01400304 	movi	r5,12
   249ac:	1009883a 	mov	r4,r2
   249b0:	00225b40 	call	225b4 <__mulsi3>
   249b4:	8085883a 	add	r2,r16,r2
   249b8:	10800104 	addi	r2,r2,4
   249bc:	10c00017 	ldw	r3,0(r2)
   249c0:	e0bffb17 	ldw	r2,-20(fp)
   249c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   249c8:	040000b4 	movhi	r16,2
   249cc:	8416a904 	addi	r16,r16,23204
   249d0:	e0bffa17 	ldw	r2,-24(fp)
   249d4:	01400304 	movi	r5,12
   249d8:	1009883a 	mov	r4,r2
   249dc:	00225b40 	call	225b4 <__mulsi3>
   249e0:	8085883a 	add	r2,r16,r2
   249e4:	10800204 	addi	r2,r2,8
   249e8:	10c00017 	ldw	r3,0(r2)
   249ec:	e0bffb17 	ldw	r2,-20(fp)
   249f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   249f4:	e13ffa17 	ldw	r4,-24(fp)
   249f8:	0024d180 	call	24d18 <alt_release_fd>
  }
} 
   249fc:	0001883a 	nop
   24a00:	e6ffff04 	addi	sp,fp,-4
   24a04:	dfc00217 	ldw	ra,8(sp)
   24a08:	df000117 	ldw	fp,4(sp)
   24a0c:	dc000017 	ldw	r16,0(sp)
   24a10:	dec00304 	addi	sp,sp,12
   24a14:	f800283a 	ret

00024a18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24a18:	defffb04 	addi	sp,sp,-20
   24a1c:	dfc00415 	stw	ra,16(sp)
   24a20:	df000315 	stw	fp,12(sp)
   24a24:	df000304 	addi	fp,sp,12
   24a28:	e13ffd15 	stw	r4,-12(fp)
   24a2c:	e17ffe15 	stw	r5,-8(fp)
   24a30:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24a34:	01c07fc4 	movi	r7,511
   24a38:	01800044 	movi	r6,1
   24a3c:	e17ffd17 	ldw	r5,-12(fp)
   24a40:	010000b4 	movhi	r4,2
   24a44:	2116ac04 	addi	r4,r4,23216
   24a48:	00249340 	call	24934 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24a4c:	01c07fc4 	movi	r7,511
   24a50:	000d883a 	mov	r6,zero
   24a54:	e17ffe17 	ldw	r5,-8(fp)
   24a58:	010000b4 	movhi	r4,2
   24a5c:	2116a904 	addi	r4,r4,23204
   24a60:	00249340 	call	24934 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24a64:	01c07fc4 	movi	r7,511
   24a68:	01800044 	movi	r6,1
   24a6c:	e17fff17 	ldw	r5,-4(fp)
   24a70:	010000b4 	movhi	r4,2
   24a74:	2116af04 	addi	r4,r4,23228
   24a78:	00249340 	call	24934 <alt_open_fd>
}  
   24a7c:	0001883a 	nop
   24a80:	e037883a 	mov	sp,fp
   24a84:	dfc00117 	ldw	ra,4(sp)
   24a88:	df000017 	ldw	fp,0(sp)
   24a8c:	dec00204 	addi	sp,sp,8
   24a90:	f800283a 	ret

00024a94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24a94:	defffe04 	addi	sp,sp,-8
   24a98:	dfc00115 	stw	ra,4(sp)
   24a9c:	df000015 	stw	fp,0(sp)
   24aa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24aa4:	d0a00b17 	ldw	r2,-32724(gp)
   24aa8:	10000326 	beq	r2,zero,24ab8 <alt_get_errno+0x24>
   24aac:	d0a00b17 	ldw	r2,-32724(gp)
   24ab0:	103ee83a 	callr	r2
   24ab4:	00000106 	br	24abc <alt_get_errno+0x28>
   24ab8:	d0a0e204 	addi	r2,gp,-31864
}
   24abc:	e037883a 	mov	sp,fp
   24ac0:	dfc00117 	ldw	ra,4(sp)
   24ac4:	df000017 	ldw	fp,0(sp)
   24ac8:	dec00204 	addi	sp,sp,8
   24acc:	f800283a 	ret

00024ad0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24ad0:	defffb04 	addi	sp,sp,-20
   24ad4:	dfc00415 	stw	ra,16(sp)
   24ad8:	df000315 	stw	fp,12(sp)
   24adc:	dc000215 	stw	r16,8(sp)
   24ae0:	df000304 	addi	fp,sp,12
   24ae4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24ae8:	e0bffe17 	ldw	r2,-8(fp)
   24aec:	10800217 	ldw	r2,8(r2)
   24af0:	10d00034 	orhi	r3,r2,16384
   24af4:	e0bffe17 	ldw	r2,-8(fp)
   24af8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24afc:	e03ffd15 	stw	zero,-12(fp)
   24b00:	00002306 	br	24b90 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24b04:	040000b4 	movhi	r16,2
   24b08:	8416a904 	addi	r16,r16,23204
   24b0c:	e0bffd17 	ldw	r2,-12(fp)
   24b10:	01400304 	movi	r5,12
   24b14:	1009883a 	mov	r4,r2
   24b18:	00225b40 	call	225b4 <__mulsi3>
   24b1c:	8085883a 	add	r2,r16,r2
   24b20:	10c00017 	ldw	r3,0(r2)
   24b24:	e0bffe17 	ldw	r2,-8(fp)
   24b28:	10800017 	ldw	r2,0(r2)
   24b2c:	1880151e 	bne	r3,r2,24b84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24b30:	040000b4 	movhi	r16,2
   24b34:	8416a904 	addi	r16,r16,23204
   24b38:	e0bffd17 	ldw	r2,-12(fp)
   24b3c:	01400304 	movi	r5,12
   24b40:	1009883a 	mov	r4,r2
   24b44:	00225b40 	call	225b4 <__mulsi3>
   24b48:	8085883a 	add	r2,r16,r2
   24b4c:	10800204 	addi	r2,r2,8
   24b50:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24b54:	10000b0e 	bge	r2,zero,24b84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24b58:	01400304 	movi	r5,12
   24b5c:	e13ffd17 	ldw	r4,-12(fp)
   24b60:	00225b40 	call	225b4 <__mulsi3>
   24b64:	1007883a 	mov	r3,r2
   24b68:	008000b4 	movhi	r2,2
   24b6c:	1096a904 	addi	r2,r2,23204
   24b70:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24b74:	e0bffe17 	ldw	r2,-8(fp)
   24b78:	18800226 	beq	r3,r2,24b84 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24b7c:	00bffcc4 	movi	r2,-13
   24b80:	00000806 	br	24ba4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24b84:	e0bffd17 	ldw	r2,-12(fp)
   24b88:	10800044 	addi	r2,r2,1
   24b8c:	e0bffd15 	stw	r2,-12(fp)
   24b90:	d0a00a17 	ldw	r2,-32728(gp)
   24b94:	1007883a 	mov	r3,r2
   24b98:	e0bffd17 	ldw	r2,-12(fp)
   24b9c:	18bfd92e 	bgeu	r3,r2,24b04 <gameover+0xefeea664>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24ba0:	0005883a 	mov	r2,zero
}
   24ba4:	e6ffff04 	addi	sp,fp,-4
   24ba8:	dfc00217 	ldw	ra,8(sp)
   24bac:	df000117 	ldw	fp,4(sp)
   24bb0:	dc000017 	ldw	r16,0(sp)
   24bb4:	dec00304 	addi	sp,sp,12
   24bb8:	f800283a 	ret

00024bbc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24bbc:	defff604 	addi	sp,sp,-40
   24bc0:	dfc00915 	stw	ra,36(sp)
   24bc4:	df000815 	stw	fp,32(sp)
   24bc8:	df000804 	addi	fp,sp,32
   24bcc:	e13ffd15 	stw	r4,-12(fp)
   24bd0:	e17ffe15 	stw	r5,-8(fp)
   24bd4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24bd8:	00bfffc4 	movi	r2,-1
   24bdc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24be0:	00bffb44 	movi	r2,-19
   24be4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24be8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24bec:	d1600804 	addi	r5,gp,-32736
   24bf0:	e13ffd17 	ldw	r4,-12(fp)
   24bf4:	00245e40 	call	245e4 <alt_find_dev>
   24bf8:	e0bff815 	stw	r2,-32(fp)
   24bfc:	e0bff817 	ldw	r2,-32(fp)
   24c00:	1000051e 	bne	r2,zero,24c18 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24c04:	e13ffd17 	ldw	r4,-12(fp)
   24c08:	0024dc00 	call	24dc0 <alt_find_file>
   24c0c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24c10:	00800044 	movi	r2,1
   24c14:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24c18:	e0bff817 	ldw	r2,-32(fp)
   24c1c:	10002b26 	beq	r2,zero,24ccc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24c20:	e13ff817 	ldw	r4,-32(fp)
   24c24:	0024ec80 	call	24ec8 <alt_get_fd>
   24c28:	e0bff915 	stw	r2,-28(fp)
   24c2c:	e0bff917 	ldw	r2,-28(fp)
   24c30:	1000030e 	bge	r2,zero,24c40 <open+0x84>
    {
      status = index;
   24c34:	e0bff917 	ldw	r2,-28(fp)
   24c38:	e0bffa15 	stw	r2,-24(fp)
   24c3c:	00002506 	br	24cd4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24c40:	01400304 	movi	r5,12
   24c44:	e13ff917 	ldw	r4,-28(fp)
   24c48:	00225b40 	call	225b4 <__mulsi3>
   24c4c:	1007883a 	mov	r3,r2
   24c50:	008000b4 	movhi	r2,2
   24c54:	1096a904 	addi	r2,r2,23204
   24c58:	1885883a 	add	r2,r3,r2
   24c5c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24c60:	e0fffe17 	ldw	r3,-8(fp)
   24c64:	00900034 	movhi	r2,16384
   24c68:	10bfffc4 	addi	r2,r2,-1
   24c6c:	1886703a 	and	r3,r3,r2
   24c70:	e0bffc17 	ldw	r2,-16(fp)
   24c74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24c78:	e0bffb17 	ldw	r2,-20(fp)
   24c7c:	1000051e 	bne	r2,zero,24c94 <open+0xd8>
   24c80:	e13ffc17 	ldw	r4,-16(fp)
   24c84:	0024ad00 	call	24ad0 <alt_file_locked>
   24c88:	e0bffa15 	stw	r2,-24(fp)
   24c8c:	e0bffa17 	ldw	r2,-24(fp)
   24c90:	10001016 	blt	r2,zero,24cd4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24c94:	e0bff817 	ldw	r2,-32(fp)
   24c98:	10800317 	ldw	r2,12(r2)
   24c9c:	10000826 	beq	r2,zero,24cc0 <open+0x104>
   24ca0:	e0bff817 	ldw	r2,-32(fp)
   24ca4:	10800317 	ldw	r2,12(r2)
   24ca8:	e1ffff17 	ldw	r7,-4(fp)
   24cac:	e1bffe17 	ldw	r6,-8(fp)
   24cb0:	e17ffd17 	ldw	r5,-12(fp)
   24cb4:	e13ffc17 	ldw	r4,-16(fp)
   24cb8:	103ee83a 	callr	r2
   24cbc:	00000106 	br	24cc4 <open+0x108>
   24cc0:	0005883a 	mov	r2,zero
   24cc4:	e0bffa15 	stw	r2,-24(fp)
   24cc8:	00000206 	br	24cd4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24ccc:	00bffb44 	movi	r2,-19
   24cd0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24cd4:	e0bffa17 	ldw	r2,-24(fp)
   24cd8:	1000090e 	bge	r2,zero,24d00 <open+0x144>
  {
    alt_release_fd (index);  
   24cdc:	e13ff917 	ldw	r4,-28(fp)
   24ce0:	0024d180 	call	24d18 <alt_release_fd>
    ALT_ERRNO = -status;
   24ce4:	0024a940 	call	24a94 <alt_get_errno>
   24ce8:	1007883a 	mov	r3,r2
   24cec:	e0bffa17 	ldw	r2,-24(fp)
   24cf0:	0085c83a 	sub	r2,zero,r2
   24cf4:	18800015 	stw	r2,0(r3)
    return -1;
   24cf8:	00bfffc4 	movi	r2,-1
   24cfc:	00000106 	br	24d04 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   24d00:	e0bff917 	ldw	r2,-28(fp)
}
   24d04:	e037883a 	mov	sp,fp
   24d08:	dfc00117 	ldw	ra,4(sp)
   24d0c:	df000017 	ldw	fp,0(sp)
   24d10:	dec00204 	addi	sp,sp,8
   24d14:	f800283a 	ret

00024d18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   24d18:	defffc04 	addi	sp,sp,-16
   24d1c:	dfc00315 	stw	ra,12(sp)
   24d20:	df000215 	stw	fp,8(sp)
   24d24:	dc000115 	stw	r16,4(sp)
   24d28:	df000204 	addi	fp,sp,8
   24d2c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   24d30:	e0bffe17 	ldw	r2,-8(fp)
   24d34:	108000d0 	cmplti	r2,r2,3
   24d38:	1000111e 	bne	r2,zero,24d80 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   24d3c:	040000b4 	movhi	r16,2
   24d40:	8416a904 	addi	r16,r16,23204
   24d44:	e0bffe17 	ldw	r2,-8(fp)
   24d48:	01400304 	movi	r5,12
   24d4c:	1009883a 	mov	r4,r2
   24d50:	00225b40 	call	225b4 <__mulsi3>
   24d54:	8085883a 	add	r2,r16,r2
   24d58:	10800204 	addi	r2,r2,8
   24d5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   24d60:	040000b4 	movhi	r16,2
   24d64:	8416a904 	addi	r16,r16,23204
   24d68:	e0bffe17 	ldw	r2,-8(fp)
   24d6c:	01400304 	movi	r5,12
   24d70:	1009883a 	mov	r4,r2
   24d74:	00225b40 	call	225b4 <__mulsi3>
   24d78:	8085883a 	add	r2,r16,r2
   24d7c:	10000015 	stw	zero,0(r2)
  }
}
   24d80:	0001883a 	nop
   24d84:	e6ffff04 	addi	sp,fp,-4
   24d88:	dfc00217 	ldw	ra,8(sp)
   24d8c:	df000117 	ldw	fp,4(sp)
   24d90:	dc000017 	ldw	r16,0(sp)
   24d94:	dec00304 	addi	sp,sp,12
   24d98:	f800283a 	ret

00024d9c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24d9c:	deffff04 	addi	sp,sp,-4
   24da0:	df000015 	stw	fp,0(sp)
   24da4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24da8:	000170fa 	wrctl	ienable,zero
}
   24dac:	0001883a 	nop
   24db0:	e037883a 	mov	sp,fp
   24db4:	df000017 	ldw	fp,0(sp)
   24db8:	dec00104 	addi	sp,sp,4
   24dbc:	f800283a 	ret

00024dc0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24dc0:	defffb04 	addi	sp,sp,-20
   24dc4:	dfc00415 	stw	ra,16(sp)
   24dc8:	df000315 	stw	fp,12(sp)
   24dcc:	df000304 	addi	fp,sp,12
   24dd0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24dd4:	d0a00617 	ldw	r2,-32744(gp)
   24dd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24ddc:	00003106 	br	24ea4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24de0:	e0bffd17 	ldw	r2,-12(fp)
   24de4:	10800217 	ldw	r2,8(r2)
   24de8:	1009883a 	mov	r4,r2
   24dec:	002271c0 	call	2271c <strlen>
   24df0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24df4:	e0bffd17 	ldw	r2,-12(fp)
   24df8:	10c00217 	ldw	r3,8(r2)
   24dfc:	e0bffe17 	ldw	r2,-8(fp)
   24e00:	10bfffc4 	addi	r2,r2,-1
   24e04:	1885883a 	add	r2,r3,r2
   24e08:	10800003 	ldbu	r2,0(r2)
   24e0c:	10803fcc 	andi	r2,r2,255
   24e10:	1080201c 	xori	r2,r2,128
   24e14:	10bfe004 	addi	r2,r2,-128
   24e18:	10800bd8 	cmpnei	r2,r2,47
   24e1c:	1000031e 	bne	r2,zero,24e2c <alt_find_file+0x6c>
    {
      len -= 1;
   24e20:	e0bffe17 	ldw	r2,-8(fp)
   24e24:	10bfffc4 	addi	r2,r2,-1
   24e28:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24e2c:	e0bffe17 	ldw	r2,-8(fp)
   24e30:	e0ffff17 	ldw	r3,-4(fp)
   24e34:	1885883a 	add	r2,r3,r2
   24e38:	10800003 	ldbu	r2,0(r2)
   24e3c:	10803fcc 	andi	r2,r2,255
   24e40:	1080201c 	xori	r2,r2,128
   24e44:	10bfe004 	addi	r2,r2,-128
   24e48:	10800be0 	cmpeqi	r2,r2,47
   24e4c:	1000081e 	bne	r2,zero,24e70 <alt_find_file+0xb0>
   24e50:	e0bffe17 	ldw	r2,-8(fp)
   24e54:	e0ffff17 	ldw	r3,-4(fp)
   24e58:	1885883a 	add	r2,r3,r2
   24e5c:	10800003 	ldbu	r2,0(r2)
   24e60:	10803fcc 	andi	r2,r2,255
   24e64:	1080201c 	xori	r2,r2,128
   24e68:	10bfe004 	addi	r2,r2,-128
   24e6c:	10000a1e 	bne	r2,zero,24e98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24e70:	e0bffd17 	ldw	r2,-12(fp)
   24e74:	10800217 	ldw	r2,8(r2)
   24e78:	e0fffe17 	ldw	r3,-8(fp)
   24e7c:	180d883a 	mov	r6,r3
   24e80:	e17fff17 	ldw	r5,-4(fp)
   24e84:	1009883a 	mov	r4,r2
   24e88:	00250480 	call	25048 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24e8c:	1000021e 	bne	r2,zero,24e98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24e90:	e0bffd17 	ldw	r2,-12(fp)
   24e94:	00000706 	br	24eb4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24e98:	e0bffd17 	ldw	r2,-12(fp)
   24e9c:	10800017 	ldw	r2,0(r2)
   24ea0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24ea4:	e0fffd17 	ldw	r3,-12(fp)
   24ea8:	d0a00604 	addi	r2,gp,-32744
   24eac:	18bfcc1e 	bne	r3,r2,24de0 <gameover+0xefeea940>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24eb0:	0005883a 	mov	r2,zero
}
   24eb4:	e037883a 	mov	sp,fp
   24eb8:	dfc00117 	ldw	ra,4(sp)
   24ebc:	df000017 	ldw	fp,0(sp)
   24ec0:	dec00204 	addi	sp,sp,8
   24ec4:	f800283a 	ret

00024ec8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24ec8:	defffa04 	addi	sp,sp,-24
   24ecc:	dfc00515 	stw	ra,20(sp)
   24ed0:	df000415 	stw	fp,16(sp)
   24ed4:	dc000315 	stw	r16,12(sp)
   24ed8:	df000404 	addi	fp,sp,16
   24edc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24ee0:	00bffa04 	movi	r2,-24
   24ee4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24ee8:	e03ffc15 	stw	zero,-16(fp)
   24eec:	00001d06 	br	24f64 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   24ef0:	040000b4 	movhi	r16,2
   24ef4:	8416a904 	addi	r16,r16,23204
   24ef8:	e0bffc17 	ldw	r2,-16(fp)
   24efc:	01400304 	movi	r5,12
   24f00:	1009883a 	mov	r4,r2
   24f04:	00225b40 	call	225b4 <__mulsi3>
   24f08:	8085883a 	add	r2,r16,r2
   24f0c:	10800017 	ldw	r2,0(r2)
   24f10:	1000111e 	bne	r2,zero,24f58 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   24f14:	040000b4 	movhi	r16,2
   24f18:	8416a904 	addi	r16,r16,23204
   24f1c:	e0bffc17 	ldw	r2,-16(fp)
   24f20:	01400304 	movi	r5,12
   24f24:	1009883a 	mov	r4,r2
   24f28:	00225b40 	call	225b4 <__mulsi3>
   24f2c:	8085883a 	add	r2,r16,r2
   24f30:	e0fffe17 	ldw	r3,-8(fp)
   24f34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24f38:	d0e00a17 	ldw	r3,-32728(gp)
   24f3c:	e0bffc17 	ldw	r2,-16(fp)
   24f40:	1880020e 	bge	r3,r2,24f4c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   24f44:	e0bffc17 	ldw	r2,-16(fp)
   24f48:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   24f4c:	e0bffc17 	ldw	r2,-16(fp)
   24f50:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   24f54:	00000606 	br	24f70 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24f58:	e0bffc17 	ldw	r2,-16(fp)
   24f5c:	10800044 	addi	r2,r2,1
   24f60:	e0bffc15 	stw	r2,-16(fp)
   24f64:	e0bffc17 	ldw	r2,-16(fp)
   24f68:	10800810 	cmplti	r2,r2,32
   24f6c:	103fe01e 	bne	r2,zero,24ef0 <gameover+0xefeeaa50>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24f70:	e0bffd17 	ldw	r2,-12(fp)
}
   24f74:	e6ffff04 	addi	sp,fp,-4
   24f78:	dfc00217 	ldw	ra,8(sp)
   24f7c:	df000117 	ldw	fp,4(sp)
   24f80:	dc000017 	ldw	r16,0(sp)
   24f84:	dec00304 	addi	sp,sp,12
   24f88:	f800283a 	ret

00024f8c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24f8c:	defffe04 	addi	sp,sp,-8
   24f90:	df000115 	stw	fp,4(sp)
   24f94:	df000104 	addi	fp,sp,4
   24f98:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24f9c:	e0bfff17 	ldw	r2,-4(fp)
   24fa0:	10bffe84 	addi	r2,r2,-6
   24fa4:	10c00428 	cmpgeui	r3,r2,16
   24fa8:	18001a1e 	bne	r3,zero,25014 <alt_exception_cause_generated_bad_addr+0x88>
   24fac:	100690ba 	slli	r3,r2,2
   24fb0:	008000b4 	movhi	r2,2
   24fb4:	1093f104 	addi	r2,r2,20420
   24fb8:	1885883a 	add	r2,r3,r2
   24fbc:	10800017 	ldw	r2,0(r2)
   24fc0:	1000683a 	jmp	r2
   24fc4:	00025004 	movi	zero,2368
   24fc8:	00025004 	movi	zero,2368
   24fcc:	00025014 	movui	zero,2368
   24fd0:	00025014 	movui	zero,2368
   24fd4:	00025014 	movui	zero,2368
   24fd8:	00025004 	movi	zero,2368
   24fdc:	0002500c 	andi	zero,zero,2368
   24fe0:	00025014 	movui	zero,2368
   24fe4:	00025004 	movi	zero,2368
   24fe8:	00025004 	movi	zero,2368
   24fec:	00025014 	movui	zero,2368
   24ff0:	00025004 	movi	zero,2368
   24ff4:	0002500c 	andi	zero,zero,2368
   24ff8:	00025014 	movui	zero,2368
   24ffc:	00025014 	movui	zero,2368
   25000:	00025004 	movi	zero,2368
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25004:	00800044 	movi	r2,1
   25008:	00000306 	br	25018 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2500c:	0005883a 	mov	r2,zero
   25010:	00000106 	br	25018 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   25014:	0005883a 	mov	r2,zero
  }
}
   25018:	e037883a 	mov	sp,fp
   2501c:	df000017 	ldw	fp,0(sp)
   25020:	dec00104 	addi	sp,sp,4
   25024:	f800283a 	ret

00025028 <exit>:
   25028:	defffe04 	addi	sp,sp,-8
   2502c:	000b883a 	mov	r5,zero
   25030:	dc000015 	stw	r16,0(sp)
   25034:	dfc00115 	stw	ra,4(sp)
   25038:	2021883a 	mov	r16,r4
   2503c:	00250780 	call	25078 <__call_exitprocs>
   25040:	8009883a 	mov	r4,r16
   25044:	00252080 	call	25208 <_exit>

00025048 <memcmp>:
   25048:	218d883a 	add	r6,r4,r6
   2504c:	21800826 	beq	r4,r6,25070 <memcmp+0x28>
   25050:	20800003 	ldbu	r2,0(r4)
   25054:	28c00003 	ldbu	r3,0(r5)
   25058:	10c00226 	beq	r2,r3,25064 <memcmp+0x1c>
   2505c:	10c5c83a 	sub	r2,r2,r3
   25060:	f800283a 	ret
   25064:	21000044 	addi	r4,r4,1
   25068:	29400044 	addi	r5,r5,1
   2506c:	003ff706 	br	2504c <gameover+0xefeeabac>
   25070:	0005883a 	mov	r2,zero
   25074:	f800283a 	ret

00025078 <__call_exitprocs>:
   25078:	defff504 	addi	sp,sp,-44
   2507c:	dd000515 	stw	r20,20(sp)
   25080:	050000b4 	movhi	r20,2
   25084:	dc800315 	stw	r18,12(sp)
   25088:	dfc00a15 	stw	ra,40(sp)
   2508c:	df000915 	stw	fp,36(sp)
   25090:	ddc00815 	stw	r23,32(sp)
   25094:	dd800715 	stw	r22,28(sp)
   25098:	dd400615 	stw	r21,24(sp)
   2509c:	dcc00415 	stw	r19,16(sp)
   250a0:	dc400215 	stw	r17,8(sp)
   250a4:	dc000115 	stw	r16,4(sp)
   250a8:	d9000015 	stw	r4,0(sp)
   250ac:	2825883a 	mov	r18,r5
   250b0:	a5170b04 	addi	r20,r20,23596
   250b4:	a4400017 	ldw	r17,0(r20)
   250b8:	8cc00c17 	ldw	r19,48(r17)
   250bc:	8c400c04 	addi	r17,r17,48
   250c0:	98004526 	beq	r19,zero,251d8 <__call_exitprocs+0x160>
   250c4:	9c000117 	ldw	r16,4(r19)
   250c8:	00900034 	movhi	r2,16384
   250cc:	10bfffc4 	addi	r2,r2,-1
   250d0:	9d402217 	ldw	r21,136(r19)
   250d4:	85bfffc4 	addi	r22,r16,-1
   250d8:	80a1883a 	add	r16,r16,r2
   250dc:	8421883a 	add	r16,r16,r16
   250e0:	8421883a 	add	r16,r16,r16
   250e4:	ac2f883a 	add	r23,r21,r16
   250e8:	84000204 	addi	r16,r16,8
   250ec:	9c21883a 	add	r16,r19,r16
   250f0:	b0002716 	blt	r22,zero,25190 <__call_exitprocs+0x118>
   250f4:	90000726 	beq	r18,zero,25114 <__call_exitprocs+0x9c>
   250f8:	a800041e 	bne	r21,zero,2510c <__call_exitprocs+0x94>
   250fc:	b5bfffc4 	addi	r22,r22,-1
   25100:	bdffff04 	addi	r23,r23,-4
   25104:	843fff04 	addi	r16,r16,-4
   25108:	003ff906 	br	250f0 <gameover+0xefeeac50>
   2510c:	b9002017 	ldw	r4,128(r23)
   25110:	913ffa1e 	bne	r18,r4,250fc <gameover+0xefeeac5c>
   25114:	99000117 	ldw	r4,4(r19)
   25118:	82000017 	ldw	r8,0(r16)
   2511c:	213fffc4 	addi	r4,r4,-1
   25120:	b100021e 	bne	r22,r4,2512c <__call_exitprocs+0xb4>
   25124:	9d800115 	stw	r22,4(r19)
   25128:	00000106 	br	25130 <__call_exitprocs+0xb8>
   2512c:	80000015 	stw	zero,0(r16)
   25130:	403ff226 	beq	r8,zero,250fc <gameover+0xefeeac5c>
   25134:	9f000117 	ldw	fp,4(r19)
   25138:	a8000526 	beq	r21,zero,25150 <__call_exitprocs+0xd8>
   2513c:	00800044 	movi	r2,1
   25140:	1592983a 	sll	r9,r2,r22
   25144:	a9404017 	ldw	r5,256(r21)
   25148:	494a703a 	and	r5,r9,r5
   2514c:	2800021e 	bne	r5,zero,25158 <__call_exitprocs+0xe0>
   25150:	403ee83a 	callr	r8
   25154:	00000906 	br	2517c <__call_exitprocs+0x104>
   25158:	a9004117 	ldw	r4,260(r21)
   2515c:	4908703a 	and	r4,r9,r4
   25160:	2000041e 	bne	r4,zero,25174 <__call_exitprocs+0xfc>
   25164:	b9400017 	ldw	r5,0(r23)
   25168:	d9000017 	ldw	r4,0(sp)
   2516c:	403ee83a 	callr	r8
   25170:	00000206 	br	2517c <__call_exitprocs+0x104>
   25174:	b9000017 	ldw	r4,0(r23)
   25178:	403ee83a 	callr	r8
   2517c:	99000117 	ldw	r4,4(r19)
   25180:	e13fcc1e 	bne	fp,r4,250b4 <gameover+0xefeeac14>
   25184:	89000017 	ldw	r4,0(r17)
   25188:	993fdc26 	beq	r19,r4,250fc <gameover+0xefeeac5c>
   2518c:	003fc906 	br	250b4 <gameover+0xefeeac14>
   25190:	00800034 	movhi	r2,0
   25194:	10800004 	addi	r2,r2,0
   25198:	10000f26 	beq	r2,zero,251d8 <__call_exitprocs+0x160>
   2519c:	99400117 	ldw	r5,4(r19)
   251a0:	99000017 	ldw	r4,0(r19)
   251a4:	2800091e 	bne	r5,zero,251cc <__call_exitprocs+0x154>
   251a8:	20000826 	beq	r4,zero,251cc <__call_exitprocs+0x154>
   251ac:	89000015 	stw	r4,0(r17)
   251b0:	a8000226 	beq	r21,zero,251bc <__call_exitprocs+0x144>
   251b4:	a809883a 	mov	r4,r21
   251b8:	00000000 	call	0 <__alt_mem_Mem_for_Game_Data-0x10000>
   251bc:	9809883a 	mov	r4,r19
   251c0:	00000000 	call	0 <__alt_mem_Mem_for_Game_Data-0x10000>
   251c4:	8cc00017 	ldw	r19,0(r17)
   251c8:	003fbd06 	br	250c0 <gameover+0xefeeac20>
   251cc:	9823883a 	mov	r17,r19
   251d0:	2027883a 	mov	r19,r4
   251d4:	003fba06 	br	250c0 <gameover+0xefeeac20>
   251d8:	dfc00a17 	ldw	ra,40(sp)
   251dc:	df000917 	ldw	fp,36(sp)
   251e0:	ddc00817 	ldw	r23,32(sp)
   251e4:	dd800717 	ldw	r22,28(sp)
   251e8:	dd400617 	ldw	r21,24(sp)
   251ec:	dd000517 	ldw	r20,20(sp)
   251f0:	dcc00417 	ldw	r19,16(sp)
   251f4:	dc800317 	ldw	r18,12(sp)
   251f8:	dc400217 	ldw	r17,8(sp)
   251fc:	dc000117 	ldw	r16,4(sp)
   25200:	dec00b04 	addi	sp,sp,44
   25204:	f800283a 	ret

00025208 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25208:	defffd04 	addi	sp,sp,-12
   2520c:	df000215 	stw	fp,8(sp)
   25210:	df000204 	addi	fp,sp,8
   25214:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25218:	0001883a 	nop
   2521c:	e0bfff17 	ldw	r2,-4(fp)
   25220:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25224:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25228:	10000226 	beq	r2,zero,25234 <_exit+0x2c>
    ALT_SIM_FAIL();
   2522c:	002af070 	cmpltui	zero,zero,43969
   25230:	00000106 	br	25238 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25234:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25238:	003fff06 	br	25238 <gameover+0xefeead98>
